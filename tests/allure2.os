#Использовать asserts
// #Использовать 1commands
#Использовать json
#Использовать logos

Перем юТест;
Перем Лог;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_СоздатьОтчетАллюр2");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	// ВключитьПоказОтладки();
	Лог = Логирование.ПолучитьЛог("add.tests");
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьОтчетАллюр2() Экспорт

	ПутьФайлаРезультатов = ОбъединитьПути(КаталогТестовыхФикстур(), "ДымовыеРезультатыТестирования.json");
	
	РезультатыТестирования = ПрочитатьРезультатыТестированияИзJson(ПутьФайлаРезультатов);

	СтрокаJSON = СоздатьОтчетАллюр2(РезультатыТестирования);
	
	Ожидаем.Что(СтрокаJSON,
		"Ожидали строку JSON, но не получили.")
		.ЭтоНе().Равно("");
КонецПроцедуры

Функция КаталогТестовыхФикстур() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "spec", "fixtures");
КонецФункции // КаталогИсходников()

Функция КаталогТестов() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "tests");
КонецФункции // КаталогИсходников()

Функция КаталогИсходников() Экспорт
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции // КаталогИсходников()

Функция ПрочитатьРезультатыТестированияИзJson(ПутьФайлаРезультатов)
	ЧтениеТекста = Новый ЧтениеТекста(ПутьФайлаРезультатов, КодировкаТекста.UTF8);

	СтрокаJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Парсер = Новый ПарсерJSON();
	РезультатыТестирования = Парсер.ПрочитатьJSON(СтрокаJSON);

	Возврат РезультатыТестирования;
КонецФункции

Функция СоздатьОтчетАллюр2(РезультатыТестирования)
	ОписаниеШага = ОписаниеСценарияАллюр2();

	МассивШагов = Новый Массив;
	ДобавитьШагТестированияВМассивШагов(РезультатыТестирования.Строки, МассивШагов);

	Возврат "";
КонецФункции

Функция ОписаниеСценарияАллюр2()
	Перем СтруктураРезультата;
	
	GUID             = Новый УникальныйИдентификатор();
	СтруктураРезультата = Новый Структура(); //"uuid, historyId, name, status, parameters, labels, links, attachments");
	СтруктураРезультата.Вставить("uuid", Строка(GUID));
	СтруктураРезультата.Вставить("historyId", Неопределено);
	СтруктураРезультата.Вставить("name", Неопределено);
	СтруктураРезультата.Вставить("fullName", Неопределено);
	СтруктураРезультата.Вставить("start", Неопределено);
	СтруктураРезультата.Вставить("stop", Неопределено);
	СтруктураРезультата.Вставить("statusDetails",  Новый Структура("known, muted,flaky", Ложь, Ложь, Ложь));
	СтруктураРезультата.Вставить("status", Неопределено);
	СтруктураРезультата.Вставить("stage", "finished"); // Внятного описания, зачем это в каждом сценарии нет. 
	СтруктураРезультата.Вставить("steps", Новый Массив());
	СтруктураРезультата.Вставить("parameters", Новый Массив());
	СтруктураРезультата.Вставить("labels", Новый Массив());
	СтруктураРезультата.Вставить("links", Новый Массив());
	СтруктураРезультата.Вставить("attachments", Новый Массив());
	СтруктураРезультата.Вставить("description", Неопределено);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Процедура ДобавитьШагТестированияВМассивШагов(РезультатыТестирования, МассивШагов)
	Лог.Информация("Тип РезультатыТестирования %1", ТипЗнч(РезультатыТестирования));
	Для каждого Строка Из РезультатыТестирования Цикл
		Лог.Информация("	Тип Строка %1", ТипЗнч(Строка));
		// Ключ = КлючЗначение.Ключ;
		// Значение = КлючЗначение.Значение;

		Если Строка.Тип = "Элемент" Тогда
			МассивШагов.Добавить(Строка);
		Иначе
			ДобавитьШагТестированияВМассивШагов(Строка.Строки, МассивШагов);
		КонецЕсли;	
КонецЦикла;
КонецПроцедуры