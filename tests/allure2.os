#Использовать asserts
// #Использовать 1commands
#Использовать json
#Использовать logos

Перем юТест;
Перем Лог;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_СоздатьОтчетАллюр2");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	// ВключитьПоказОтладки();
	Лог = Логирование.ПолучитьЛог("add.tests");
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьОтчетАллюр2() Экспорт

	ПутьФайлаРезультатов = ОбъединитьПути(КаталогТестовыхФикстур(), "ДымовыеРезультатыТестирования.json");
	
	РезультатыТестирования = ПрочитатьРезультатыТестированияИзJson(ПутьФайлаРезультатов);

	СтрокаJSON = СоздатьОтчетАллюр2(РезультатыТестирования);
	
	Ожидаем.Что(СтрокаJSON,
		"Ожидали строку JSON, но не получили.")
		.Равно("");
		// .ЭтоНе().Равно("");
КонецПроцедуры

Функция КаталогТестовыхФикстур() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "spec", "fixtures");
КонецФункции // КаталогИсходников()

Функция КаталогТестов() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "tests");
КонецФункции // КаталогИсходников()

Функция КаталогИсходников() Экспорт
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции // КаталогИсходников()

Функция ПрочитатьРезультатыТестированияИзJson(ПутьФайлаРезультатов)
	ЧтениеТекста = Новый ЧтениеТекста(ПутьФайлаРезультатов, КодировкаТекста.UTF8);

	СтрокаJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Парсер = Новый ПарсерJSON();
	РезультатыТестирования = Парсер.ПрочитатьJSON(СтрокаJSON, Истина, Ложь, Истина);

	Возврат РезультатыТестирования;
КонецФункции

Функция СоздатьОтчетАллюр2(РезультатыТестирования)

	МассивШагов = Новый Массив;
	КоллекцияРодителей = Новый Соответствие;
	ДобавитьШагТестированияВМассивШагов(РезультатыТестирования, МассивШагов, КоллекцияРодителей);

	МассивОписаний = Новый Массив;
	Для каждого РезультатШага Из МассивШагов Цикл
		ОписаниеШага = СоздатьОписаниеШага(РезультатШага, КоллекцияРодителей);
		МассивОписаний.Добавить(ОписаниеШага);
	КонецЦикла;

	Рез = "";
	// ЗаписьJSON = Новый ЗаписьJSON;
	// ЗаписьJSON.УстановитьСтроку();
	// ЗаписьJSON.ЗаписатьЗначение(ОписаниеШага);
	// // ЗаписьJSON.ЗаписатьЗначение(МассивОписаний);
	// Рез = ЗаписьJSON.Закрыть();
	// Лог.Отладка("
	// |%1
	// |", Рез);
	Возврат Рез; //TODO вернуть json
КонецФункции

Функция ОписаниеСценарияАллюр2()
	Перем СтруктураРезультата;
	
	GUID             = Новый УникальныйИдентификатор();
	СтруктураРезультата = Новый Структура(); //"uuid, historyId, name, status, parameters, labels, links, attachments");
	СтруктураРезультата.Вставить("uuid", Строка(GUID));
	СтруктураРезультата.Вставить("historyId", Неопределено);
	СтруктураРезультата.Вставить("name", Неопределено);
	СтруктураРезультата.Вставить("fullName", Неопределено);
	СтруктураРезультата.Вставить("start", Неопределено);
	СтруктураРезультата.Вставить("stop", Неопределено);
	СтруктураРезультата.Вставить("statusDetails",  Новый Структура("known, muted,flaky", Ложь, Ложь, Ложь));
	СтруктураРезультата.Вставить("status", Неопределено);
	СтруктураРезультата.Вставить("stage", "finished"); // Внятного описания, зачем это в каждом сценарии нет. 
	СтруктураРезультата.Вставить("steps", Новый Массив());
	СтруктураРезультата.Вставить("parameters", Новый Массив());
	СтруктураРезультата.Вставить("labels", Новый Массив());
	СтруктураРезультата.Вставить("links", Новый Массив());
	СтруктураРезультата.Вставить("attachments", Новый Массив());
	СтруктураРезультата.Вставить("description", Неопределено);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Процедура ДобавитьШагТестированияВМассивШагов(Знач РезультатыТестирования, Знач МассивШагов, Знач КоллекцияРодителей, Знач Родитель = Неопределено)
	// Лог.Отладка("Тип РезультатыТестирования %1", ТипЗнч(РезультатыТестирования));

	Если ТипЗнч(РезультатыТестирования) = Тип("Массив") Тогда
		Для каждого Строка Из РезультатыТестирования Цикл
			// Лог.Отладка("	Тип Строка %1", ТипЗнч(Строка));
			КоллекцияРодителей.Вставить(Строка.Ключ, Родитель);
			ДобавитьШагТестированияВМассивШагов(Строка, МассивШагов, КоллекцияРодителей, Родитель);
		КонецЦикла;
	Иначе
		Строка = РезультатыТестирования;
		Если Строка.Тип = "Элемент" Тогда
			Строка.Вставить("Родитель", Родитель);
			МассивШагов.Добавить(Строка);
			КоллекцияРодителей.Вставить(Строка.Ключ, Родитель);
		Иначе
			ДобавитьШагТестированияВМассивШагов(Строка.Строки, МассивШагов, КоллекцияРодителей, Строка);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Функция НайтиПоКлючу(Знач КоллекцияРодителей, Знач Ключ)
	Рез = КоллекцияРодителей.Получить(Ключ);
	Возврат Рез;
КонецФункции

Функция СоздатьОписаниеШага(Знач РезультатШага, Знач КоллекцияРодителей)
	ОписаниеШага = ОписаниеСценарияАллюр2();

	РазницаВМилисекундахМеждуЮниксИНачалЭпохи = 62135596800000;

	Лог.Отладка("Имя метода %1", РезультатШага.ИмяМетода);
	Лог.Отладка("Представление %1", РезультатШага.Представление);
	Лог.Отладка("Путь %1", РезультатШага.Путь);
	
	Родитель = РезультатШага.Родитель;
	Лог.Отладка("ТипЗнч(Родитель) %1", ТипЗнч(Родитель));
	Лог.Отладка("Родитель.Имя %1", Родитель.Имя);

	РодительРодителя = НайтиПоКлючу(КоллекцияРодителей, Родитель.Ключ);
	Лог.Отладка("ТипЗнч(РодительРодителя) %1", ТипЗнч(РодительРодителя));
	Лог.Отладка("РодительРодителя.Имя %1", РодительРодителя.Имя);

	// ОписаниеШага.historyId = СтрокаФичи.Имя + "." +  СтруктураВыгрузки.name;
	ОписаниеШага.name = РезультатШага.Представление;
	ОписаниеШага.historyId = РезультатШага.Представление;
	// СтруктураВыгрузки.Вставить("description", ДополнительноеОписание["description"]);

	ОписаниеШага.Вставить("start", РезультатШага.ВремяНачала - РазницаВМилисекундахМеждуЮниксИНачалЭпохи);
	ОписаниеШага.Вставить("stop", РезультатШага.ВремяОкончания - РазницаВМилисекундахМеждуЮниксИНачалЭпохи);	

	ВставитьОписаниеСтатуса(ОписаниеШага, РезультатШага.Сообщение);

	ОписаниеШага.Вставить("status", СтатусАллюр(РезультатШага.Состояние));

	ИмяФичи = РодительРодителя.Имя;
	ИмяСтори = Родитель.Имя;
	ИмяПакета = РезультатШага.Путь;
	ИмяХоста = РодительРодителя.Имя;

	СписокМеток = ОписаниеШага.labels;
	ДобавитьМетку(СписокМеток, "host", ИмяХоста);
	ДобавитьМетку(СписокМеток, "package", ИмяПакета);
	ДобавитьМетку(СписокМеток, "feature", ИмяФичи);
	ДобавитьМетку(СписокМеток, "feature", ИмяСтори);

	Возврат ОписаниеШага;
КонецФункции

Процедура ВставитьОписаниеСтатуса(Знач ОписаниеШага, Знач ОписаниеОшибки = "")
	
	ОписаниеШага.Вставить("statusDetails", 
		Новый Структура("known, muted, flaky, message, trace", 
			Ложь, Ложь, Ложь, ОписаниеОшибки, ""));
КонецПроцедуры

Функция СтатусАллюр(Знач СостояниеШага)
	Рез = "skipped";
	Состояния = СостоянияТестов();
	Если СостояниеШага = Состояния.Пройден Тогда
		Рез = "passed";
	ИначеЕсли СостояниеШага = Состояния.Сломан Тогда
		Рез = "pending"; //todo failed
	ИначеЕсли СостояниеШага = Состояния.НеизвестнаяОшибка Тогда
		Рез = "failed";
	ИначеЕсли СостояниеШага = Состояния.НеРеализован Тогда
		Рез = "skipped";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

Процедура ДобавитьМетку(Знач СписокМеток, Знач Имя, Знач Значение)
	
	Метка       = Новый Структура("name, value");
	Метка.name  = Имя;
	Метка.value = Значение;

КонецПроцедуры

Функция СтатусыРезультатаТестирования()
	СтатусыРезультатаТестирования = Новый Структура;
	СтатусыРезультатаТестирования.Вставить("ОшибкаПроверки", "Failed");
	СтатусыРезультатаТестирования.Вставить("НеизвестнаяОшибка", "Broken");
	СтатусыРезультатаТестирования.Вставить("ТестПропущен", "Pending");

	Возврат Новый ФиксированнаяСтруктура(СтатусыРезультатаТестирования);
КонецФункции

Функция СостоянияТестов()
	СостоянияТестов = Новый Структура;
	СостоянияТестов.Вставить("НеВыполнен", 0);
	СостоянияТестов.Вставить("Пройден", 1);
	СостоянияТестов.Вставить("НеРеализован", 2);
	СостоянияТестов.Вставить("Сломан", 3);
	СостоянияТестов.Вставить("НеизвестнаяОшибка", 4);

	Возврат Новый ФиксированнаяСтруктура(СостоянияТестов);
КонецФункции
