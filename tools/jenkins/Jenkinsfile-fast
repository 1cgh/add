#!groovy

// ВНИМАНИЕ:
// Jenkins и его ноды нужно запускать с кодировкой UTF-8
//      строка конфигурации для запуска Jenkins
//      <arguments>-Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle -Dmail.smtp.starttls.enable=true -Dfile.encoding=UTF-8 -jar "%BASE%\jenkins.war" --httpPort=8080 --webroot="%BASE%\war" </arguments>
//
//      строка для запуска нод
//      @"C:\Program Files (x86)\Jenkins\jre\bin\java.exe" -Dfile.encoding=UTF-8 -jar slave.jar -jnlpUrl http://localhost:8080/computer/slave/slave-agent.jnlp -secret XXX
//      подставляйте свой путь к java, порту Jenkins и секретному ключу
//
// Если запускать Jenkins не в режиме UTF-8, тогда нужно поменять метод cmd в конце кода, применив комментарий к методу

paths = [
    // "libraries/Плагины": "libraries"
    "StepsRunner":"StepsRunner"
    // "libraries": "libraries"
    // , "Core/TestClient": "TestClient",
    // "StepsGenerator": "StepsGenerator",
    // "StepsRunner":"StepsRunner"
    // "StepsProgramming":"StepsProgramming",
    // "Core/FeatureLoad": "FeatureLoad",
    // "Core/FeatureReader": "FeatureReader",
    // "Core/FeatureWriter": "FeatureWriter",
    // "Core/OpenForm": "OpenForm",
    // "Core/Translate": "Translate",
    // "Core/ExpectedSomething": "ExpectedSomething"
    ]

properties([
    disableConcurrentBuilds(),
    buildDiscarder(
        logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '10', daysToKeepStr: '', numToKeepStr: '10'))
])

// node("artbear") {
node("slave") {
  isUnix = isUnix();

  stage('Контроль технического долга'){
    //   stage('Контроль технического долга'){

    if (env.QASONAR) {
        timestamps {
            println env.QASONAR;
            def sonarcommand = "@\"./../../tools/hudson.plugins.sonar.SonarRunnerInstallation/Main_Classic/bin/sonar-scanner\""
            withCredentials([[$class: 'StringBinding', credentialsId: env.SonarOAuthCredentianalID, variable: 'SonarOAuth']]) {
                sonarcommand = sonarcommand + " -Dsonar.host.url=https://sonar.silverbulleters.org -Dsonar.login=${env.SonarOAuth}"
            }

            // Get version - в модуле 'src/Модули/ПараметрыСистемы.os' должна быть строка формата Версия = "0.8.1";
            def configurationText = readFile encoding: 'UTF-8', file: 'src/Модули/ПараметрыСистемы.os'
            def configurationVersion = (configurationText =~ /Версия\s*=\s*\"([^"]*)\"/)[0][1]
            sonarcommand = sonarcommand + " -Dsonar.projectVersion=${configurationVersion}"

            def makeAnalyzis = true
            if (env.BRANCH_NAME == "develop") {
                echo 'Analysing develop branch'
            } else if (env.BRANCH_NAME.startsWith("release/")) {
                sonarcommand = sonarcommand + " -Dsonar.branch=${BRANCH_NAME}"
            } else if (env.BRANCH_NAME.startsWith("PR-")) {
                // Report PR issues
                def PRNumber = env.BRANCH_NAME.tokenize("PR-")[0]
                def gitURLcommand = 'git config --local remote.origin.url'
                def gitURL = ""

                if (isUnix()) {
                    gitURL = sh(returnStdout: true, script: gitURLcommand).trim()
                } else {
                    gitURL = bat(returnStdout: true, script: gitURLcommand).trim()
                }

                def repository = gitURL.tokenize("/")[2] + "/" + gitURL.tokenize("/")[3]
                repository = repository.tokenize(".")[0]
                withCredentials([[$class: 'StringBinding', credentialsId: env.GithubOAuthCredentianalID, variable: 'githubOAuth']]) {
                    sonarcommand = sonarcommand + " -Dsonar.analysis.mode=issues -Dsonar.github.pullRequest=${PRNumber} -Dsonar.github.repository=${repository} -Dsonar.github.oauth=${env.githubOAuth}"
                }
            } else {
                makeAnalyzis = false
            }

            if (makeAnalyzis) {
                if (isUnix()) {
                    sh '${sonarcommand}'
                } else {
                    bat "${sonarcommand}"
                }
            }
        }
    } else {
        echo "QA runner not installed"
    }
  }

  stage('Получение исходных кодов') {
    //   stage('checkout scm') {
        // Wipe the workspace so we are building completely clean
        deleteDir()

    checkout scm
    cmd('git config --local core.longpaths true', isUnix);

    //env.LOGOS_CONFIG="logger.rootLogger=DEBUG"; // включение отладки продукта //env.RUNNER_ENV="debug";

    cmd('git submodule update --init', isUnix)

    echo "Текущий каталог"
    echo pwd()

    // echo "Проверка выполнения oscript -version - находится ли он в PATH?"
    // timestamps {
    //     cmd("where oscript", isUnix)
    //     cmd("oscript -version", isUnix)
    // }

    // // echo "Установка свежих версий зависимостей библиотек oscript"
    // timestamps {
    //     //cmd("opm update -all", isUnix)
    //      cmd("opm install", isUnix)
    // }
    echo "Сборка бинарных файлов"
    timestamps {
        cmd("opm run init file --v8version 8.3.10", isUnix)
        // cmd("opm run initib file --v8version 8.3.10", isUnix)
    }
  }

  stage('Дымовое тестирование') {
    def errors = []
    timestamps {
        try{
            cmd("vrunner xunit tests/smoke --settings tools/JSON/vrunner.json", isUnix)
        } catch (e) {
            errors << "smoke status : ${e}"
        }
    }
    showErrors(errors)
    makeJunit('build/junit.xml')
  }

  stage('TDD Тестирование') {
    def errors = []
    timestamps {
        try{
            cmd("vrunner xunit tests/xunit --settings tools/JSON/vrunner.json", isUnix)
        } catch (e) {
            errors << "TDD status : ${e}"
        }
    }
    showErrors(errors)
    makeJunit('build/junit.xml')
  }

  stage('BDD тестирование (библиотеки)'){
    def buildKey = "8310uf";
    def buildPath = "libraries";

    def command = "vrunner vanessa --settings tools/JSON/vrunner.json  --path features/${buildPath}";

    def errors = []
    timestamps {
        try{
            cmd(command, isUnix)
        } catch (e) {
            errors << "BDD status : ${e}"
        }
    }

    showErrors(errors)

    makeJunit("build/ServiceBases/junitreport/${buildKey}/*.xml")
    makeAllure("build/ServiceBases/allurereport/${buildKey}")
  }

  stage('BDD тестирование (ядро)'){

    paths.each{
        def buildKey = it.value;
        def buildPath = it.key;
        withEnv(["VANESSA_BUILDNAME=${buildKey}"]) {
            def command = "vrunner vanessa --settings tools/JSON/vrunner.json  --path features/${buildPath}";

            def errors = []
            timestamps {
                try{
                    cmd(command, isUnix)
                } catch (e) {
                    errors << "BDD status : ${e}"
                }
            }

            showErrors(errors)

            makeJunit("build/ServiceBases/junitreport/${buildKey}/*.xml")
            makeAllure("build/ServiceBases/allurereport/${buildKey}")
        }
    }
  }

    stage('Сборка пакета'){
        timestamps {
            command = """opm build ./"""
            try{
                cmd(command, isUnix)
            } catch (e) {
                echo "build status : ${e}"
                currentBuild.result = 'UNSTABLE'
            }

            makeArtifacts('**/add*.ospx')
            makeArtifacts('**/add*.zip')
            makeArtifacts('**/ServiceBases/**/junitreport/**')
            makeArtifacts('**/ServiceBases/**/allurereport/**')
            makeArtifacts('**/build/*.xml')
            makeArtifacts('**/build/**/*.txt')
            makeArtifacts('**/build/**/*.xml')
        }
    }
}

def cmd(command, isUnix) {
    // при запуске Jenkins не в режиме UTF-8 нужно написать chcp 1251 вместо chcp 65001
    if (isUnix) { sh "${command}" } else { bat "chcp 65001\n${command}"}
}

def showErrors(errors) {
    if (errors.size() > 0) {
        currentBuild.result = 'UNSTABLE'
        for (int i = 0; i < errors.size(); i++) {
            echo errors[i]
        }
    }
}

def makeArtifacts(path) {
    try{
        // archiveArtifacts allowEmptyArchive: true, artifacts: '*.xml'
       step([$class: 'ArtifactArchiver', artifacts: "${path}", fingerprint: true, allowEmptyArchive: true])
    } catch (e) {
        echo "report status : ${e}"
        currentBuild.result = 'UNSTABLE'
    }
}

def makeJunit(path) {
    try{
        junit allowEmptyResults: true, testResults: "${path}"
    } catch (e) {
        echo "junit report status : ${e}"
        currentBuild.result = 'UNSTABLE'
    }
}

def makeAllure(resultPath) {
    try{
        // allure commandline: 'allure2', includeProperties: false, jdk: '', results: [[path: 'build/ServiceBases/allurereport/']]
        allure includeProperties: false, jdk: '',
            results: [
                [path: "${resultPath}"],
            ]
    } catch (e) {
        echo "allure status : ${e}"
        currentBuild.result = 'UNSTABLE'
    }
}