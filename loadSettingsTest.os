#Использовать logos
#Использовать asserts
#Использовать 1commands

Перем ЭтоLinux;
Перем КлючиСоСпециальнойОбработкой;

Перем юТест;
// Перем Лог;
Перем Объект;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	// ВсеТесты.Добавить("ТестДолжен_ПроверитьСовпадениеВсехКлючей");
	// ВсеТесты.Добавить("ТестДолжен_СоздатьОбщуюКоллекциюПараметров");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьИменаРусскихКлючейВКоллекцияКомандЗапуска");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьКоличествоНовыхКоллекций");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьОбработкуНастроекИзСтруктурыJSON");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	ЭтоLinux = Ложь;
	// ВключитьПоказОтладки();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСовпадениеВсехКлючей() Экспорт

	// СоздатьСтруктуруПараметровЗапуска = СоздатьСтруктуруПараметровЗапуска();
	// КоллекцияКомандЗапуска = КоллекцияКомандЗапуска();

	ОписаниеОшибок = "";

	// Коллекция1 = КоллекцияКомандЗапуска();
	// ОписанияКоллекция1 = "КоллекцияКомандЗапуска";
	// Коллекция2 = СоздатьСтруктуруПараметровЗапуска();
	// ОписанияКоллекция2 = "СоздатьСтруктуруПараметровЗапуска";

	// ПроверитьКоллекции(Коллекция1, Коллекция2, ОписанияКоллекция1, ОписанияКоллекция2, ОписаниеОшибок);
	
	// Коллекция1 = СоздатьСтруктуруПараметровЗапуска();
	// ОписанияКоллекция1 = "СоздатьСтруктуруПараметровЗапуска";
	// Коллекция2 = КоллекцияКомандЗапуска();
	// ОписанияКоллекция2 = "КоллекцияКомандЗапуска";
	
	// ПроверитьКоллекции(Коллекция1, Коллекция2, ОписанияКоллекция1, ОписанияКоллекция2, ОписаниеОшибок);

	Коллекция1 = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);
	ОписанияКоллекция1 = "СоздатьОбщуюКоллекциюКомандЗапуска";
	Коллекция2 = СоздатьСтруктуруПараметровЗапуска();
	ОписанияКоллекция2 = "СоздатьСтруктуруПараметровЗапуска";

	ПроверитьКоллекции(Коллекция1, Коллекция2, ОписанияКоллекция1, ОписанияКоллекция2, ОписаниеОшибок);

	Коллекция1 = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);
	ОписанияКоллекция1 = "СоздатьОбщуюКоллекциюКомандЗапуска";
	Коллекция2 = КоллекцияКомандЗапуска();
	ОписанияКоллекция2 = "КоллекцияКомандЗапуска";

	ПроверитьКоллекции(Коллекция1, Коллекция2, ОписанияКоллекция1, ОписанияКоллекция2, ОписаниеОшибок);

	// Попытка
	// 	Ожидаем.Что(СоздатьСтруктуруПараметровЗапуска.Количество(),
	// 		"СоздатьСтруктуруПараметровЗапуска.Количество() д.б. равно КоллекцияКомандЗапуска.Количество(), а это не так.")
	// 	.Равно(КоллекцияКомандЗапуска.Количество());
	// Исключение
	// 	ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки();
	// КонецПопытки;
	Ожидаем.Что(ОписаниеОшибок,
		"Найдены ошибки.")
	.Равно("");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьИменаРусскихКлючейВКоллекцияКомандЗапуска() Экспорт

	// КоллекцияКомандЗапуска = КоллекцияКомандЗапуска();
	КоллекцияКомандЗапуска = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);

	ОписаниеОшибок = "";

	Для каждого КлючЗначение Из КоллекцияКомандЗапуска Цикл
		Ключ = КлючЗначение.Ключ;
		ВложеннаяСтруктура = КлючЗначение.Значение;
	// Сообщить(СтрШаблон("Ключ %1, тип вложенного %2", Ключ, ТипЗнч(ВложеннаяСтруктура)));
		
		Если ЗначениеЗаполнено(ВложеннаяСтруктура) И ТипЗнч(ВложеннаяСтруктура) = Тип("Структура") Тогда
			
			Попытка
				Ожидаем.Что(Ключ,
					СтрШаблон("Ключ структуры %1 д.б. равен ключу ""Р"" из вложенной структуры",
						Ключ))
					.Равно(ВложеннаяСтруктура["Р"]);
			Исключение
				Если Ключ <> "ВыполнитьСценарииСТекущегоШага" Тогда
					ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки() + Символы.ПС;
				КонецЕсли;
			КонецПопытки;
		Иначе
			ОписаниеОшибок  = СтрШаблон("%1 Не найдена вложенная структура для ключа %2 %3", 
				ОписаниеОшибок, Ключ, Символы.ПС);
		КонецЕсли;
	КонецЦикла;

	Ожидаем.Что(ОписаниеОшибок,
		"Найдены ошибки.")
	.Равно("");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьКоличествоНовыхКоллекций() Экспорт
	ОжидаемоеКоличество = 77;

	ОписаниеОшибок = "";

	Коллекция1 = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);
	ОписанияКоллекция1 = "СоздатьОбщуюКоллекциюКомандЗапуска";

	Попытка
		Ожидаем.Что(Коллекция1.Количество(),
			СтрШаблон("%1.Количество() д.б. равно ОжидаемоеКоличество, а это не так.", ОписанияКоллекция1))
		.Равно(ОжидаемоеКоличество);
	Исключение
		ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки();
	КонецПопытки;

	// Коллекция2 = СоздатьСтруктуруПараметровЗапуска();
	// ОписанияКоллекция2 = "СоздатьСтруктуруПараметровЗапуска";

	Коллекция1 = КоллекцияКомандЗапуска();
	ОписанияКоллекция1 = "КоллекцияКомандЗапуска";

	Попытка
		Ожидаем.Что(Коллекция1.Количество(),
		СтрШаблон("%1.Количество() д.б. равно ОжидаемоеКоличество, а это не так.", ОписанияКоллекция1))
		.Равно(ОжидаемоеКоличество);
	Исключение
		ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки();
	КонецПопытки;

	Ожидаем.Что(ОписаниеОшибок,
		"Найдены ошибки.")
	.Равно("");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьОбработкуНастроекИзСтруктурыJSON() Экспорт

	СтруктураJSON = Новый Структура;	
	СтруктураJSON.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Истина);
	СтруктураJSON.Вставить("ИмяФайлаЛогВыполненияСценариев", "МойФайл");
	
	СтруктураJSON.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Истина);
	СтруктураJSON.Вставить("КаталогOutputСкриншоты", ".\ФайлСкриншотов");
	СтруктураJSON.Вставить("ЗаписьВидеоФайлКурсораМышки", ".\ЗаписьВидео");
	
	СтруктураJSON.Вставить("СоздаватьИнструкциюHTML", Ложь);
	СтруктураJSON.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", ".\ФайлуДляВыгрузкиСтатусаВыполненияСценариев");

	// СтруктураJSON.Вставить("КаталогПроекта", "W:\repo\SB\add");
	// СтруктураJSON.Вставить("КаталогИнструментов", "W:\repo\SB\add");

	Объект = Новый Структура;	

	Объект.Вставить("КаталогПроекта", "W:\repo\SB\add");
	Объект.Вставить("КаталогИнструментов", "W:\repo\SB\add");
	Объект.Вставить("КаталогиБиблиотек", Новый СписокЗначений);
	Объект.Вставить("СписокТеговИсключение", Новый СписокЗначений);
	Объект.Вставить("СписокТеговОтбор", Новый СписокЗначений);
	
	Объект.Вставить("СоздаватьИнструкциюHTML", Ложь);
	Объект.Вставить("СоздаватьИнструкциюMarkdown", Ложь);
	Объект.Вставить("СоздаватьИнструкциюВидео", Ложь);
	Объект.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Ложь);
	Объект.Вставить("ЗапускатьТестКлиентВРежимеОтладки", Ложь);

	Объект.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Ложь);
	Объект.Вставить("ИмяФайлаЛогВыполненияСценариев", "НачальныйФайл");
	Объект.Вставить("КаталогOutputСкриншоты", ".\НачальныйФайл");
	Объект.Вставить("ЗаписьВидеоФайлКурсораМышки", ".\НачальныйФайл");
	Объект.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", ".\НачальныйФайл");

	Успешно = ЗагрузитьНастройки(СтруктураJSON, ЭтотОбъект, Объект);

	Ожидаем.Что(Успешно, "Не удалось загрузить настройки")
		.ЭтоИстина();

	// Ожидаем.Что(Объект.КаталогПроекта, 
	// 	СтрШаблон("Неверная обработка - ключ КаталогПроекта"))
	// 	.Равно("W:\repo\SB\add");
	// Ожидаем.Что(Объект.КаталогИнструментов, 
	// 	СтрШаблон("Неверная обработка - ключ КаталогИнструментов"))
	// 	.Равно("W:\repo\SB\add");
	Ожидаем.Что(Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл, 
		СтрШаблон("Неверная обработка - ключ ДелатьЛогВыполненияСценариевВТекстовыйФайл"))
		.ЭтоИстина();
	Ожидаем.Что(Объект.ИмяФайлаЛогВыполненияСценариев, 
		СтрШаблон("Неверная обработка - ключ ДелатьЛогВыполненияСценариевВТекстовыйФайл"))
		.Равно("w:\repo\SB\add\МойФайл");
	
	Ожидаем.Что(Объект.ДелатьСкриншотПриВозникновенииОшибки, 
		СтрШаблон("Неверная обработка - ключ ДелатьСкриншотПриВозникновенииОшибки"))
		.ЭтоИстина();
	Ожидаем.Что(Объект.КаталогOutputСкриншоты, 
		СтрШаблон("Неверная обработка - ключ КаталогOutputСкриншоты"))
		.Равно("W:\repo\SB\add\ФайлСкриншотов");
	Ожидаем.Что(Объект.ЗаписьВидеоФайлКурсораМышки, 
		СтрШаблон("Неверная обработка - ключ ЗаписьВидеоФайлКурсораМышки"))
		.Равно("W:\repo\SB\add\ЗаписьВидео");

	Ожидаем.Что(Объект.СоздаватьИнструкциюHTML, 
		СтрШаблон("Неверная обработка - ключ ДелатьЛогВыполненияСценариевВТекстовыйФайл"))
		.ЭтоЛожь();
	Ожидаем.Что(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев, 
		СтрШаблон("Неверная обработка - ключ ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев"))
		.Равно("W:\repo\SB\add\ФайлуДляВыгрузкиСтатусаВыполненияСценариев");
КонецПроцедуры

Процедура ТестДолжен_СоздатьОбщуюКоллекциюПараметров() Экспорт
	ТекстСозданияКоллекции = ТекстНовойКоллекции();

	// Сообщить(" ");
	// Сообщить(" ");
	// Сообщить(ТекстСозданияКоллекции);
	// Сообщить(" ");
	// Сообщить(" ");

	ЗагрузитьСценарийИзСтроки(ТекстСозданияКоллекции);
КонецПроцедуры

Функция ТекстНовойКоллекции()
	Рез = "";

	СоздатьСтруктуруПараметровЗапуска = СоздатьСтруктуруПараметровЗапуска();
	КоллекцияКомандЗапуска = КоллекцияКомандЗапуска();
	
	ЗаписьТекста = Новый ЗаписьТекста;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку("Функция СоздатьОбщуюКоллекциюКомандЗапуска()");
	ТекстовыйДокумент.ДобавитьСтроку("	");
	ТекстовыйДокумент.ДобавитьСтроку("	Рез = Новый Структура;");
	ТекстовыйДокумент.ДобавитьСтроку("	");

	Для каждого КлючЗначение Из КоллекцияКомандЗапуска Цикл
		Ключ = КлючЗначение.Ключ;
	// Сообщить("Ключ " + Ключ);
		Если СоздатьСтруктуруПараметровЗапуска.Свойство(Ключ) Тогда
			ЗначениеПоУмолчанию = СериализованноеЗначения(СоздатьСтруктуруПараметровЗапуска[Ключ]);
			
			ВложеннаяСтруктура = КлючЗначение.Значение;
			Если ЗначениеЗаполнено(ВложеннаяСтруктура) И ТипЗнч(ВложеннаяСтруктура) = Тип("Структура") Тогда
				ЗначениеРусское = ВложеннаяСтруктура.Р;
				ЗначениеАнглийское = ВложеннаяСтруктура.А;
	// Сообщить(СтрШаблон("ЗначениеРусское %1", ЗначениеРусское));
	// Сообщить(СтрШаблон("ЗначениеАнглийское %1", ЗначениеАнглийское));
				НоваяСтрока = СтрокаСозданияСвойства(Ключ, ЗначениеРусское, СтрШаблон("""%1""", ЗначениеАнглийское), ЗначениеПоУмолчанию);
				// НоваяСтрока = СтрШаблон(
				// 	"Рез.Вставить(""%1"", Новый Структура(""Р, А, ПоУмолчанию"", ""%2"", ""%3"", %4));",
				// 	Ключ, ЗначениеРусское, ЗначениеАнглийское, ЗначениеПоУмолчанию);
			Иначе
				НоваяСтрока = СтрокаСозданияСвойства(Ключ, Ключ, "ЗначениеАнглийское", ЗначениеПоУмолчанию);
				// НоваяСтрока = СтрШаблон(
				// 	"Рез.Вставить(""%1"", Новый Структура(""Р, А, ПоУмолчанию"", ""%1"", ЗначениеАнглийское, %2));",
				// 	Ключ, ЗначениеПоУмолчанию);
			КонецЕсли;
		Иначе
			НоваяСтрока = СтрокаСозданияСвойства(Ключ, Ключ, "ЗначениеАнглийское", ЗначениеПоУмолчанию);
			// НоваяСтрока = СтрШаблон(
			// 	"Рез.Вставить(""%1"", Новый Структура(""Р, А, ПоУмолчанию"", ""%1"", ЗначениеАнглийское, %2));",
			// 	Ключ, ЗначениеПоУмолчанию);
		КонецЕсли;

		ТекстовыйДокумент.ДобавитьСтроку("	" + НоваяСтрока);
	// Сообщить(НоваяСтрока);

		// ЗаписьТекста.ЗаписатьСтроку(НоваяСтрока);
	КонецЦикла;

	ТекстовыйДокумент.ДобавитьСтроку("	Возврат Рез;");
	ТекстовыйДокумент.ДобавитьСтроку("КонецФункции");

	Возврат ТекстовыйДокумент.ПолучитьТекст();
КонецФункции

Функция СтрокаСозданияСвойства(Знач Ключ, Знач ЗначениеРусское, Знач ЗначениеАнглийское, Знач ЗначениеПоУмолчанию)
	НоваяСтрока = СтрШаблон(
		"Рез.Вставить(""%1"", 
		|	Новый Структура(""Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч"", 
		|		""%2"", %3, %4, Ложь, Ложь, Ложь, Ложь, Ложь, """"));",
		// "Рез.Вставить(""%1"", Новый Структура(""Р, А, ПоУмолчанию"", ""%2"", ""%3"", %4));",
		Ключ, ЗначениеРусское, ЗначениеАнглийское, ЗначениеПоУмолчанию);
	
	Возврат НоваяСтрока;
КонецФункции

Процедура ПроверитьКоллекции(Коллекция1, Коллекция2, ОписанияКоллекция1, ОписанияКоллекция2, ОписаниеОшибок)
	Для каждого КлючЗначение Из Коллекция1 Цикл
		ЕстьКлюч = Коллекция2.Свойство(КлючЗначение.Ключ);
		// Сообщить(СтрШаблон("%3 - %1, есть ключ %2 ", КлючЗначение.Ключ, ЕстьКлюч, ОписанияКоллекция1));
		Попытка
			Ожидаем.Что(ЕстьКлюч,
				СтрШаблон("Ключ %1 из коллекции %2 д.б. в коллекции %3, а это не так.",
					КлючЗначение.Ключ, ОписанияКоллекция1, ОписанияКоллекция2))
			.ЭтоИстина();
		Исключение
			ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
	КонецЦикла;

	Попытка
		Ожидаем.Что(Коллекция1.Количество(),
			СтрШаблон("%1.Количество() д.б. равно %2.Количество(), а это не так.",
			ОписанияКоллекция1, ОписанияКоллекция2))
		.Равно(Коллекция2.Количество());
	Исключение
		ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

Функция СериализованноеЗначения(Знач Значение)
	Рез = Значение;
	Если Значение = Ложь Тогда
		Рез = "Ложь";
	ИначеЕсли Значение = Истина Тогда
		Рез = "Истина";
	Иначе
		Рез = СтрШаблон("""%1""", Рез); 
	КонецЕсли;
	Возврат Рез;
КонецФункции

// &НаКлиентеНаСервереБезКонтекста
Функция СоздатьСтруктуруПараметровЗапуска()
	Коллекция = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);;

	Рез = Новый Структура;
	Для каждого КлючЗначение Из Коллекция Цикл
		Рез.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение.ПоУмолчанию);
	КонецЦикла;

	Возврат Рез;

КонецФункции
	
// &НаКлиенте
Функция КоллекцияКомандЗапуска()

	Возврат СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);

КонецФункции

// &НаКлиентеНаСервереБезКонтекста
Функция СоздатьОбщуюКоллекциюКомандЗапуска(Знач ЭтоLinux)

	Рез = Новый Структура;

	Рез.Вставить("StartFeaturePlayer", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"StartFeaturePlayer", "startfeatureplayer", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогФич", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогФич", "featurepath", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	
	СписокКаталогиБиблиотекПоУмолчанию = Новый СписокЗначений;
	СписокКаталогиБиблиотекПоУмолчанию.Добавить("$instrumentsRoot/features/libraries");
		
	Рез.Вставить("КаталогиБиблиотек", //TODO обработано
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогиБиблиотек", "librarycatalogs", СписокКаталогиБиблиотекПоУмолчанию, Ложь, Истина, Ложь, Истина, Ложь, ""));
	
	СписокТеговИсключениеПоУмолчанию = Новый СписокЗначений;
	СписокТеговИсключениеПоУмолчанию.Добавить("IgnoreOnCIMainBuild");

	Рез.Вставить("СписокТеговИсключение",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СписокТеговИсключение", "ignoretags", СписокТеговИсключениеПоУмолчанию, Ложь, Истина, Ложь, Ложь, Ложь, ""));

	Рез.Вставить("СписокТеговОтбор",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СписокТеговОтбор", "filtertags", Новый СписокЗначений, Ложь, Истина, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ВыгрузитьPIDTestManager", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыгрузитьPIDTestManager", "returnpidoftestmanager", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ИмяФайлаPIDTestManager", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяФайлаPIDTestManager", "filenamepidtestmanager", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ИмяФайлаВнешнихКомандФреймворка",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяФайлаВнешнихКомандФреймворка", "fileofcommand", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ПриравниватьPendingКFailed",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ПриравниватьPendingКFailed", "pendingequalfailed", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ОстановкаПриВозникновенииОшибки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ОстановкаПриВозникновенииОшибки", "stoponerror", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьСообщенияТранслитом",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьСообщенияТранслитом", "translatemassage", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьИнструкциюHTML",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьИнструкциюHTML", "htmlcreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьИнструкциюMarkdown",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьИнструкциюMarkdown", "markdowncreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьИнструкциюВидео",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьИнструкциюВидео", "videcreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВЖР",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьЛогВыполненияСценариевВЖР", "logtogr", Истина, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьЛогВыполненияСценариевВТекстовыйФайл", "logtotext", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ИмяФайлаЛогВыполненияСценариев",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяФайлаЛогВыполненияСценариев", "textlogname", "", Ложь, Ложь, Ложь, Истина, Ложь, "ДелатьЛогВыполненияСценариевВТекстовыйФайл"));
	Рез.Вставить("ЗакрытьTestClientПослеЗапускаСценариев",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗакрытьTestClientПослеЗапускаСценариев", "closetestclient", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputИнструкцияHTML",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputИнструкцияHTML", "htmlpath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюHTML"));
	Рез.Вставить("КаталогOutputИнструкцияMarkdown",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputИнструкцияMarkdown", "markdownpath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюMarkdown"));
	Рез.Вставить("КаталогOutputИнструкцияВидео",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputИнструкцияВидео", "videopath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюВидео"));
	Рез.Вставить("ДелатьОтчетВоВнутреннемФормате", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВоВнутреннемФормате", "simplereport", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ДелатьОтчетВФорматеАллюр",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВФорматеАллюр", "allurecreatereport", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ОтображатьОтчетAllureВБраузере",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ОтображатьОтчетAllureВБраузере", "allureautoshow", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("КаталогИнструментов",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогИнструментов", "instrpath", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогПроекта", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогПроекта", "projectpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputAllure", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputAllure", "allurepath", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputAllureБазовый", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputAllureБазовый", "allurepathbase", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьОтчетВФорматеjUnit", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВФорматеjUnit", "junitcreatereport", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputjUnit",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputjUnit", "junitpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "ДелатьОтчетВФорматеjUnit"));
	Рез.Вставить("ДелатьОтчетВФорматеCucumberJson", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВФорматеCucumberJson", "cucumbercreatereport", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputCucumberJson", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputCucumberJson", "cucumberreportpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "ДелатьОтчетВФорматеCucumberJson"));
	Рез.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДобавлятьКИмениСценарияУсловияВыгрузки", "addtofeaturefilter", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", "createsubfolderforbuild", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыгружатьСтатусВыполненияСценариевВФайл", "createlogs", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "logpath", "", Истина, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ВыполнитьСценарии", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыполнитьСценарии", "vanessarun", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ВыполнитьСценарииСТекущегоШага", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыполнитьСценарии", "vanessarunfromthisstep", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"НомерСтрокиДляЗапускаСТекущегоШагаСценария", "stepnumber", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗагрузитьСценарии", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗагрузитьСценарии", "loadscenarios", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗавершитьРаботуСистемы", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗавершитьРаботуСистемы", "vanessashutdown", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ИмяСборки", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяСборки", "buildname", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьСкриншотПриВозникновенииОшибки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьСкриншотПриВозникновенииОшибки", "onerrorscreenshot", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СниматьСкриншотКаждогоОкна1С",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СниматьСкриншотКаждогоОкна1С", "onerrorscreenshoteverywindow", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));

	Если ЭтоLinux Тогда
		СтрокаКомандаСделатьСкриншот = "import -window root ";
	Иначе
		СтрокаКомандаСделатьСкриншот = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
	КонецЕсли;

	Рез.Вставить("КомандаСделатьСкриншот", // TODO отдельный код по умолчанию
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КомандаСделатьСкриншот", "commandscreenshot", СтрокаКомандаСделатьСкриншот, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputСкриншоты",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputСкриншоты", "outputscreenshot", "", Истина, Ложь, Ложь, Истина, Ложь, "ДелатьСкриншотПриВозникновенииОшибки"));
	Рез.Вставить("ЗапускатьТестКлиентВРежимеОтладки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗапускатьТестКлиентВРежимеОтладки", "testclientdebug", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("КлючиОтладки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КлючиОтладки", "testclientdebugkeys", "", Ложь, Ложь, Ложь, Ложь, Истина, "ЗапускатьТестКлиентВРежимеОтладки"));
	Рез.Вставить("АдресОтладчика",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"АдресОтладчика", "testclientdebugaddress", "", Ложь, Ложь, Ложь, Ложь, Истина, "ЗапускатьТестКлиентВРежимеОтладки"));
	Рез.Вставить("ВыполнятьШагиАссинхронно", //TODO проверка на Неопределено
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыполнятьШагиАссинхронно", "makestepsasync", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКомандаНачатьЗаписьВидео", "comandrecvideo", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоФайлКурсораМышки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоФайлКурсораМышки", "mousecurfile", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКаталогДляВременныхФайлов", "tempfolderforvideo", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоФайлВодянойЗнак",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоФайлВодянойЗнак", "watermarkfile", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоКомандаFfmpeg",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКомандаFfmpeg", "ffmpegcomand", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоКомандаConvert",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКомандаConvert", "convertcomand", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоКаталогМузыки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКаталогМузыки", "musicpath", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоДелатьНаложениеTTS",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоДелатьНаложениеTTS", "dotts", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоПутьКДвижкуTTS",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоПутьКДвижкуTTS", "audioenginetts", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоИмяTTS",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоИмяTTS", "ttsvoice", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоСловарьЗамен", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоСловарьЗамен", "changewordslib", Новый Массив, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоСловарьЗаменСписок", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоСловарьЗаменСписок", "changewordsliblist", Новый Массив, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоЭкранШирина",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоЭкранШирина", "screenwidth", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоЭкранВысота",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоЭкранВысота", "screenheight", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоКоличествоКадров",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКоличествоКадров", "fps", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", "showframe", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", "movemouse", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ВерсияПлатформыДляГенерацииEPF",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВерсияПлатформыДляГенерацииEPF", "platformversiongenerateepf", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДополнительныеПараметры", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДополнительныеПараметры", "dopparams", Новый Соответствие, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КлиентыТестирования", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КлиентыТестирования", "testclienttable", Новый Массив, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ТаймаутЗапуска1С", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ТаймаутЗапуска1С", "testclienttimeout", "25", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДиапазонПортовTestclient",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДиапазонПортовTestclient", "testclientports", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьОбластиПриГенерацииКода",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьОбластиПриГенерацииКода", "generateareaforsteps", Истина, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ГенерироватьУФ", //TODO частично было в ADD
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ГенерироватьУФ", "ufgenerate", Истина, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗагрузкаФичПриОткрытии", //TODO частично было в ADD
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗагрузкаФичПриОткрытии", "loadfeaturesforopen", "Загружать", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ОсновнойЯзык", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ОсновнойЯзык", "mainlanguage", "ru", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ТаймаутДляАсинхронныхШагов", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ТаймаутДляАсинхронныхШагов", "timeoutforasynchronoussteps", 0, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Возврат Рез;
КонецФункции

	// Рез.Вставить("СоздаватьОбластиПриГенерацииКода", Новый Структура("Р, А, ПоУмолчанию", "СоздаватьОбластиПриГенерацииКода", "generateareaforsteps", Истина));
	// Рез.Вставить("ОсновнойЯзык", Новый Структура("Р, А, ПоУмолчанию", "ОсновнойЯзык", "mainlanguage", Истина));
	// Рез.Вставить("ТаймаутДляАсинхронныхШагов", Новый Структура("Р, А, ПоУмолчанию", "ТаймаутДляАсинхронныхШагов", "timeoutforasynchronoussteps", Истина));

// &НаКлиенте
Функция ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, ИмяПараметра) Экспорт
	Если СтруктураПараметров.Свойство(ИмяПараметра) Тогда
		Возврат СтруктураПараметров[ИмяПараметра];
	ИначеЕсли СтруктураПараметров.Свойство(Врег(ИмяПараметра)) Тогда 
		Возврат СтруктураПараметров[ВРег(ИмяПараметра)];
	Иначе	
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Функция ПреобразоватьПутьСТочкамиКНормальномуПути(Знач ОригСтр="") Экспорт

	Если ПустаяСтрока(ОригСтр) Тогда
		Возврат ОригСтр;
	КонецЕсли;

	Если Найти(ОригСтр, "$workspaceRoot") > 0 Тогда
		ОригСтр = СтрЗаменить(ОригСтр, "$workspaceRoot", ДополнитьСлешВПуть(Объект.КаталогПроекта));
	КонецЕсли;

	Если Найти(ОригСтр, "$instrumentsRoot") > 0 И НЕ ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		ОригСтр = СтрЗаменить(ОригСтр, "$instrumentsRoot", ДополнитьСлешВПуть(Объект.КаталогИнструментов));
	КонецЕсли;

	ФайлПути = Новый Файл(ОригСтр);
	Если Лев(ОригСтр, 1) = "." Тогда
		//Для совместимости со старым кодом оставим пока КаталогИнструментов, правильней было-бы использовать КаталогПроекта
		ФайлПути = Новый Файл(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ОригСтр);
	КонецЕсли;

	Возврат ФайлПути.ПолноеИмя;

КонецФункции

//{ Функция ДополнитьСлешВПуть
//
// Параметры:
// ИмяКаталога
//
// Описание:
// Функция дополняет и возвращает слеш в путь в конец строки, если он отсутствует
//}
&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	разделитель = "\";

	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	Если ЭтоLinux Тогда
		разделитель = "/";
		Каталог = СтрЗаменить(Каталог, "\", "/");
	КонецЕсли;

	Если Прав(Каталог, 1) <> разделитель Тогда
		Каталог = Каталог + разделитель;
	КонецЕсли;
	Возврат Каталог;
КонецФункции

// &НаКлиенте
Функция ЗагрузитьНастройки(Знач СтруктураJSON, Знач КонтекстЯдра, ОбъектЯдра)
	Если СтруктураJSON = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// TODO обработать начальную загрузку настроек при первом запуске VB

	КоллекцияКомандЗапуска = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);

	Для каждого КлючЗначение Из КоллекцияКомандЗапуска Цикл
		Ключ = КлючЗначение.Ключ;
		// Сообщить(СтрШаблон("Ключ %1", ключ));
		ПараметрыКлюча = КлючЗначение.Значение;

		ПредварительноеЗначение = ПолучитьЗначениеПереданногоПараметра(СтруктураJSON, Ключ);

		УстановитьЗначениеВОбъектЯдра(Ключ, ПараметрыКлюча, ПредварительноеЗначение, КонтекстЯдра, ОбъектЯдра);
	КонецЦикла;
	
	// ВызватьИсключение "еще не реализовано!!";
	Возврат Истина;
	
КонецФункции

Процедура УстановитьЗначениеВОбъектЯдра(Знач Ключ, Знач ПараметрыКлюча, Знач ПредварительноеЗначение, Знач КонтекстЯдра, ОбъектЯдра)
	ЗначениеДляУстановки = Неопределено;

	Ожидаем.Что(ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиЗаполнено,
		СтрШаблон("неверно одновременно стоит ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиЗаполнено
		|- ключ %1", Ключ))
		.ЭтоЛожь();
	Ожидаем.Что(ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиИстина,
		СтрШаблон("неверно одновременно стоит ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиИстина
		|- ключ %1", Ключ))
		.ЭтоЛожь();
	Ожидаем.Что(ПараметрыКлюча.УстанавливатьЕслиЗаполнено И ПараметрыКлюча.УстанавливатьЕслиИстина,
		СтрШаблон("неверно одновременно стоит ПараметрыКлюча.УстанавливатьЕслиЗаполнено И ПараметрыКлюча.УстанавливатьЕслиИстина
		|- ключ %1", Ключ))
		.ЭтоЛожь();
	Ожидаем.Что(ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.ПреобразоватьПуть,
		СтрШаблон("неверно одновременно стоит ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.ПреобразоватьПуть
		|- ключ %1", Ключ))
		.ЭтоЛожь();

	Если КлючиСоСпециальнойОбработкой().Найти(Ключ) <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	// ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить

	Ожидаем.Что(ПараметрыКлюча.ЭтоМассив 
		И (ПараметрыКлюча.УстанавливатьЕслиЗаполнено 
			Или ПараметрыКлюча.ПростоУстановить 
			Или ПараметрыКлюча.УстанавливатьЕслиИстина ),
			// Или ПараметрыКлюча.ПреобразоватьПуть),
		СтрШаблон("неверно одновременно стоит ЭтоМассив и другой ключ установки
		|- ключ %1", Ключ))
		.ЭтоЛожь();

	РазрешаюшийКлюч = ПараметрыКлюча.РазрешаюшийКлюч;
	Если ЗначениеЗаполнено(РазрешаюшийКлюч) 
		И Не ОбъектЯдра[РазрешаюшийКлюч] Тогда
		
		Возврат;
	КонецЕсли;

	Если ПараметрыКлюча.ПреобразоватьПуть И НЕ ПараметрыКлюча.ЭтоМассив Тогда
		ПредварительноеЗначение = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПредварительноеЗначение);
	КонецЕсли;

	Ожидаем.Что(НЕ ПараметрыКлюча.ЭтоМассив 
			И НЕ ПараметрыКлюча.УстанавливатьЕслиЗаполнено 
			И НЕ ПараметрыКлюча.ПростоУстановить 
			И НЕ ПараметрыКлюча.УстанавливатьЕслиИстина 
			И НЕ ПараметрыКлюча.ПреобразоватьПуть,
		СтрШаблон("не задан ни один из флагов установки
		|- ключ %1", Ключ))
		.ЭтоЛожь();

	Если ПараметрыКлюча.УстанавливатьЕслиЗаполнено Тогда
		Если ЗначениеЗаполнено(ПредварительноеЗначение) Тогда
			ЗначениеДляУстановки = ПредварительноеЗначение;
		КонецЕсли;
	
	ИначеЕсли ПараметрыКлюча.ПростоУстановить Тогда
		ЗначениеДляУстановки = ПредварительноеЗначение;
	
	ИначеЕсли ПараметрыКлюча.УстанавливатьЕслиИстина Тогда
		Если ПредварительноеЗначение = Истина Тогда
			ЗначениеДляУстановки = ПредварительноеЗначение;
		КонецЕсли;
	
	ИначеЕсли ПараметрыКлюча.ЭтоМассив Тогда
		ОбъектЯдра[Ключ].Очистить();
		Если ТипЗнч(ПредварительноеЗначение) = Тип("Массив") Тогда
			Если ПараметрыКлюча.ПреобразоватьПуть Тогда
				Для Ккк = 0 По ПредварительноеЗначение.Количество() - 1 Цикл
					ПредварительноеЗначение[Ккк] = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПредварительноеЗначение[Ккк]);
				КонецЦикла;	
			КонецЕсли;
			ОбъектЯдра[Ключ].ЗагрузитьЗначения(ПредварительноеЗначение);
		КонецЕсли;  

	ИначеЕсли Не ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.ПреобразоватьПуть Тогда
		ЗначениеДляУстановки = ПредварительноеЗначение;
		
	Иначе
		ПредварительноеЗначение = Неопределено;
	КонецЕсли;

	Если ЗначениеДляУстановки <> Неопределено Тогда
		// СтрокаВыполнения = СтрШаблон("ОбъектЯдра.%1 = %2", Ключ, Значение);
		// Выполнить(СтрокаВыполнения);
		ОбъектЯдра[Ключ] = ЗначениеДляУстановки;
	КонецЕсли;
КонецПроцедуры

Функция КлючиСоСпециальнойОбработкой()

	Если Не ЗначениеЗаполнено(КлючиСоСпециальнойОбработкой) Тогда
		Рез = Новый Массив;

		Рез.Добавить("StartFeaturePlayer" );
		Рез.Добавить("КаталогФич" );
		Рез.Добавить("КаталогПроекта");
		Рез.Добавить("КаталогOutputAllure" );
		Рез.Добавить("КаталогOutputAllureБазовый");
		Рез.Добавить("ДелатьОтчетВФорматеjUnit" );
		Рез.Добавить("КаталогOutputjUnit" );
		Рез.Добавить("ДелатьОтчетВФорматеCucumberJson" );
		Рез.Добавить("КаталогOutputCucumberJson" );
		Рез.Добавить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки" );
		Рез.Добавить("ВыполнитьСценарии" );
		Рез.Добавить("ВыполнитьСценарииСТекущегоШага" );
		Рез.Добавить("НомерСтрокиДляЗапускаСТекущегоШагаСценария" );
		Рез.Добавить("ЗагрузитьСценарии" );
		Рез.Добавить("ЗавершитьРаботуСистемы" );
		Рез.Добавить("ИмяСборки" );
		Рез.Добавить("ЗаписьВидеоСловарьЗамен" );
		Рез.Добавить("ЗаписьВидеоСловарьЗаменСписок");
		Рез.Добавить("ДополнительныеПараметры");
		Рез.Добавить("КлиентыТестирования");
		Рез.Добавить("ТаймаутЗапуска1С");
		Рез.Добавить("ОсновнойЯзык");

		КлючиСоСпециальнойОбработкой = Новый ФиксированныйМассив(Рез);
	КонецЕсли;
		
	Возврат КлючиСоСпециальнойОбработкой;
КонецФункции