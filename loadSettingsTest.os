#Использовать logos
#Использовать asserts
#Использовать 1commands

Перем юТест;
// Перем Лог;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСовпадениеВсехКлючей");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьИменаРусскихКлючейВКоллекцияКомандЗапуска");
	// ВсеТесты.Добавить("ТестДолжен_СоздатьОбщуюКоллекциюПараметров");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьКоличествоНовыхКоллекций");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	// ВключитьПоказОтладки();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСовпадениеВсехКлючей() Экспорт

	// СоздатьСтруктуруПараметровЗапуска = СоздатьСтруктуруПараметровЗапуска();
	// КоллекцияКомандЗапуска = КоллекцияКомандЗапуска();

	ОписаниеОшибок = "";

	// Коллекция1 = КоллекцияКомандЗапуска();
	// ОписанияКоллекция1 = "КоллекцияКомандЗапуска";
	// Коллекция2 = СоздатьСтруктуруПараметровЗапуска();
	// ОписанияКоллекция2 = "СоздатьСтруктуруПараметровЗапуска";

	// ПроверитьКоллекции(Коллекция1, Коллекция2, ОписанияКоллекция1, ОписанияКоллекция2, ОписаниеОшибок);
	
	// Коллекция1 = СоздатьСтруктуруПараметровЗапуска();
	// ОписанияКоллекция1 = "СоздатьСтруктуруПараметровЗапуска";
	// Коллекция2 = КоллекцияКомандЗапуска();
	// ОписанияКоллекция2 = "КоллекцияКомандЗапуска";
	
	// ПроверитьКоллекции(Коллекция1, Коллекция2, ОписанияКоллекция1, ОписанияКоллекция2, ОписаниеОшибок);

	Коллекция1 = СоздатьОбщуюКоллекциюКомандЗапуска();
	ОписанияКоллекция1 = "СоздатьОбщуюКоллекциюКомандЗапуска";
	Коллекция2 = СоздатьСтруктуруПараметровЗапуска();
	ОписанияКоллекция2 = "СоздатьСтруктуруПараметровЗапуска";

	ПроверитьКоллекции(Коллекция1, Коллекция2, ОписанияКоллекция1, ОписанияКоллекция2, ОписаниеОшибок);

	Коллекция1 = СоздатьОбщуюКоллекциюКомандЗапуска();
	ОписанияКоллекция1 = "СоздатьОбщуюКоллекциюКомандЗапуска";
	Коллекция2 = КоллекцияКомандЗапуска();
	ОписанияКоллекция2 = "КоллекцияКомандЗапуска";

	ПроверитьКоллекции(Коллекция1, Коллекция2, ОписанияКоллекция1, ОписанияКоллекция2, ОписаниеОшибок);

	// Попытка
	// 	Ожидаем.Что(СоздатьСтруктуруПараметровЗапуска.Количество(),
	// 		"СоздатьСтруктуруПараметровЗапуска.Количество() д.б. равно КоллекцияКомандЗапуска.Количество(), а это не так.")
	// 	.Равно(КоллекцияКомандЗапуска.Количество());
	// Исключение
	// 	ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки();
	// КонецПопытки;
	Ожидаем.Что(ОписаниеОшибок,
		"Найдены ошибки.")
	.Равно("");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьИменаРусскихКлючейВКоллекцияКомандЗапуска() Экспорт

	// КоллекцияКомандЗапуска = КоллекцияКомандЗапуска();
	КоллекцияКомандЗапуска = СоздатьОбщуюКоллекциюКомандЗапуска();

	ОписаниеОшибок = "";

	Для каждого КлючЗначение Из КоллекцияКомандЗапуска Цикл
		Ключ = КлючЗначение.Ключ;
		ВложеннаяСтруктура = КлючЗначение.Значение;
// Сообщить(СтрШаблон("Ключ %1, тип вложенного %2", Ключ, ТипЗнч(ВложеннаяСтруктура)));
		
		Если ЗначениеЗаполнено(ВложеннаяСтруктура) И ТипЗнч(ВложеннаяСтруктура) = Тип("Структура") Тогда
			
			Попытка
				Ожидаем.Что(Ключ,
					СтрШаблон("Ключ структуры %1 д.б. равен ключу ""Р"" из вложенной структуры",
						Ключ))
					.Равно(ВложеннаяСтруктура["Р"]);
			Исключение
				Если Ключ <> "ВыполнитьСценарииСТекущегоШага" Тогда
					ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки() + Символы.ПС;
				КонецЕсли;
			КонецПопытки;
		Иначе
			ОписаниеОшибок  = СтрШаблон("%1 Не найдена вложенная структура для ключа %2 %3", 
				ОписаниеОшибок, Ключ, Символы.ПС);
		КонецЕсли;
	КонецЦикла;

	Ожидаем.Что(ОписаниеОшибок,
		"Найдены ошибки.")
	.Равно("");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьКоличествоНовыхКоллекций() Экспорт
	ОжидаемоеКоличество = 75;

	ОписаниеОшибок = "";

	Коллекция1 = СоздатьОбщуюКоллекциюКомандЗапуска();
	ОписанияКоллекция1 = "СоздатьОбщуюКоллекциюКомандЗапуска";

	Попытка
		Ожидаем.Что(Коллекция1.Количество(),
			СтрШаблон("%1.Количество() д.б. равно ОжидаемоеКоличество, а это не так.", ОписанияКоллекция1))
		.Равно(ОжидаемоеКоличество);
	Исключение
		ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки();
	КонецПопытки;

	// Коллекция2 = СоздатьСтруктуруПараметровЗапуска();
	// ОписанияКоллекция2 = "СоздатьСтруктуруПараметровЗапуска";

	Коллекция1 = КоллекцияКомандЗапуска();
	ОписанияКоллекция1 = "КоллекцияКомандЗапуска";

	Попытка
		Ожидаем.Что(Коллекция1.Количество(),
		СтрШаблон("%1.Количество() д.б. равно ОжидаемоеКоличество, а это не так.", ОписанияКоллекция1))
		.Равно(ОжидаемоеКоличество);
	Исключение
		ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки();
	КонецПопытки;

	Ожидаем.Что(ОписаниеОшибок,
		"Найдены ошибки.")
	.Равно("");

КонецПроцедуры

Процедура ТестДолжен_СоздатьОбщуюКоллекциюПараметров() Экспорт
	ТекстСозданияКоллекции = ТекстНовойКоллекции();

// Сообщить(" ");
// Сообщить(" ");
// Сообщить(ТекстСозданияКоллекции);
// Сообщить(" ");
// Сообщить(" ");

	ЗагрузитьСценарийИзСтроки(ТекстСозданияКоллекции);
КонецПроцедуры

Функция ТекстНовойКоллекции()
	Рез = "";

	СоздатьСтруктуруПараметровЗапуска = СоздатьСтруктуруПараметровЗапуска();
	КоллекцияКомандЗапуска = КоллекцияКомандЗапуска();
	
	ЗаписьТекста = Новый ЗаписьТекста;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку("Функция СоздатьОбщуюКоллекциюКомандЗапуска()");
	ТекстовыйДокумент.ДобавитьСтроку("	");
	ТекстовыйДокумент.ДобавитьСтроку("	Рез = Новый Структура;");
	ТекстовыйДокумент.ДобавитьСтроку("	");

	Для каждого КлючЗначение Из КоллекцияКомандЗапуска Цикл
		Ключ = КлючЗначение.Ключ;
// Сообщить("Ключ " + Ключ);
		Если СоздатьСтруктуруПараметровЗапуска.Свойство(Ключ) Тогда
			ЗначениеПоУмолчанию = СериализованноеЗначения(СоздатьСтруктуруПараметровЗапуска[Ключ]);
			
			ВложеннаяСтруктура = КлючЗначение.Значение;
			Если ЗначениеЗаполнено(ВложеннаяСтруктура) И ТипЗнч(ВложеннаяСтруктура) = Тип("Структура") Тогда
				ЗначениеРусское = ВложеннаяСтруктура.Р;
				ЗначениеАнглийское = ВложеннаяСтруктура.А;
// Сообщить(СтрШаблон("ЗначениеРусское %1", ЗначениеРусское));
// Сообщить(СтрШаблон("ЗначениеАнглийское %1", ЗначениеАнглийское));
				НоваяСтрока = СтрокаСозданияСвойства(Ключ, ЗначениеРусское, СтрШаблон("""%1""", ЗначениеАнглийское), ЗначениеПоУмолчанию);
				// НоваяСтрока = СтрШаблон(
				// 	"Рез.Вставить(""%1"", Новый Структура(""Р, А, ПоУмолчанию"", ""%2"", ""%3"", %4));",
				// 	Ключ, ЗначениеРусское, ЗначениеАнглийское, ЗначениеПоУмолчанию);
			Иначе
				НоваяСтрока = СтрокаСозданияСвойства(Ключ, Ключ, "ЗначениеАнглийское", ЗначениеПоУмолчанию);
				// НоваяСтрока = СтрШаблон(
				// 	"Рез.Вставить(""%1"", Новый Структура(""Р, А, ПоУмолчанию"", ""%1"", ЗначениеАнглийское, %2));",
				// 	Ключ, ЗначениеПоУмолчанию);
			КонецЕсли;
		Иначе
			НоваяСтрока = СтрокаСозданияСвойства(Ключ, Ключ, "ЗначениеАнглийское", ЗначениеПоУмолчанию);
			// НоваяСтрока = СтрШаблон(
			// 	"Рез.Вставить(""%1"", Новый Структура(""Р, А, ПоУмолчанию"", ""%1"", ЗначениеАнглийское, %2));",
			// 	Ключ, ЗначениеПоУмолчанию);
		КонецЕсли;

		ТекстовыйДокумент.ДобавитьСтроку("	" + НоваяСтрока);
// Сообщить(НоваяСтрока);

		// ЗаписьТекста.ЗаписатьСтроку(НоваяСтрока);
	КонецЦикла;

	ТекстовыйДокумент.ДобавитьСтроку("	Возврат Рез;");
	ТекстовыйДокумент.ДобавитьСтроку("КонецФункции");

	Возврат ТекстовыйДокумент.ПолучитьТекст();
КонецФункции

Функция СтрокаСозданияСвойства(Знач Ключ, Знач ЗначениеРусское, Знач ЗначениеАнглийское, Знач ЗначениеПоУмолчанию)
	НоваяСтрока = СтрШаблон(
		"Рез.Вставить(""%1"", 
		|	Новый Структура(""Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч"", 
		|		""%2"", %3, %4, Ложь, Ложь, Ложь, Ложь, Ложь, """"));",
		// "Рез.Вставить(""%1"", Новый Структура(""Р, А, ПоУмолчанию"", ""%2"", ""%3"", %4));",
		Ключ, ЗначениеРусское, ЗначениеАнглийское, ЗначениеПоУмолчанию);
	
	Возврат НоваяСтрока;
КонецФункции

Процедура ПроверитьКоллекции(Коллекция1, Коллекция2, ОписанияКоллекция1, ОписанияКоллекция2, ОписаниеОшибок)
	Для каждого КлючЗначение Из Коллекция1 Цикл
		ЕстьКлюч = Коллекция2.Свойство(КлючЗначение.Ключ);
		// Сообщить(СтрШаблон("%3 - %1, есть ключ %2 ", КлючЗначение.Ключ, ЕстьКлюч, ОписанияКоллекция1));
		Попытка
			Ожидаем.Что(ЕстьКлюч,
				СтрШаблон("Ключ %1 из коллекции %2 д.б. в коллекции %3, а это не так.",
					КлючЗначение.Ключ, ОписанияКоллекция1, ОписанияКоллекция2))
			.ЭтоИстина();
		Исключение
			ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
	КонецЦикла;

	Попытка
		Ожидаем.Что(Коллекция1.Количество(),
			СтрШаблон("%1.Количество() д.б. равно %2.Количество(), а это не так.",
			ОписанияКоллекция1, ОписанияКоллекция2))
		.Равно(Коллекция2.Количество());
	Исключение
		ОписаниеОшибок  = ОписаниеОшибок  + ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

Функция СериализованноеЗначения(Знач Значение)
	Рез = Значение;
	Если Значение = Ложь Тогда
		Рез = "Ложь";
	ИначеЕсли Значение = Истина Тогда
		Рез = "Истина";
	Иначе
		Рез = СтрШаблон("""%1""", Рез); 
	КонецЕсли;
	Возврат Рез;
КонецФункции

// &НаКлиентеНаСервереБезКонтекста
Функция СоздатьСтруктуруПараметровЗапуска()
	Рез = Новый Структура;
	Рез.Вставить("StartFeaturePlayer", Ложь);
	Рез.Вставить("КаталогФич", "");
	Рез.Вставить("КаталогиБиблиотек", Новый Массив);
	Рез.Вставить("СписокТеговИсключение", Новый Массив);
	Рез.Вставить("СписокТеговОтбор", Новый Массив);
	Рез.Вставить("ВыгрузитьPIDTestManager", Ложь);
	Рез.Вставить("ИмяФайлаPIDTestManager", "");
	Рез.Вставить("ИмяФайлаВнешнихКомандФреймворка", "");
	Рез.Вставить("ПриравниватьPendingКFailed", Ложь);
	Рез.Вставить("ОстановкаПриВозникновенииОшибки", Ложь);
	Рез.Вставить("ДелатьСообщенияТранслитом", Ложь);
	Рез.Вставить("СоздаватьИнструкциюHTML", Ложь);
	Рез.Вставить("СоздаватьИнструкциюMarkdown", Ложь);
	Рез.Вставить("СоздаватьИнструкциюВидео", Ложь);
	Рез.Вставить("ДелатьЛогВыполненияСценариевВЖР", Истина);
	Рез.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Ложь);
	Рез.Вставить("ИмяФайлаЛогВыполненияСценариев", "");
	Рез.Вставить("ЗакрытьTestClientПослеЗапускаСценариев", Ложь);
	Рез.Вставить("КаталогOutputИнструкцияHTML", "");
	Рез.Вставить("КаталогOutputИнструкцияMarkdown", "");
	Рез.Вставить("КаталогOutputИнструкцияВидео", "");
	Рез.Вставить("ДелатьОтчетВоВнутреннемФормате", Ложь);
	Рез.Вставить("ДелатьОтчетВФорматеАллюр", Ложь);
	Рез.Вставить("ОтображатьОтчетAllureВБраузере", Ложь);
	Рез.Вставить("КаталогИнструментов", "");
	Рез.Вставить("КаталогПроекта", "");
	Рез.Вставить("КаталогOutputAllure", "");
	Рез.Вставить("КаталогOutputAllureБазовый", "");
	Рез.Вставить("ДелатьОтчетВФорматеjUnit", Ложь);
	Рез.Вставить("КаталогOutputjUnit", "");
	Рез.Вставить("ДелатьОтчетВФорматеCucumberJson", Ложь);
	Рез.Вставить("КаталогOutputCucumberJson", "");
	Рез.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки", Ложь);
	Рез.Вставить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", Ложь);
	Рез.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл", Ложь);
	Рез.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "");
	Рез.Вставить("ВыполнитьСценарии", Ложь);
	Рез.Вставить("ВыполнитьСценарииСТекущегоШага", Ложь);
	Рез.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария", "");
	Рез.Вставить("ЗагрузитьСценарии", Ложь);
	Рез.Вставить("ЗавершитьРаботуСистемы", Ложь);
	Рез.Вставить("ИмяСборки", "");
	Рез.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Ложь);
	Рез.Вставить("СниматьСкриншотКаждогоОкна1С", Ложь);
	Рез.Вставить("КомандаСделатьСкриншот", "");
	Рез.Вставить("КаталогOutputСкриншоты", "");
	Рез.Вставить("ЗапускатьТестКлиентВРежимеОтладки", Ложь);
	Рез.Вставить("КлючиОтладки", "");
	Рез.Вставить("АдресОтладчика", "");
	Рез.Вставить("ВыполнятьШагиАссинхронно", Ложь);
	
	Рез.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", "");
	Рез.Вставить("ЗаписьВидеоФайлКурсораМышки", "");
	Рез.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", "");
	Рез.Вставить("ЗаписьВидеоФайлВодянойЗнак", "");
	Рез.Вставить("ЗаписьВидеоКомандаFfmpeg", "");
	Рез.Вставить("ЗаписьВидеоКомандаConvert", "");
	Рез.Вставить("ЗаписьВидеоКаталогМузыки", "");
	Рез.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Ложь);
	Рез.Вставить("ЗаписьВидеоПутьКДвижкуTTS", "");
	Рез.Вставить("ЗаписьВидеоИмяTTS", "");
	Рез.Вставить("ЗаписьВидеоСловарьЗамен", "");
	Рез.Вставить("ЗаписьВидеоСловарьЗаменСписок", Неопределено);
	Рез.Вставить("ЗаписьВидеоЭкранШирина", "");
	Рез.Вставить("ЗаписьВидеоЭкранВысота", "");
	Рез.Вставить("ЗаписьВидеоКоличествоКадров", "");
	Рез.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Ложь);
	Рез.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Ложь);
	
	Рез.Вставить("ВерсияПлатформыДляГенерацииEPF", "");
	
	Рез.Вставить("ДополнительныеПараметры", Неопределено);
	
	Рез.Вставить("КлиентыТестирования", Неопределено);
	Рез.Вставить("ТаймаутЗапуска1С", "25");
	Рез.Вставить("ДиапазонПортовTestclient", "");
	
	Рез.Вставить("СоздаватьОбластиПриГенерацииКода", Истина);
	
	Возврат Рез;
КонецФункции
	
// &НаКлиенте
Функция КоллекцияКомандЗапуска()
	Возврат СоздатьОбщуюКоллекциюКомандЗапуска();

	Рез = СоздатьСтруктуруПараметровЗапуска();
	Рез.Вставить("StartFeaturePlayer", Новый Структура("Р, А", "StartFeaturePlayer", "startfeatureplayer"));
	Рез.Вставить("КаталогФич", Новый Структура("Р, А", "КаталогФич", "featurepath"));
	Рез.Вставить("КаталогиБиблиотек", Новый Структура("Р, А", "КаталогиБиблиотек", "librarycatalogs"));
	Рез.Вставить("СписокТеговИсключение", Новый Структура("Р, А", "СписокТеговИсключение", "ignoretags"));
	Рез.Вставить("СписокТеговОтбор", Новый Структура("Р, А", "СписокТеговОтбор", "filtertags"));
	Рез.Вставить("ВыгрузитьPIDTestManager", Новый Структура("Р, А", "ВыгрузитьPIDTestManager", "returnpidoftestmanager"));
	Рез.Вставить("ИмяФайлаPIDTestManager", Новый Структура("Р, А", "ИмяФайлаPIDTestManager", "filenamepidtestmanager"));
	Рез.Вставить("ИмяФайлаВнешнихКомандФреймворка", Новый Структура("Р, А", "ИмяФайлаВнешнихКомандФреймворка", "fileofcommand"));
	Рез.Вставить("ПриравниватьPendingКFailed", Новый Структура("Р, А", "ПриравниватьPendingКFailed", "pendingequalfailed"));
	Рез.Вставить("ОстановкаПриВозникновенииОшибки", Новый Структура("Р, А", "ОстановкаПриВозникновенииОшибки", "stoponerror"));
	
	
	Рез.Вставить("ДелатьСообщенияТранслитом", Новый Структура("Р, А", "ДелатьСообщенияТранслитом", "translatemassage"));
	Рез.Вставить("СоздаватьИнструкциюHTML", Новый Структура("Р, А", "СоздаватьИнструкциюHTML", "htmlcreate"));
	Рез.Вставить("СоздаватьИнструкциюMarkdown", Новый Структура("Р, А", "СоздаватьИнструкциюMarkdown", "markdowncreate"));
	Рез.Вставить("СоздаватьИнструкциюВидео", Новый Структура("Р, А", "СоздаватьИнструкциюВидео", "videcreate"));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВЖР", Новый Структура("Р, А", "ДелатьЛогВыполненияСценариевВЖР", "logtogr"));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Новый Структура("Р, А", "ДелатьЛогВыполненияСценариевВТекстовыйФайл", "logtotext"));
	Рез.Вставить("ИмяФайлаЛогВыполненияСценариев", Новый Структура("Р, А", "ИмяФайлаЛогВыполненияСценариев", "textlogname"));
	Рез.Вставить("ЗакрытьTestClientПослеЗапускаСценариев", Новый Структура("Р, А", "ЗакрытьTestClientПослеЗапускаСценариев", "closetestclient"));
	Рез.Вставить("КаталогOutputИнструкцияHTML", Новый Структура("Р, А", "КаталогOutputИнструкцияHTML", "htmlpath"));
	Рез.Вставить("КаталогOutputИнструкцияMarkdown", Новый Структура("Р, А", "КаталогOutputИнструкцияMarkdown", "markdownpath"));
	Рез.Вставить("КаталогOutputИнструкцияВидео", Новый Структура("Р, А", "КаталогOutputИнструкцияВидео", "videopath"));
	
	Рез.Вставить("ДелатьОтчетВоВнутреннемФормате", Новый Структура("Р, А", "ДелатьОтчетВоВнутреннемФормате", "simplereport"));	 
	
	Рез.Вставить("ДелатьОтчетВФорматеАллюр", Новый Структура("Р, А", "ДелатьОтчетВФорматеАллюр", "allurecreatereport"));	 
	Рез.Вставить("ОтображатьОтчетAllureВБраузере", Новый Структура("Р, А", "ОтображатьОтчетAllureВБраузере", "allureautoshow"));	 
	Рез.Вставить("КаталогИнструментов", Новый Структура("Р, А", "КаталогИнструментов", "instrpath"));	
	Рез.Вставить("КаталогПроекта", Новый Структура("Р, А", "КаталогПроекта", "projectpath"));
	Рез.Вставить("КаталогOutputAllure", Новый Структура("Р, А", "КаталогOutputAllure", "allurepath"));	
	Рез.Вставить("КаталогOutputAllureБазовый", Новый Структура("Р, А", "КаталогOutputAllureБазовый", "allurepathbase"));
	
	Рез.Вставить("ДелатьОтчетВФорматеjUnit", Новый Структура("Р, А", "ДелатьОтчетВФорматеjUnit", "junitcreatereport"));	 
	Рез.Вставить("КаталогOutputjUnit", Новый Структура("Р, А", "КаталогOutputjUnit", "junitpath"));	
	
	Рез.Вставить("ДелатьОтчетВФорматеCucumberJson", Новый Структура("Р, А", "ДелатьОтчетВФорматеCucumberJson", "cucumbercreatereport"));	 
	Рез.Вставить("КаталогOutputCucumberJson", Новый Структура("Р, А", "КаталогOutputCucumberJson", "cucumberreportpath"));	
	
	Рез.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки", Новый Структура("Р, А", "ДобавлятьКИмениСценарияУсловияВыгрузки", "addtofeaturefilter"));
	Рез.Вставить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", Новый Структура("Р, А", "СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", "createsubfolderforbuild"));
	Рез.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл", Новый Структура("Р, А", "ВыгружатьСтатусВыполненияСценариевВФайл", "createlogs"));
	Рез.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", Новый Структура("Р, А", "ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "logpath"));
	Рез.Вставить("ВыполнитьСценарии", Новый Структура("Р, А", "ВыполнитьСценарии", "vanessarun"));
	Рез.Вставить("ВыполнитьСценарииСТекущегоШага", Новый Структура("Р, А", "ВыполнитьСценарии", "vanessarunfromthisstep"));
	Рез.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария", Новый Структура("Р, А", "НомерСтрокиДляЗапускаСТекущегоШагаСценария", "stepnumber"));
	Рез.Вставить("ЗагрузитьСценарии", Новый Структура("Р, А", "ЗагрузитьСценарии", "loadscenarios"));
	Рез.Вставить("ЗавершитьРаботуСистемы", Новый Структура("Р, А", "ЗавершитьРаботуСистемы", "vanessashutdown"));
	Рез.Вставить("ИмяСборки", Новый Структура("Р, А", "ИмяСборки", "buildname"));
	
	Рез.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Новый Структура("Р, А", "ДелатьСкриншотПриВозникновенииОшибки", "onerrorscreenshot"));
	Рез.Вставить("СниматьСкриншотКаждогоОкна1С", Новый Структура("Р, А", "СниматьСкриншотКаждогоОкна1С", "onerrorscreenshoteverywindow"));
	Рез.Вставить("КомандаСделатьСкриншот", Новый Структура("Р, А", "КомандаСделатьСкриншот", "commandscreenshot"));
	Рез.Вставить("КаталогOutputСкриншоты", Новый Структура("Р, А", "КаталогOutputСкриншоты", "outputscreenshot"));
	
	Рез.Вставить("ЗапускатьТестКлиентВРежимеОтладки", 	Новый Структура("Р, А", "ЗапускатьТестКлиентВРежимеОтладки", "testclientdebug"));
	Рез.Вставить("КлючиОтладки", 						Новый Структура("Р, А", "КлючиОтладки", "testclientdebugkeys"));
	Рез.Вставить("АдресОтладчика", 						Новый Структура("Р, А", "АдресОтладчика", "testclientdebugaddress"));	
	Рез.Вставить("ВыполнятьШагиАссинхронно",				Новый Структура("Р, А", "ВыполнятьШагиАссинхронно", "makestepsasync"));
	
	Рез.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", Новый Структура("Р, А", "ЗаписьВидеоКомандаНачатьЗаписьВидео", "comandrecvideo"));
	Рез.Вставить("ЗаписьВидеоФайлКурсораМышки", Новый Структура("Р, А", "ЗаписьВидеоФайлКурсораМышки", "mousecurfile"));
	Рез.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", Новый Структура("Р, А", "ЗаписьВидеоКаталогДляВременныхФайлов", "tempfolderforvideo"));
	Рез.Вставить("ЗаписьВидеоФайлВодянойЗнак", Новый Структура("Р, А", "ЗаписьВидеоФайлВодянойЗнак", "watermarkfile"));
	Рез.Вставить("ЗаписьВидеоКомандаFfmpeg", Новый Структура("Р, А", "ЗаписьВидеоКомандаFfmpeg", "ffmpegcomand"));
	Рез.Вставить("ЗаписьВидеоКомандаConvert", Новый Структура("Р, А", "ЗаписьВидеоКомандаConvert", "convertcomand"));
	Рез.Вставить("ЗаписьВидеоКаталогМузыки", Новый Структура("Р, А", "ЗаписьВидеоКаталогМузыки", "musicpath"));
	Рез.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Новый Структура("Р, А", "ЗаписьВидеоДелатьНаложениеTTS", "dotts"));
	Рез.Вставить("ЗаписьВидеоПутьКДвижкуTTS", Новый Структура("Р, А", "ЗаписьВидеоПутьКДвижкуTTS", "audioenginetts"));
	Рез.Вставить("ЗаписьВидеоИмяTTS", Новый Структура("Р, А", "ЗаписьВидеоИмяTTS", "ttsvoice"));
	Рез.Вставить("ЗаписьВидеоСловарьЗамен", Новый Структура("Р, А", "ЗаписьВидеоСловарьЗамен", "changewordslib"));
	Рез.Вставить("ЗаписьВидеоСловарьЗаменСписок", Новый Структура("Р, А", "ЗаписьВидеоСловарьЗаменСписок", "changewordsliblist"));
	Рез.Вставить("ЗаписьВидеоЭкранШирина", Новый Структура("Р, А", "ЗаписьВидеоЭкранШирина", "screenwidth"));
	Рез.Вставить("ЗаписьВидеоЭкранВысота", Новый Структура("Р, А", "ЗаписьВидеоЭкранВысота", "screenheight"));
	Рез.Вставить("ЗаписьВидеоКоличествоКадров", Новый Структура("Р, А", "ЗаписьВидеоКоличествоКадров", "fps"));
	Рез.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Новый Структура("Р, А", "ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", "showframe"));
	Рез.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Новый Структура("Р, А", "ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", "movemouse"));
	
	Рез.Вставить("ВерсияПлатформыДляГенерацииEPF", 						Новый Структура("Р, А", "ВерсияПлатформыДляГенерацииEPF", "platformversiongenerateepf"));	
	Рез.Вставить("ДополнительныеПараметры",								Новый Структура("Р, А", "ДополнительныеПараметры", "dopparams"));	
	Рез.Вставить("КлиентыТестирования",									Новый Структура("Р, А", "КлиентыТестирования", "testclienttable"));	
	Рез.Вставить("ТаймаутЗапуска1С", 									Новый Структура("Р, А", "ТаймаутЗапуска1С", "testclienttimeout"));
	Рез.Вставить("ДиапазонПортовTestclient", 							Новый Структура("Р, А", "ДиапазонПортовTestclient", "testclientports"));
	Рез.Вставить("ОсновнойЯзык", 										Новый Структура("Р, А", "ОсновнойЯзык", "defaultlanguage"));

	Рез.Вставить("ТаймаутДляАсинхронныхШагов", 							Новый Структура("Р, А", "ТаймаутДляАсинхронныхШагов", "timeoutforasynchronoussteps"));

	Возврат Рез;
КонецФункции

// &НаКлиентеНаСервереБезКонтекста
Функция СоздатьОбщуюКоллекциюКомандЗапуска()

	Рез = Новый Структура;

	Рез.Вставить("StartFeaturePlayer", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"StartFeaturePlayer", "startfeatureplayer", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогФич", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогФич", "featurepath", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогиБиблиотек", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогиБиблиотек", "librarycatalogs", "Массив", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("СписокТеговИсключение",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СписокТеговИсключение", "ignoretags", Неопределено, Ложь, Истина, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("СписокТеговОтбор",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СписокТеговОтбор", "filtertags", Неопределено, Ложь, Истина, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ВыгрузитьPIDTestManager", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыгрузитьPIDTestManager", "returnpidoftestmanager", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ИмяФайлаPIDTestManager", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяФайлаPIDTestManager", "filenamepidtestmanager", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ИмяФайлаВнешнихКомандФреймворка",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяФайлаВнешнихКомандФреймворка", "fileofcommand", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ПриравниватьPendingКFailed",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ПриравниватьPendingКFailed", "pendingequalfailed", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ОстановкаПриВозникновенииОшибки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ОстановкаПриВозникновенииОшибки", "stoponerror", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьСообщенияТранслитом",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьСообщенияТранслитом", "translatemassage", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьИнструкциюHTML",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьИнструкциюHTML", "htmlcreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьИнструкциюMarkdown",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьИнструкциюMarkdown", "markdowncreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьИнструкциюВидео",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьИнструкциюВидео", "videcreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВЖР",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьЛогВыполненияСценариевВЖР", "logtogr", Истина, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьЛогВыполненияСценариевВТекстовыйФайл", "logtotext", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ИмяФайлаЛогВыполненияСценариев",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяФайлаЛогВыполненияСценариев", "textlogname", "", Ложь, Ложь, Ложь, Истина, Ложь, "ДелатьЛогВыполненияСценариевВТекстовыйФайл"));
	Рез.Вставить("ЗакрытьTestClientПослеЗапускаСценариев",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗакрытьTestClientПослеЗапускаСценариев", "closetestclient", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputИнструкцияHTML",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputИнструкцияHTML", "htmlpath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюHTML"));
	Рез.Вставить("КаталогOutputИнструкцияMarkdown",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputИнструкцияMarkdown", "markdownpath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюMarkdown"));
	Рез.Вставить("КаталогOutputИнструкцияВидео",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputИнструкцияВидео", "videopath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюВидео"));
	Рез.Вставить("ДелатьОтчетВоВнутреннемФормате", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВоВнутреннемФормате", "simplereport", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьОтчетВФорматеАллюр",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВФорматеАллюр", "allurecreatereport", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ОтображатьОтчетAllureВБраузере",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ОтображатьОтчетAllureВБраузере", "allureautoshow", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("КаталогИнструментов",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогИнструментов", "instrpath", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогПроекта", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогПроекта", "projectpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputAllure", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputAllure", "allurepath", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputAllureБазовый", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputAllureБазовый", "allurepathbase", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьОтчетВФорматеjUnit", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВФорматеjUnit", "junitcreatereport", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputjUnit",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputjUnit", "junitpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "ДелатьОтчетВФорматеjUnit"));
	Рез.Вставить("ДелатьОтчетВФорматеCucumberJson", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВФорматеCucumberJson", "cucumbercreatereport", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputCucumberJson", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputCucumberJson", "cucumberreportpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "ДелатьОтчетВФорматеCucumberJson"));
	Рез.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДобавлятьКИмениСценарияУсловияВыгрузки", "addtofeaturefilter", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", "createsubfolderforbuild", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыгружатьСтатусВыполненияСценариевВФайл", "createlogs", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "logpath", "", Истина, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ВыполнитьСценарии", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыполнитьСценарии", "vanessarun", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ВыполнитьСценарииСТекущегоШага", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыполнитьСценарии", "vanessarunfromthisstep", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"НомерСтрокиДляЗапускаСТекущегоШагаСценария", "stepnumber", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗагрузитьСценарии", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗагрузитьСценарии", "loadscenarios", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗавершитьРаботуСистемы", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗавершитьРаботуСистемы", "vanessashutdown", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ИмяСборки", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяСборки", "buildname", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьСкриншотПриВозникновенииОшибки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьСкриншотПриВозникновенииОшибки", "onerrorscreenshot", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СниматьСкриншотКаждогоОкна1С",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СниматьСкриншотКаждогоОкна1С", "onerrorscreenshoteverywindow", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("КомандаСделатьСкриншот",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КомандаСделатьСкриншот", "commandscreenshot", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputСкриншоты",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputСкриншоты", "outputscreenshot", "", Истина, Ложь, Ложь, Ложь, Ложь, "ДелатьСкриншотПриВозникновенииОшибки"));
	Рез.Вставить("ЗапускатьТестКлиентВРежимеОтладки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗапускатьТестКлиентВРежимеОтладки", "testclientdebug", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("КлючиОтладки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КлючиОтладки", "testclientdebugkeys", "", Ложь, Ложь, Ложь, Ложь, Истина, "ЗапускатьТестКлиентВРежимеОтладки"));
	Рез.Вставить("АдресОтладчика",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"АдресОтладчика", "testclientdebugaddress", "", Ложь, Ложь, Ложь, Ложь, Истина, "ЗапускатьТестКлиентВРежимеОтладки"));
	Рез.Вставить("ВыполнятьШагиАссинхронно", //TODO проверка на Неопределено
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыполнятьШагиАссинхронно", "makestepsasync", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКомандаНачатьЗаписьВидео", "comandrecvideo", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоФайлКурсораМышки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоФайлКурсораМышки", "mousecurfile", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКаталогДляВременныхФайлов", "tempfolderforvideo", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоФайлВодянойЗнак",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоФайлВодянойЗнак", "watermarkfile", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоКомандаFfmpeg",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКомандаFfmpeg", "ffmpegcomand", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоКомандаConvert",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКомандаConvert", "convertcomand", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоКаталогМузыки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКаталогМузыки", "musicpath", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоДелатьНаложениеTTS",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоДелатьНаложениеTTS", "dotts", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоПутьКДвижкуTTS",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоПутьКДвижкуTTS", "audioenginetts", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоИмяTTS",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоИмяTTS", "ttsvoice", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоСловарьЗамен", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоСловарьЗамен", "changewordslib", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоСловарьЗаменСписок", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоСловарьЗаменСписок", "changewordsliblist", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоЭкранШирина",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоЭкранШирина", "screenwidth", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоЭкранВысота",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоЭкранВысота", "screenheight", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоКоличествоКадров",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКоличествоКадров", "fps", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", "showframe", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", "movemouse", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ВерсияПлатформыДляГенерацииEPF",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВерсияПлатформыДляГенерацииEPF", "platformversiongenerateepf", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДополнительныеПараметры", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДополнительныеПараметры", "dopparams", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КлиентыТестирования", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КлиентыТестирования", "testclienttable", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ТаймаутЗапуска1С", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ТаймаутЗапуска1С", "testclienttimeout", "25", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДиапазонПортовTestclient",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДиапазонПортовTestclient", "testclientports", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьОбластиПриГенерацииКода",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьОбластиПриГенерацииКода", "generateareaforsteps", Истина, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ОсновнойЯзык", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ОсновнойЯзык", "mainlanguage", Истина, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ТаймаутДляАсинхронныхШагов", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ТаймаутДляАсинхронныхШагов", "timeoutforasynchronoussteps", Истина, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Возврат Рез;
КонецФункции

// Рез.Вставить("СоздаватьОбластиПриГенерацииКода", Новый Структура("Р, А, ПоУмолчанию", "СоздаватьОбластиПриГенерацииКода", "generateareaforsteps", Истина));
// Рез.Вставить("ОсновнойЯзык", Новый Структура("Р, А, ПоУмолчанию", "ОсновнойЯзык", "mainlanguage", Истина));
// Рез.Вставить("ТаймаутДляАсинхронныхШагов", Новый Структура("Р, А, ПоУмолчанию", "ТаймаутДляАсинхронныхШагов", "timeoutforasynchronoussteps", Истина));