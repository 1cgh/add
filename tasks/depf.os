#Использовать logos
#Использовать 1commands
#Использовать fs

Перем ВозможныеКоманды;
Перем Лог;
Перем ЭтоWindows;
Перем Бинарники1СХранятсяРядомСИсходникам;

Процедура ИнициализацияОкружения()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;

	Лог = Логирование.ПолучитьЛог("oscript.app.vanessa-init");
	Лог.УстановитьРаскладку(ЭтотОбъект);
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	
	ПарсерАргументовКоманднойСтроки = Новый ПарсерАргументовКоманднойСтроки();
	ПарсерАргументовКоманднойСтроки.ДобавитьПараметрФлаг("--useBuildFolderForBinaries", 
	"Использовать каталог ""./build"" для работы с бинарными файлами (внешние обработки/отчеты)
	|В конфигураторе работаем с файлами из этого каталога
	|А в исходники попадают файлы из корневого каталога");

	ПарсерАргументовКоманднойСтроки.ДобавитьПараметр("Каталог", 
		"Каталог, где находятся исходники для сборки бинарных файлов (epf,erf)");
	Аргументы = ПарсерАргументовКоманднойСтроки.Разобрать(АргументыКоманднойСтроки);
	
	ОдинКаталогИлиФайл = Аргументы["Каталог"];
	Лог.Информация("Получили каталог/файл для сборки %1", "" + ОдинКаталогИлиФайл);

	Бинарники1СХранятсяРядомСИсходникам = Не Аргументы["--useBuildFolderForBinaries"];
	Лог.Информация("Указан вариант хранения бинарных внешних файлов (epf,erf) %1", 
	?(Бинарники1СХранятсяРядомСИсходникам, "- в корневом каталоге", "- в каталоге ./build"));

	// УстановитьПеременнуюСреды("RUNNER_IBNAME", "/F./build/ibservice");
	// УстановитьПеременнуюСреды("RUNNER_IBCONNECTION", "/F./build/ibservice");

	ПодкаталогСборки = ?(Бинарники1СХранятсяРядомСИсходникам, "", "build/");

	МассивПутей = Новый Массив();

	Если Не ПустаяСтрока(ОдинКаталогИлиФайл) Тогда

		МассивПутей.Добавить(ОдинКаталогИлиФайл);

	Иначе
		
		МассивПутей.Добавить("./epf");
		МассивПутей.Добавить("./lib/featurereader");
		МассивПутей.Добавить("./features");
		МассивПутей.Добавить("./vendor");
		МассивПутей.Добавить("./plugins");
		
	КонецЕсли;

	КаталогПроекта = КаталогПроекта();
	ШаблонЗапуска = "oscript ./tools/runner.os decompileepf %1 %2 --ibname /F./build/ibservice";

	Для каждого Элемент из МассивПутей Цикл
		ОтносительныйПуть = ФС.ОтносительныйПуть(КаталогПроекта, Элемент);
		Лог.Отладка("Относительный путь %1", ОтносительныйПуть);

		Если ОтносительныйПуть = "epf" Тогда
			КудаРазбираем = "epf";

			ЧтоРазбираем = СтрШаблон("./%1%2", ПодкаталогСборки, "bddRunner.epf");
			ПроверитьСуществованиеФайла(ЧтоРазбираем);

			СтрокаЗапуска = СтрШаблон(ШаблонЗапуска, ЧтоРазбираем, КудаРазбираем);
			ИсполнитьКоманду(СтрокаЗапуска);
				
			ЧтоРазбираем = СтрШаблон("./%1%2", ПодкаталогСборки, "xddTestRunner.epf");
			ПроверитьСуществованиеФайла(ЧтоРазбираем);
			
		Иначе
			ФайлЭлемента = Новый Файл(Элемент);
			Если ФайлЭлемента.Расширение = ".epf" Тогда
				Лог.Отладка("Определили внешний файл %1", Элемент);
				
				ОтносительныйПутьКаталога = ФС.ОтносительныйПуть(КаталогПроекта, ФайлЭлемента.Путь);
				Лог.Отладка("Относительный путь каталога файла %1", ОтносительныйПутьКаталога);

				ЧтоРазбираем = СтрШаблон("./%1%2", ПодкаталогСборки, ОтносительныйПуть);
				Если ОтносительныйПутьКаталога = "." Тогда
					КудаРазбираем = "epf";
				Иначе
					КудаРазбираем = СтрЗаменить(ОтносительныйПуть, ".epf", "");
				КонецЕсли;
			Иначе
				ЧтоРазбираем = СтрШаблон("./%1%2", ПодкаталогСборки, Элемент);
				КудаРазбираем = Элемент;
			КонецЕсли;
		КонецЕсли;

		ПроверитьСуществованиеФайла(ЧтоРазбираем);

		СтрокаЗапуска = СтрШаблон(ШаблонЗапуска, ЧтоРазбираем, КудаРазбираем);
		ИсполнитьКоманду(СтрокаЗапуска);
	КонецЦикла;

	УдалитьИзИзмененийГита_БинарныеФайлыТолстыхФорм_ЕслиВМодулеФормыНеБылоИзменений();
	
КонецПроцедуры

Процедура ПроверитьСуществованиеФайла(Знач Путь, Знач СообщениеОшибки = "")
	Файл = Новый Файл(Путь);
	Ожидаем.Что(Файл.Существует(), СтрШаблон("Файл не существует %1
		|%2", Путь, СообщениеОшибки)).Равно(Истина);	
КонецПроцедуры

Процедура УдалитьИзИзмененийГита_БинарныеФайлыТолстыхФорм_ЕслиВМодулеФормыНеБылоИзменений()
	СтрокаЗапуска = "git diff --name-status HEAD";
	ЖурналИзмененийГит = ИсполнитьКоманду(СтрокаЗапуска, "UTF-8");

	МассивИмен = Новый Массив;
	МассивСтрокЖурнала = СтрРазделить(ЖурналИзмененийГит, Символы.ПС);
	Для Каждого СтрокаЖурнала Из МассивСтрокЖурнала Цикл
		Лог.Отладка("	<%1>", СтрокаЖурнала);
		СтрокаЖурнала = СокрЛ(СтрокаЖурнала);
		СимволИзменений = Лев(СтрокаЖурнала, 1);
		Если СимволИзменений = "M" Тогда
			ИмяФайла = СокрЛП(Сред(СтрокаЖурнала, 2));
			// ИмяФайла = СтрЗаменить(ИмяФайла, Символ(0), "");
			МассивИмен.Добавить(ИмяФайла);
			Лог.Отладка("		В журнале git найдено имя файла <%1>", ИмяФайла);
		КонецЕсли;
	КонецЦикла;

	Для каждого Элемент из МассивИмен Цикл
		Если Прав(Элемент, 8) = "Form.bin" Тогда
			ЧастьПути = Лев(Элемент, СтрДлина(Элемент)-8);
			Лог.Информация(ЧастьПути);
			ПутьМодуляФормы = ЧастьПути + "Form/Module.bsl";
			Если СтрНайти(ЖурналИзмененийГит, ПутьМодуляФормы) = 0 Тогда
				ИсполнитьКоманду("git checkout -- " + Элемент, "UTF-8");
				Приостановить(2000);
				
				ИсполнитьКоманду("git checkout -- " + ЧастьПути, "UTF-8");
				Приостановить(2000);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ИсполнитьКоманду(Знач СтрокаВыполнения, Знач КодировкаВывода = "")
	
	Команда = Новый Команда;
	Команда.ПоказыватьВыводНемедленно(Истина);
	Если Не ПустаяСтрока(КодировкаВывода) Тогда
		Команда.УстановитьКодировкуВывода(КодировкаВывода);
	КонецЕсли;

	Команда.УстановитьПравильныйКодВозврата(0);

	Лог.Информация(СтрокаВыполнения);
	Команда.УстановитьСтрокуЗапуска(СтрокаВыполнения);
	Команда.Исполнить();

	Возврат Команда.ПолучитьВывод();
	
КонецФункции

Функция ФайлНаходитсяВКорнеПроекта(Знач ПутьФайла, Знач ПодкаталогСборки)
	Если ЗначениеЗаполнено(ПодкаталогСборки) Тогда
		ИмяФайла = Новый Файл(ПутьФайла).Имя;
		ПутьФайла = СтрШаблон("./%1%2", ПодкаталогСборки, ИмяФайла);
	КонецЕсли;

	ПолныйПуть = ФС.ПолныйПуть(ПутьФайла);
	ПолныйПутьКаталогаПроекта = ФС.ПолныйПуть(КаталогПроекта());
	ОтносительныйПуть = ФС.ОтносительныйПуть(ПолныйПутьКаталогаПроекта, ПолныйПуть);

	Возврат ОтносительныйПуть = ".";
КонецФункции

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

	Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

Функция КаталогПроекта()
	ФайлИсточника = Новый Файл(ТекущийСценарий().Источник);
	Возврат ОбъединитьПути(ФайлИсточника.Путь, "..");
КонецФункции

ИнициализацияОкружения();
