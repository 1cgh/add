

// { Plugin interface
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Утилита);
	Результат.Вставить("Идентификатор", "ДвиженияДокумента");
	Результат.Вставить("Представление", "Проверка движений документа");
	//ВызватьИсключение "Необходимо указать представление";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	ПодготовитьТаблицуОтклоненийНабораЗаписей();
КонецПроцедуры
// } Plugin interface




// Считывает коллекцию "Движения" у документа
//
// Параметры
//  <Объект>  – <ДокументОбъект>
//
// Возвращаемое значение:
//   <Соответствие>: ключ - <ДокументОбъект>, значение - <ТаблицаЗначений> с движениями документа. 
// 
&НаСервере
Функция ЗапомнитьДвиженияДокумента(Знач Объект, Знач НастройкаПроверкиДвижений);
	
	ИсключаемыеРегистры = НастройкаПроверкиДвижений.ИсключаемыеРегистры;
	ПроверяемыеРегистры = НастройкаПроверкиДвижений.ПроверяемыеРегистры;
	ПроверкиРегистров 	= НастройкаПроверкиДвижений.НастройкиПроверкиРегистров;
	
	НабораЗаписейОбъекта = Новый Соответствие;	
	Для Каждого НаборЗаписейРегистра из Объект.Движения Цикл
		
		МетаданныеНабораЗаписей = НаборЗаписейРегистра.Метаданные();
		ИмяНабораЗаписей 		= МетаданныеНабораЗаписей.Имя;
		ПолноеИмяНабораЗаписей 	= МетаданныеНабораЗаписей.ПолноеИмя();
		
		// Если регистр добавлен в ислючения, то пропускаем проверку.
		Если ИсключаемыеРегистры.Количество() > 0 Тогда
			Если ИсключаемыеРегистры.Найти(ПолноеИмяНабораЗаписей) <> Неопределено Или ИсключаемыеРегистры.Найти(ИмяНабораЗаписей) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если настроен список проверяемых регистров и в этом списке нет проверяемого регистра, то пропускаем проверку.
		Если ПроверяемыеРегистры.Количество() > 0 Тогда
			Если ПроверяемыеРегистры.Найти(ПолноеИмяНабораЗаписей) = Неопределено И ПроверяемыеРегистры.Найти(ИмяНабораЗаписей) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//НастройкаПроверок.Вставить("НастройкиПроверкиРегистров",НастройкиПроверкиРегистров);
		
		НаборЗаписейРегистра.Прочитать();
		ТаблицаЗаписейРегистра = НаборЗаписейРегистра.Выгрузить(); 
		
		НастройкаПроверкиРегистра = ?(ПроверкиРегистров[ПолноеИмяНабораЗаписей] <> Неопределено, ПроверкиРегистров[ПолноеИмяНабораЗаписей], ПроверкиРегистров[ИмяНабораЗаписей]);
		Если НастройкаПроверкиРегистра <> Неопределено Тогда
			
			ВычисляемыеПоля 		= НастройкаПроверкиРегистра.ВычисляемыеПоля;
			ИсключаемыеПоля 		= НастройкаПроверкиРегистра.ИсключаемыеПоля;
			ПроверяемыеПоля 		= НастройкаПроверкиРегистра.ПроверяемыеПоля;
			КолонкиЗаписейРегистра 	= ТаблицаЗаписейРегистра.Колонки;
			
			// Создадим новые вычисляемые поля.
			Если ВычисляемыеПоля.Количество() > 0 Тогда
				Для Каждого ВычисляемоеПоле Из ВычисляемыеПоля Цикл
					Если ЗначениеЗаполнено(ВычисляемоеПоле.Тип) и ТипЗнч(ВычисляемоеПоле.Тип) = Тип("ОписаниеТипов") Тогда
						КолонкиЗаписейРегистра.Добавить(ВычисляемоеПоле.Имя,ВычисляемоеПоле.Тип);
					Иначе	
					    КолонкиЗаписейРегистра.Добавить(ВычисляемоеПоле.Имя);
					КонецЕсли;
					
					Для Каждого ЗаписьРегистра Из ТаблицаЗаписейРегистра Цикл
						ЗаписьРегистра[ВычисляемоеПоле.Имя] = Вычислить(ВычисляемоеПоле.Формула);	
					КонецЦикла;				
				КонецЦикла;				
			КонецЕсли;
			
			// Удалим исключаемые поля.
			Если ИсключаемыеПоля.Количество() > 0 Тогда
				Для Каждого ИсключаемоеПоле Из ИсключаемыеПоля Цикл
					КолонкаЗаписейРегистра = КолонкиЗаписейРегистра.Найти(ИсключаемоеПоле);
					Если КолонкаЗаписейРегистра <> Неопределено Тогда
						КолонкиЗаписейРегистра.Удалить(КолонкаЗаписейРегистра);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;

			// Удалим все поля, кроме тех, которые указаны в проверяемых.
			Если ПроверяемыеПоля.Количество() > 0 Тогда
				ПоляКУдалению = Новый Массив;
				Для Каждого КолонкаЗаписейРегистра Из КолонкиЗаписейРегистра Цикл
					Если ПроверяемыеПоля.Найти(КолонкаЗаписейРегистра.Имя) = Неопределено Тогда
						ПоляКУдалению.Добавить(КолонкаЗаписейРегистра);
					КонецЕсли;	
				КонецЦикла;
				
				Для Каждого ИсключаемоеПоле Из ПоляКУдалению Цикл
					КолонкиЗаписейРегистра.Удалить(ИсключаемоеПоле);					
				КонецЦикла;	
				
			КонецЕсли;			
			
			// Проверяем необходимость свертки движений регистра, после 
			Если НастройкаПроверкиРегистра.НастройкаСвертки.Свернуть Тогда
				КолонкиГруппировок	=	НастройкаПроверкиРегистра.НастройкаСвертки.КолонкиГруппировок;
				КолонкиСуммирования	=	НастройкаПроверкиРегистра.НастройкаСвертки.КолонкиСуммирования;
				
				Если ЗначениеЗаполнено(КолонкиГруппировок) Или ЗначениеЗаполнено(КолонкиСуммирования) Тогда
					ТаблицаЗаписейРегистра.Свернуть(КолонкиГруппировок,КолонкиСуммирования);
				Иначе	
					// ТЗ движения поидее надо свернуть, посде удаления и добавления новых полей.
					КолонкиГруппировок = "";
					КолонкиСуммирования = ""; 
					Для Каждого КолонкаЗаписейРегистра Из КолонкиЗаписейРегистра Цикл
						Если КолонкаЗаписейРегистра.ТипЗначения.СодержитТип(Тип("Число")) Тогда
							КолонкиСуммирования = КолонкиСуммирования + ?(СтрДлина(КолонкиСуммирования) > 0, "," ,"") + КолонкаЗаписейРегистра.Имя;	
						Иначе 
							КолонкиГруппировок = КолонкиГруппировок  + ?(СтрДлина(КолонкиГруппировок) > 0, "," ,"") +  КолонкаЗаписейРегистра.Имя;	
						КонецЕсли;
					КонецЦикла;
					ТаблицаЗаписейРегистра.Свернуть(КолонкиГруппировок,КолонкиСуммирования);
					
				КонецЕсли;
			КонецЕсли;
	
		КонецЕсли;	

		
		НабораЗаписейОбъекта[НаборЗаписейРегистра] = ТаблицаЗаписейРегистра;
	КонецЦикла;
	
	Возврат НабораЗаписейОбъекта;
	
КонецФункции


#Область ПрограммныйИнтерфейс

Функция НовоеВычисляемоеПоле() Экспорт
	
	ВычисляемоеПоле = Новый Структура();
	ВычисляемоеПоле.Вставить("Имя","");
	ВычисляемоеПоле.Вставить("Тип","");
	ВычисляемоеПоле.Вставить("Формула","");	
	
	Возврат ВычисляемоеПоле;
	
КонецФункции

// Функция - Создает конструктор настроек для проверки движений регистра.
// 
// Возвращаемое значение:
//  Структура - настрока проверки движений регистра.
//		* ВычисляемыеПоля - Массив - содержит вычисляемые поля. При проверке движений будут созданы дополнительные поля (колонки) в наборе записей регистра. Значения этих полей будут заполнены по формуле. См. ф-ию НовоеВычисляемоеПоле(). 
//		* ИсключаемыеПоля - Массив - содержит имена полей (измерений, реквизитов, ресурсов и т.д.), которые не будут использоваться при проверке движений регистров.
//		* ПроверяемыеПоля - Массив - содержит имена полей (измерений, реквизитов, ресурсов и т.д.), по которым будет выполняться проверка движений регистров.
//
Функция НоваяНастройкаПроверкиРегистра() Экспорт 
	
	ВычисляемыеПоля = Новый Массив;
	ИсключаемыеПоля = Новый Массив;
	ПроверяемыеПоля = Новый Массив;    
	
	НастройкаПроверкиРегистра = Новый Структура;
	НастройкаПроверкиРегистра.Вставить("ВычисляемыеПоля",ВычисляемыеПоля);
	НастройкаПроверкиРегистра.Вставить("ИсключаемыеПоля",ИсключаемыеПоля);
	НастройкаПроверкиРегистра.Вставить("ПроверяемыеПоля",ПроверяемыеПоля);
	
	НастройкаСвертки = Новый Структура;
	НастройкаСвертки.Вставить("Свернуть",			Ложь);
	НастройкаСвертки.Вставить("КолонкиГруппировок",	"");
	НастройкаСвертки.Вставить("КолонкиСуммирования","");
	
	НастройкаПроверкиРегистра.Вставить("НастройкаСвертки",НастройкаСвертки);
	
	Возврат НастройкаПроверкиРегистра;
	
КонецФункции

// Функция - Создает конструктор настроек для проверки движений документа.
// 
// Возвращаемое значение:
//  Структура - настрока проверки движений документа. Используется для передачу в процедуру ПроверитьДвиженияДокумента.
//		* ИсключаемыеРегистры - Массив - содержит полные имена регистров, по которым проверка движений не будет выполняться.
//		* ПроверяемыеРегистры - Массив - содержит полные имена регистров, по которым проверка движений будет выполняться.
//		* НастройкиПроверкиРегистров - Соответсвие - содержит дополнительные настроки проверок (можно указать исключаемые из проверок поля и др.). Настравивается индивидуально для каждого регистра.
//			* Ключ - полное имя регистра, для которого выполняются настроки.
//			* Значение -  см. функцию НоваяНастройкаПроверкиРегистра() 
//		* ОбщиеНастройки - Структура - содержит общие настройки выполнения проверок движений документа  
//			* БезСохраненияНовыхДвижений - Булево - движения документа не будут изменны в результате его проведения. (т.е. движения документа не будут изменены)
//
Функция НоваяНастройкаПроверкиДвиженийДокумента() Экспорт
	
	ИсключаемыеРегистры 		= Новый Массив;
	ПроверяемыеРегистры 		= Новый Массив;	
	НастройкиПроверкиРегистров 	= Новый Соответствие;
	
	ОбщиеНастройки = Новый Структура();
	ОбщиеНастройки.Вставить("БезСохраненияНовыхДвижений",Истина);
	
	НастройкаПроверок = Новый Структура;
	НастройкаПроверок.Вставить("ИсключаемыеРегистры",		ИсключаемыеРегистры);
	НастройкаПроверок.Вставить("ПроверяемыеРегистры",		ПроверяемыеРегистры);	
	НастройкаПроверок.Вставить("НастройкиПроверкиРегистров",НастройкиПроверкиРегистров);
	НастройкаПроверок.Вставить("ОбщиеНастройки",			ОбщиеНастройки);
	
	Возврат НастройкаПроверок;
	
КонецФункции

&НаСервере
Процедура ПроверитьДвиженияДокумента(Знач Объект, Знач НастройкаПроверкиДвижений = Неопределено,Знач ДопСообщениеОшибки = "") Экспорт
	
	// Сделать тесты.
	// Работа плагин с настройкми по умолчанию.
	// Работа плагина с переопределенными настройками.
	
	ОбъектМетаданные = Объект.Метаданные();
	Если Не Метаданные.Документы.Содержит(ОбъектМетаданные) Тогда
		ВызватьИсключение "Переданный объект не является документом";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка." + ОбъектМетаданные.Имя) Тогда
		Объект = Объект.ПолучитьОбъект();
	КонецЕсли;	
	
	// Если настрока проверки не определена, то используем настройки по умолчанию.
	Если НастройкаПроверкиДвижений = Неопределено Тогда 
		НастройкаПроверкиДвижений = НоваяНастройкаПроверкиДвиженийДокумента();
	КонецЕсли;	
	
	НабораЗаписейОбъекта		= ЗапомнитьДвиженияДокумента(Объект,НастройкаПроверкиДвижений);
	
	БезСохраненияНовыхДвижений = НастройкаПроверкиДвижений.ОбщиеНастройки.БезСохраненияНовыхДвижений;
	
	Если БезСохраненияНовыхДвижений Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Объект.Записать(РежимЗаписиДокумента.Проведение);
	
	НабораЗаписейОбъектаПосле	= ЗапомнитьДвиженияДокумента(Объект,НастройкаПроверкиДвижений); 	// фиксируем новые движения документа (после перепроведения).
	
	Если ТранзакцияАктивна() Тогда
		// Отменяем транзакцию, что бы не изменить настоящих движений документа. 
		ОтменитьТранзакцию();
	КонецЕсли;	
		
	ОтклонениеНабораЗаписей = ПроверитьДвиженияДокументаНаИзменения(НабораЗаписейОбъекта,НабораЗаписейОбъектаПосле); 
	
	Если ОтклонениеНабораЗаписей.Количество() > 0 Тогда
		// Есть ошибки при проверке движений документа
		
		
		//Если РезультатыСравненияТаблиц.ТаблицыСовпадают <> РезультатСравнения Тогда
			
			//////ИменаРезультатов = Новый Соответствие;
			//////Для Каждого КлючЗначение Из РезультатыСравненияТаблиц Цикл
			//////	ИменаРезультатов.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);
			//////КонецЦикла; 
			//////СтрокаОшибок = "Различия в таблицах:" + Символы.ПС;
			//////СтрокаОшибок = СтрокаОшибок + "Ожидали статус <" + ИменаРезультатов[РезультатыСравненияТаблиц.ТаблицыСовпадают] + ">, а получили <" + ИменаРезультатов[РезультатСравнения] + ">" + Символы.ПС;
			//////Для Каждого Строка Из Различия Цикл
			//////	СтрокаОшибок = СтрокаОшибок + "Значение [" + Строка.Колонка + ":" + Строка.Строка + "]. Ожидали <" + Строка.Ожидание + ">, а получили <" + Строка.Результат + ">" + Символы.ПС;
			//////КонецЦикла;
			
			//////////////////ОтклонениеПоОбъектам = Новый Соответствие;
			//////////////////ОтклонениеПоОбъектам[Объект] = ОтклонениеНабораЗаписей;
			
			// Проверим инициализацию набора.
			Если ТипЗнч(ТаблицаОтклоненийНабораЗаписей) = Тип("ТаблицаЗначений") И ТаблицаОтклоненийНабораЗаписей.Колонки.Количество() = 0 Тогда
				ПодготовитьТаблицуОтклоненийНабораЗаписей();
			КонецЕсли;
			
			НовСтрокаТЗ = ТаблицаОтклоненийНабораЗаписей.Добавить();
			НовСтрокаТЗ.ДокументИмя 			= ОбъектМетаданные.Имя;
			НовСтрокаТЗ.ДокументСсылка			= Объект.Ссылка; 
			НовСтрокаТЗ.ОтклонениеНабораЗаписей	= ОтклонениеНабораЗаписей;

			
			//НовСтрокаТЗ.ДокументИмя				= МетаДокумент.ДокументИмя;
			//НовСтрокаТЗ.ОтклонениеНабораЗаписей	= ОтклонениеПоОбъектам;

			
			
			
			
			СтрокаОшибок = "Различия в регистрах:";
			Для Каждого СтрокаОтклоненией Из ОтклонениеНабораЗаписей Цикл
				КлючМетаданные = СтрокаОтклоненией.Ключ.Метаданные();
				ИмяРегистра = КлючМетаданные.Имя + " (" + КлючМетаданные.Синоним + ") ";

				СтрокаОшибок = СтрокаОшибок + Символы.ПС + ИмяРегистра;	
				
				
				
				//◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘
				//◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘
				//◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘
				
				// Шрифт долден быть Courier
				//c:\tolik\-=GIT=-\-=xUnitFor1C=-\Plugins\ГенераторОтчетаMXL.epf для [Сообщение]
				
				МаксДлинаКолонок = Новый Соответствие;
				ТЗ = СтрокаОтклоненией.Значение;
				Для Каждого СтрокаТз Из ТЗ Цикл 
					Для Каждого КолонкаТз Из ТЗ.Колонки Цикл	
						ЗначТЗ = СтрокаТз[КолонкаТз.Имя];
						ДлинаЗнач = Макс(СтрДлина(ЗначТЗ), СтрДлина(КолонкаТз.Имя));
						
						значМаксДлинаКолонки = МаксДлинаКолонок[КолонкаТз.Имя];
						Если значМаксДлинаКолонки = Неопределено или значМаксДлинаКолонки < ДлинаЗнач Тогда
							МаксДлинаКолонок.Вставить(КолонкаТз.Имя,ДлинаЗнач);
						КонецЕсли;	
						
					КонецЦикла;
				КонецЦикла;	
				
				СтрокаОшибок = СтрокаОшибок +Символы.ПС + ВывестиСтрокуТаблицы(ТЗ,МаксДлинаКолонок);		// прорисовываем рамку таблицы
				СтрокаОшибок = СтрокаОшибок +Символы.ПС + ВывестиСтрокуТаблицы(ТЗ,МаксДлинаКолонок,Истина); // прорисовываем шапку с именами колонок
				СтрокаОшибок = СтрокаОшибок +Символы.ПС + ВывестиСтрокуТаблицы(ТЗ,МаксДлинаКолонок);		// прорисовываем рамку
				
				// выводим непосредственно саму таблицу
				Для Каждого СтрокаТз Из ТЗ Цикл
					СтрокаОшибок = СтрокаОшибок +Символы.ПС + ВывестиСтрокуТаблицы(ТЗ,МаксДлинаКолонок,СтрокаТЗ);					 
				КонецЦикла;	
				СтрокаОшибок = СтрокаОшибок +Символы.ПС + ВывестиСтрокуТаблицы(ТЗ,МаксДлинаКолонок);		// прорисовываем рамку
				
				
				
				СтрокаОшибок = СтрокаОшибок + Символы.ПС; // Пустая строка под таблицей.
				//◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘
				//◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘
				//◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘◘
				//СтрДлина(СтрокаОтклоненией.Значение[0].ДокДвижения)
				
			КонецЦикла;			
			
			//СтрокаОшибок = "";
			//ДопСообщениеОшибки = "";
			ВызватьОшибкуПроверки("Движения должны совпадать, а они различны" + Символы.ПС + СтрокаОшибок + Символы.ПС + ДопСообщениеОшибки);
			
			
			//
			//"	"  	
			//"   "
			
			
		//КонецЕсли;
		
		
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьТаблицуОтклоненийНабораЗаписей()
	
	#Если пиндосы_не_пидарассы Тогда
		ТаблицаОтклоненийНабораЗаписей = Новый ТаблицаЗначений;
	#КонецЕсли

	ТаблицаОтклоненийНабораЗаписей.Очистить();
	ТаблицаОтклоненийНабораЗаписей.Колонки.Очистить();
	
	ТаблицаОтклоненийНабораЗаписей.Колонки.Добавить("ДокументИмя");
	ТаблицаОтклоненийНабораЗаписей.Колонки.Добавить("ДокументСсылка");
	ТаблицаОтклоненийНабораЗаписей.Колонки.Добавить("ОтклонениеНабораЗаписей");
	
КонецПроцедуры

	

#КонецОбласти

// прорисовывает строку таблицы. которая будет выводиться в отчет об автоматическом тестировании.
Функция ВывестиСтрокуТаблицы(ТЗ,МаксДлинаКолонок,ВыводимоеЗначение = Неопределено)
	
	//Для Каждого КолонкаТз Из ТЗ.Колонки Цикл
	//	ИмяКолонки = КолонкаТз.Имя;
	//	
	//	
	//	ЗначТЗ = СтрокаТз[ИмяКолонки];
	//	ДлинаЗнач = СтрДлина(ЗначТЗ);
	//	
	//	СтрокаОшибок = СтрокаОшибок + "|" + ЗначТЗ;
	//	
	//	МаксДлина = МаксДлинаКолонок[ИмяКолонки];
	//	Пока ДлинаЗнач < МаксДлина Цикл
	//		СтрокаОшибок = СтрокаОшибок + " ";	
	//		ДлинаЗнач = ДлинаЗнач + 1;						
	//	КонецЦикла;
	//КонецЦикла;

	СтрокаТаблицыОшибок = "";
	Для Каждого КолонкаТз Из ТЗ.Колонки Цикл
		ИмяКолонки 	= КолонкаТз.Имя;
		МаксДлина 	= МаксДлинаКолонок[ИмяКолонки];
		
		ВОтчет = "";
		Если ТипЗнч(ВыводимоеЗначение) = Тип("СтрокаТаблицыЗначений") Тогда
             ВОтчет = ВыводимоеЗначение[ИмяКолонки];
		ИначеЕсли ТипЗнч(ВыводимоеЗначение) = Тип("Булево") Тогда
			 ВОтчет = ИмяКолонки;
		КонецЕсли;	
		
		//Если не ВывестиИмяКолонки Тогда
		//	ИмяКолонки = "";
		//КонецЕсли;	
			
		мДлинаИмени 		= СтрДлина(ВОтчет);
		СтрокаТаблицыОшибок = СтрокаТаблицыОшибок + "|" + ВОтчет;
		
		Пока мДлинаИмени < МаксДлина Цикл
			СтрокаТаблицыОшибок = СтрокаТаблицыОшибок + ?(ВыводимоеЗначение = Неопределено,"-"," ");	
			мДлинаИмени = мДлинаИмени + 1;						
		КонецЦикла;
		
	КонецЦикла;	
	СтрокаТаблицыОшибок = СтрокаТаблицыОшибок + "|";

	
	Возврат СтрокаТаблицыОшибок;	
	
КонецФункции


Процедура ВызватьОшибкуПроверки(СообщениеОшибки = "")
	
	Префикс = "["+ СтатусыРезультатаТестирования().ОшибкаПроверки + "]";
	ВызватьИсключение Префикс + " " + СообщениеОшибки;
	
КонецПроцедуры


Функция СтатусыРезультатаТестирования()
	СтатусыРезультатаТестирования = Новый Структура;
	СтатусыРезультатаТестирования.Вставить("ОшибкаПроверки", "Failed");
	СтатусыРезультатаТестирования.Вставить("НеизвестнаяОшибка", "Broken");
	СтатусыРезультатаТестирования.Вставить("ТестПропущен", "Pending");
	
	Возврат Новый ФиксированнаяСтруктура(СтатусыРезультатаТестирования);
КонецФункции

Функция ПроверитьДвиженияДокументаНаИзменения(НабораЗаписейОбъекта,НабораЗаписейОбъектаПосле)
	#Если пиндосы_не_пидарассы Тогда
		НабораЗаписейОбъекта = Новый Соответствие;
	#КонецЕсли
	
	СоответсвиеРазличий = Новый Соответствие;
	Для каждого НаборЗаписей Из НабораЗаписейОбъекта Цикл
		ТзРазличий = РазницаТаблицЗначений(НаборЗаписей.Значение, НабораЗаписейОбъектаПосле[НаборЗаписей.Ключ],,НаборЗаписей.Ключ.Метаданные().Имя);
		Если ТзРазличий.Количество() > 0 Тогда
			СоответсвиеРазличий[НаборЗаписей.Ключ] = ТзРазличий;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СоответсвиеРазличий;
	
КонецФункции

// Сравнивает 2 таблицы значений. http://infostart.ru/public/326983/ (3.2 Трюк, свертка и сортировка)
// 
// Параметры:
//  <Таблица0>  - <ТаблицаЗначений> - первая сравниваемая таблица значений.
// 	<Таблица1>  - <ТаблицаЗначений> - вторая сравниваемая таблица значений.
// 	<Измерения>  – Список измерений, по которым необходимо отсортировать ТЗ на выходе
//
// Возвращаемое значение:
//   <ТаблицаЗначений> - содержит результат сравнения. 
// 	  Результатом сравнения двух таблиц Таблица0 и Таблица1 должна быть таблица «Разница» той же структуры, что и сравниваемые таблицы.
// 		«Разница» содержит отличающиеся строки двух таблиц (удаленные, добавленные, измененные).
// 		При этом в дополнительном столбце «Знак» должна стоять отметка: 0 – если строка имеется в Таблице0 и 1 – если строка имеется в Таблице1.
// 		Это можно интерпретировать как 0 – строка удалена, 1 – добавлена, или 0 – строка до изменения, 1 – после. 
// 		Кроме того (внимание!), строки с одинаковыми значениями измерений должны быть расположены друг под другом, что реализует удобный для визуального контроля способ «связывания» строк до и после изменения.	 
// 
Функция РазницаТаблицЗначений(Таблица0, Таблица1, Измерения = Неопределено, ИмяРегистра =  Неопределено) Экспорт
	
	#Если пиндосы_не_пидарассы Тогда
		Таблица0 = Новый ТаблицаЗначений;
		Таблица1 = Новый ТаблицаЗначений;
	#КонецЕсли	
	
	Если Таблица0.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
		Таблица0.Колонки.Удалить(Таблица0.Колонки.Найти("НомерСтроки")); 
		Таблица1.Колонки.Удалить(Таблица1.Колонки.Найти("НомерСтроки")); 
	КонецЕсли;
	
	ВсеКолонки = "";
	Для Каждого Колонка Из Таблица0.Колонки Цикл 
		ВсеКолонки = ВсеКолонки + ", " + Колонка.Имя
	КонецЦикла;
	ВсеКолонки = Сред(ВсеКолонки, 2);
	
	// Предварительно срернем ТЗ, и просуммируем ресурсы
	Если ИмяРегистра <> Неопределено Тогда
		Если ИмяРегистра = "Товары" Тогда
			
			ВсеКолонкиСвернуть = "";
			Для Каждого Колонка Из Таблица0.Колонки Цикл 
				Если Колонка.Имя <> "Количество" и Колонка.Имя <> "Сумма" Тогда
					ВсеКолонкиСвернуть = ВсеКолонкиСвернуть + ", " + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ВсеКолонкиСвернуть = Сред(ВсеКолонкиСвернуть, 2);
			
			Таблица0.Свернуть(ВсеКолонкиСвернуть,"Количество,Сумма") ;
			Таблица1.Свернуть(ВсеКолонкиСвернуть,"Количество,Сумма");
			
		КонецЕсли;
	КонецЕсли;
	
	
	
	Таблица = Таблица1.Скопировать();
	Таблица.Колонки.Добавить("Знак", Новый ОписаниеТипов("Число"));
	Таблица.ЗаполнитьЗначения(1, "Знак");
	
	Для ё = 1 По Таблица0.Количество() Цикл Таблица.Вставить(0) КонецЦикла;
	
	Для ё = 0 По Таблица0.Колонки.Количество() - 1 Цикл Таблица.ЗагрузитьКолонку(Таблица0.ВыгрузитьКолонку(ё), ё) КонецЦикла;
	
	Таблица.Колонки.Добавить("Счёт");
	Таблица.ЗаполнитьЗначения(1, "Счёт");
	
	Таблица.Свернуть(ВсеКолонки, "Знак, Счёт");
	
	Ответ = Таблица.Скопировать(Новый Структура("Счёт", 1), ВсеКолонки + ", Знак");
	
	Если Измерения <> Неопределено Тогда
		Ответ.Сортировать(Измерения);
	КонецЕсли;
	
	СтруктураДействий = ПолучитьСтруктуруДействийСЗаписямиРегистра();	
	
	Ответ.Колонки.Вставить(0,"Действие");
	Для каждого СтрОтвет Из Ответ Цикл
		//Это можно интерпретировать как 0 – строка удалена, 1 – добавлена, или 0 – строка до изменения, 1 – после. 
		Если СтрОтвет.Знак = 1 Тогда
			СтрОтвет.Действие = СтруктураДействий.Добавлена;
		Иначе	
			СтрОтвет.Действие = СтруктураДействий.Удалена;
		КонецЕсли;
	КонецЦикла;	
	Ответ.Колонки.Удалить(Ответ.Колонки.Найти("Знак")); 
	
	Возврат Ответ
    
КонецФункции

Функция ПолучитьСтруктуруДействийСЗаписямиРегистра()
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("Добавлена",	"добавлена (после)");
	СтруктураДействий.Вставить("Удалена",	"удалена (до изменения)");
	Возврат СтруктураДействий;
КонецФункции