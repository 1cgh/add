&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем КоллекцияИсключаемыхКлючей;

// { Plugin interface

&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
КонецПроцедуры

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат Объект().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции

// } Plugin interface

// { Settings interface

&НаКлиенте
Функция ПолучитьНастройки() Экспорт
	ИмяКлючаФайлаНастройки = "configpath";

	Если Объект.Настройки = Неопределено Тогда
		ПутьФайлаНастроек = КонтекстЯдра.ПутьФайлаНастроек();
		ФайлНастройки = Новый Файл(ПутьФайлаНастроек);
		СоздатьКоллекцияИсключаемыхКлючей();
		
		Настройки = ПрочитатьНастройкиИзФайлаJSon(ПутьФайлаНастроек);
		Настройки = ДобавитьВНастройкиДанныеИзВложенныхФайловНастроек(Настройки, ИмяКлючаФайлаНастройки, ФайлНастройки.Путь);
		Объект.Настройки = Новый ФиксированнаяСтруктура(Настройки);
		
		ЕстьФлагОтладки = Ложь;
		Если ЕстьСвойство(КонтекстЯдра.Объект, "ФлагОтладки") И КонтекстЯдра.Объект.ФлагОтладки Тогда
			ЕстьФлагОтладки = Истина;			
		КонецЕсли;
		Если ЕстьСвойство(КонтекстЯдра.Объект, "DebugLog") И КонтекстЯдра.Объект.DebugLog Тогда
			ЕстьФлагОтладки = Истина;			
		КонецЕсли;
		Если ЕстьФлагОтладки Тогда
			Сообщить("");
			Сообщить("Файл настроек <" + ПутьФайлаНастроек + ">");
			Сообщить("Переданные настройки:");
			Для Каждого КлючЗначение Из Объект.Настройки Цикл
				Сообщить("Ключ <" + КлючЗначение.Ключ + ">, Значение = <" + КлючЗначение.Значение + ">");
			КонецЦикла;
			Сообщить("");
		КонецЕсли; 
		
	КонецЕсли; 
	Возврат Объект.Настройки;
КонецФункции

&НаКлиенте
Функция ПолучитьНастройку(Знач КлючНастройки) Экспорт
	
	ПолучитьНастройки();
	
	Результат = Неопределено;
	Объект.Настройки.Свойство(КлючНастройки, Результат);
	Возврат Результат;

КонецФункции

// Позволяет одним вызовом получить значение из вложенных друг в друга структур
// по строке ключей, объединенных точкой. 
//
// Параметры:
//  ПутьНастроек		 - Строка	 - Путь или ключ настроек
//  СтруктураНастроек	 - Произвольный, Неопределено - полученное значение
//		( необязательно )
// 
// Возвращаемое значение:
//   Булево - Истина, если ключ/путь найден, иначе Ложь
//
// Пример: 
// 		Структура = Новый Структура("Ключ1", Новый Структура("Ключ2", Новый Структура("Ключ3", 42)));
//		РезультатПроверки = ЕстьНастройка("Ключ1.Ключ2.Ключ3", ВремЗнач);
// В результате получим ВремЗнач == 42
//
&НаКлиенте
Функция ЕстьНастройка(Знач ПутьНастроек, СтруктураНастроек = Неопределено) Экспорт
	
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = ПолучитьНастройки();
	КонецЕсли;
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Или ТипЗнч(СтруктураНастроек) = Тип("ФиксированнаяСтруктура") Тогда
		
		ПозТочки = Найти(ПутьНастроек, ".");
		
		Если ПозТочки = 0 Тогда
			Возврат СтруктураНастроек.Свойство(ПутьНастроек);
		Иначе
			ИмяТекущегоСвойства = Лев(ПутьНастроек, ПозТочки - 1);
			ОстатокПути = Сред(ПутьНастроек, ПозТочки + 1);
			Если СтруктураНастроек.Свойство(ИмяТекущегоСвойства) Тогда
				Возврат ЕстьНастройка(ОстатокПути, СтруктураНастроек[ИмяТекущегоСвойства]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция Обновить() Экспорт
	Объект.Настройки = Неопределено;
	ПолучитьНастройки();
КонецФункции

// } Settings interface

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

// } Settings interface

&НаКлиенте
Функция ДобавитьВНастройкиДанныеИзВложенныхФайловНастроек(Знач Настройки, Знач ИмяКлючаФайлаНастройки, 
					Знач КаталогРодительскойНастройки)

	Результат = Новый Структура;
	Для каждого Настройка Из Настройки Цикл
		Значение = Настройка.Значение;
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			ПутьДопФайлаНастроек = Неопределено;
			Если Значение.Свойство(ИмяКлючаФайлаНастройки, ПутьДопФайлаНастроек) Тогда
				Значение = ПрочитатьНастройкиИзФайлаJSon(КаталогРодительскойНастройки + "/" + ПутьДопФайлаНастроек);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Значение = Заменить_workspaceRoot_на_РабочийКаталогПроекта(Значение);
		КонецЕсли;
		
		Результат.Вставить(Настройка.Ключ, Значение);			
	КонецЦикла;
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПрочитатьНастройкиИзФайлаJSon(Знач ПутьФайлаНастроек)
	Результат = Новый Структура();
	ФайлНастроек = Новый Файл(ПутьФайлаНастроек);
	Если ФайлНастроек.Существует() Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ПутьФайлаНастроек);

		Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат = ПреобразоватьСоответствиеВСтруктуру(Соответствие, КоллекцияИсключаемыхКлючей);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПреобразоватьСоответствиеВСтруктуру(Знач Соответствие, Знач КоллекцияИсключаемыхКлючей)
	Результат = Новый Структура;
	Для каждого КлючЗначение Из Соответствие Цикл
		Если КоллекцияИсключаемыхКлючей.Получить(КлючЗначение.Ключ) = Неопределено Тогда
			Значение = КлючЗначение.Значение;
			Если ТипЗнч(Значение) = Тип("Соответствие") Тогда
				Значение = ПреобразоватьСоответствиеВСтруктуру(Значение, КоллекцияИсключаемыхКлючей);
			КонецЕсли;
			Результат.Вставить(КлючЗначение.Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СоздатьКоллекцияИсключаемыхКлючей()
	КоллекцияИсключаемыхКлючей = Новый Соответствие;
	КоллекцияИсключаемыхКлючей.Вставить("$schema", "$schema");	
КонецПроцедуры

&НаКлиенте
Функция Заменить_workspaceRoot_на_РабочийКаталогПроекта(Знач ИсходнаяСтрока)
	Возврат СтрЗаменить(ИсходнаяСтрока, "$workspaceRoot", КонтекстЯдра.Объект.КаталогПроекта);
КонецФункции

&НаКлиенте
Функция ЕстьСвойство(Знач Объект, Знач ИмяСвойства) Экспорт
    НачальноеЗНачение = Новый УникальныйИдентификатор();
    ЗначениеРеквизита = Новый Структура(ИмяСвойства, НачальноеЗНачение);
    ЗаполнитьЗначенияСвойств(ЗначениеРеквизита, Объект);
    Если ЗначениеРеквизита[ИмяСвойства] <> НачальноеЗНачение Тогда
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции
