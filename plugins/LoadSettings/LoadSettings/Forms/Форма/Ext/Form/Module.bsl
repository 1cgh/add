&НаКлиенте
Перем КонтекстЯдра;

&НаКлиенте
Перем Ожидаем;

&НаКлиенте
Перем ЭтоLinux;

&НаКлиенте
Перем КлючиСоСпециальнойОбработкой;

// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции

// } Plugin interface

// { Helpers
&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	ЭтоLinux = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux")>0 Тогда 
		ЭтоLinux = Истина;
	КонецЕсли;

	КонтекстЯдра = КонтекстЯдраПараметр;
	ВерсияВБКлиент = КонтекстЯдраПараметр.ПолучитьВерсиюОбработкиКлиент();
	
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметров(Стр) Экспорт
	Результат = Новый Структура;
	
	Массив = КонтекстЯдра.РазложитьСтрокуВМассивПодстрокКлиент(Стр, ";");
	Для каждого Элем Из Массив Цикл
		Поз = Найти(Элем, "=");
		Если Поз > 0 Тогда
			Ключ     = Лев(Элем, Поз - 1);
			Значение = Сред(Элем, Поз + 1);
			Попытка
				Результат.Вставить(Ключ, Значение);
			Исключение
				Сообщить("Не смог получить значение из строки запуска: " + Ключ);
			КонецПопытки;
		Иначе
			Если НЕ ПустаяСтрока(Элем) Тогда 
				Попытка
					Результат.Вставить(Элем, Истина);
				Исключение
					Сообщить("Не смог получить значение из строки запуска: " + Элем);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначение(СтруктураПараметров, ИмяПараметра) Экспорт
	Если СтруктураПараметров.Свойство(ИмяПараметра) Тогда
		Возврат СтруктураПараметров[ИмяПараметра];
	ИначеЕсли СтруктураПараметров.Свойство(Врег(ИмяПараметра)) Тогда 
		Возврат СтруктураПараметров[ВРег(ИмяПараметра)];
	Иначе	
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Процедура ВосстановитьНастройки(КонтекстЯдра) Экспорт
	
	ОбъектЗагрузки = КонтекстЯдра.Объект;

	РежимСамотестирования = ОбъектЗагрузки.РежимСамотестирования;
	Настройки = НастройкиСервер(ЭтоLinux);
	Для каждого Элемент из Настройки Цикл
		
		Если Элемент.Ключ = "ДействиеСброситьКешИзвестныхStepDefinitionСервер" И Элемент.Значение Тогда
			КонтекстЯдра.СброситьКешИзвестныхStepDefinition(Неопределено);
			Продолжить;
		КонецЕсли;
		
		//FIXME: ключ ОсновнойЯзык в настройке, у нас является реквизит ЯзыкГенератораGherkin 
		//	и он уже при восстановлении настроек должен быть в структуруе с ключем ЯзыкГенератораGherkin
		Если Элемент.Ключ = "ОсновнойЯзык" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектЗагрузки.Свойство(Элемент.Ключ) Тогда
			ОбъектЗагрузки[Элемент.Ключ] = Элемент.Значение;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(ОбъектВыгрузки) Экспорт
	
	Если ОбъектВыгрузки.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = Новый Структура;
	Настройки.Вставить("DebugLog", ОбъектВыгрузки.DebugLog);
	Настройки.Вставить("ГенерироватьУФ", ОбъектВыгрузки.ГенерироватьУФ);
	Настройки.Вставить("КаталогФич", ОбъектВыгрузки.КаталогФич);
	
	Настройки.Вставить("ДелатьОтчетВФорматеАллюр", ОбъектВыгрузки.ДелатьОтчетВФорматеАллюр);
	Настройки.Вставить("ОтображатьОтчетAllureВБраузере", ОбъектВыгрузки.ОтображатьОтчетAllureВБраузере);
	Настройки.Вставить("КаталогOutputAllure", ОбъектВыгрузки.КаталогOutputAllure);
	
	Настройки.Вставить("ДелатьОтчетВоВнутреннемФормате", ОбъектВыгрузки.ДелатьОтчетВоВнутреннемФормате);
	
	Настройки.Вставить("ДелатьОтчетВФорматеjUnit", ОбъектВыгрузки.ДелатьОтчетВФорматеjUnit);
	Настройки.Вставить("КаталогOutputjUnit", ОбъектВыгрузки.КаталогOutputjUnit);
	
	Настройки.Вставить("ДелатьОтчетВФорматеCucumberJson", ОбъектВыгрузки.ДелатьОтчетВФорматеCucumberJson);
	Настройки.Вставить("КаталогOutputCucumberJson", ОбъектВыгрузки.КаталогOutputCucumberJson);
	
	Настройки.Вставить("текЗначениеОперации", ОбъектВыгрузки.текЗначениеОперации);
	Настройки.Вставить("КаталогиБиблиотек", ОбъектВыгрузки.КаталогиБиблиотек);
	
	Настройки.Вставить("СоздаватьИнструкциюHTML", ОбъектВыгрузки.СоздаватьИнструкциюHTML);
	Настройки.Вставить("КаталогOutputИнструкцияHTML", ОбъектВыгрузки.КаталогOutputИнструкцияHTML);
	
	Настройки.Вставить("СоздаватьИнструкциюMarkdown", ОбъектВыгрузки.СоздаватьИнструкциюMarkdown);
	Настройки.Вставить("КаталогOutputИнструкцияMarkdown", ОбъектВыгрузки.КаталогOutputИнструкцияMarkdown);
	
	Настройки.Вставить("СоздаватьИнструкциюВидео", ОбъектВыгрузки.СоздаватьИнструкциюВидео);
	Настройки.Вставить("КаталогOutputИнструкцияВидео", ОбъектВыгрузки.КаталогOutputИнструкцияВидео);
	
	Настройки.Вставить("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", ОбъектВыгрузки.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
	
	Настройки.Вставить("СписокТеговИсключение", ОбъектВыгрузки.СписокТеговИсключение);
	Настройки.Вставить("СписокТеговОтбор", ОбъектВыгрузки.СписокТеговОтбор);
	
	Настройки.Вставить("ДелатьЛогВыполненияСценариевВЖР", ОбъектВыгрузки.ДелатьЛогВыполненияСценариевВЖР);
	Настройки.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", ОбъектВыгрузки.ДелатьЛогВыполненияСценариевВТекстовыйФайл);
	Настройки.Вставить("ИмяФайлаЛогВыполненияСценариев", ОбъектВыгрузки.ИмяФайлаЛогВыполненияСценариев);
	Настройки.Вставить("ПодключитьВнешниеОбработкиДляОтладки", ОбъектВыгрузки.ПодключитьВнешниеОбработкиДляОтладки);
	
	Настройки.Вставить("ВыполнятьШагиАссинхронно", ОбъектВыгрузки.ВыполнятьШагиАссинхронно);
	
	Настройки.Вставить("СохранятьКонтекстыПередВыполнениемШагов", ОбъектВыгрузки.СохранятьКонтекстыПередВыполнениемШагов);
	
	Настройки.Вставить("СоздаватьОбластиПриГенерацииКода", ОбъектВыгрузки.СоздаватьОбластиПриГенерацииКода);
	
	Настройки.Вставить("КаталогИнструментов", ОбъектВыгрузки.КаталогИнструментов);
	
	Настройки.Вставить("ВыводитьТекстМодуляВместоПерегенерацииEPF", ОбъектВыгрузки.ВыводитьТекстМодуляВместоПерегенерацииEPF);
	
	Настройки.Вставить("КомандаСделатьСкриншот", ОбъектВыгрузки.КомандаСделатьСкриншот);
	
	Настройки.Вставить("ДелатьСкриншотПриВозникновенииОшибки", ОбъектВыгрузки.ДелатьСкриншотПриВозникновенииОшибки);
	Настройки.Вставить("СниматьСкриншотКаждогоОкна1С", ОбъектВыгрузки.СниматьСкриншотКаждогоОкна1С);
	Настройки.Вставить("КаталогOutputСкриншоты", ОбъектВыгрузки.КаталогOutputСкриншоты);
	
	Настройки.Вставить("ИнтервалВыполненияШагаЗаданныйПользователем", ОбъектВыгрузки.ИнтервалВыполненияШагаЗаданныйПользователем);
	Настройки.Вставить("КаталогПроекта", ОбъектВыгрузки.КаталогПроекта);
	
	Настройки.Вставить("ЗапускатьТестКлиентВРежимеОтладки", ОбъектВыгрузки.ЗапускатьТестКлиентВРежимеОтладки);
	Настройки.Вставить("КлючиОтладки", 						ОбъектВыгрузки.КлючиОтладки);
	Настройки.Вставить("АдресОтладчика", 					ОбъектВыгрузки.АдресОтладчика);
	
	//запись видео
	Настройки.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", ОбъектВыгрузки.ЗаписьВидеоКомандаНачатьЗаписьВидео);
	Настройки.Вставить("ЗаписьВидеоЭкранШирина", ОбъектВыгрузки.ЗаписьВидеоЭкранШирина);
	Настройки.Вставить("ЗаписьВидеоЭкранВысота", ОбъектВыгрузки.ЗаписьВидеоЭкранВысота);
	Настройки.Вставить("ЗаписьВидеоКоличествоКадров", ОбъектВыгрузки.ЗаписьВидеоКоличествоКадров);
	Настройки.Вставить("ЗаписьВидеоФайлКурсораМышки", ОбъектВыгрузки.ЗаписьВидеоФайлКурсораМышки);
	Настройки.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", ОбъектВыгрузки.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм);
	Настройки.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", ОбъектВыгрузки.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы);
	Настройки.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", ОбъектВыгрузки.ЗаписьВидеоКаталогДляВременныхФайлов);
	Настройки.Вставить("ЗаписьВидеоФайлВодянойЗнак", ОбъектВыгрузки.ЗаписьВидеоФайлВодянойЗнак);
	Настройки.Вставить("ЗаписьВидеоКомандаFfmpeg", ОбъектВыгрузки.ЗаписьВидеоКомандаFfmpeg);
	Настройки.Вставить("ЗаписьВидеоКомандаConvert", ОбъектВыгрузки.ЗаписьВидеоКомандаConvert);
	Настройки.Вставить("ЗаписьВидеоКаталогМузыки", ОбъектВыгрузки.ЗаписьВидеоКаталогМузыки);
	Настройки.Вставить("ЗаписьВидеоДелатьНаложениеTTS", ОбъектВыгрузки.ЗаписьВидеоДелатьНаложениеTTS);
	Настройки.Вставить("ЗаписьВидеоПутьКДвижкуTTS", ОбъектВыгрузки.ЗаписьВидеоПутьКДвижкуTTS);
	Настройки.Вставить("ЗаписьВидеоИмяTTS", ОбъектВыгрузки.ЗаписьВидеоИмяTTS);
	Настройки.Вставить("ЗаписьВидеоСловарьЗамен", ОбъектВыгрузки.ЗаписьВидеоСловарьЗамен);
	
	Настройки.Вставить("ОстановкаПриВозникновенииОшибки", ОбъектВыгрузки.ОстановкаПриВозникновенииОшибки);
	Настройки.Вставить("ЗагрузкаФичПриОткрытии", ОбъектВыгрузки.ЗагрузкаФичПриОткрытии);
	
	Настройки.Вставить("ЗагрузкаФичПриОткрытии", ОбъектВыгрузки.ЗагрузкаФичПриОткрытии);
	
	Настройки.Вставить("СгенерированныйXML", ОбъектВыгрузки.СгенерированныйXML);
	Настройки.Вставить("СгенерированныйКод", ОбъектВыгрузки.СгенерированныйКод);
	Настройки.Вставить("СгенерированныйСценарий", ОбъектВыгрузки.СгенерированныйСценарий);
	Настройки.Вставить("СгенерированныйСценарийКод", ОбъектВыгрузки.СгенерированныйСценарийКод);
	
	Настройки.Вставить("ВерсияПлатформыДляГенерацииEPF", ОбъектВыгрузки.ВерсияПлатформыДляГенерацииEPF);
	
	Настройки.Вставить("ДополнительныеПараметры", ОбъектВыгрузки.ДополнительныеПараметры);
	Настройки.Вставить("ТаймаутЗапуска1С", ОбъектВыгрузки.ТаймаутЗапуска1С);
	Настройки.Вставить("ДиапазонПортовTestclient", ОбъектВыгрузки.ДиапазонПортовTestclient);
	Настройки.Вставить("ОсновнойЯзык", ОбъектВыгрузки.ЯзыкГенератораGherkin);
	Настройки.Вставить("ВерсияVB", ВерсияВБКлиент);
		
	СохранитьНастройкиСервер(Настройки, ПолучитьИДДляОбщегоСохраненияНастроек());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиВРежимеКоманднойСтроки(ОбъектЯдра, СтруктураДействий) Экспорт
	
	СтрЗапуска = СокрЛП(ПараметрЗапуска);
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(СтрЗапуска);
	ПараметрыЭталон = СоздатьСтруктуруПараметровЗапуска(ЭтоLinux);
	ПеременныеСреды = ПрочитатьПеременныеСреды();
	
	КаталогПроекта = ПолучитьЗначение(СтруктураПараметров, "workspaceRoot");
	КаталогПроекта = ?(КаталогПроекта = Неопределено, ПолучитьЗначение(ПеременныеСреды, "workspaceRoot"), КаталогПроекта);
	
	Если НЕ ПустаяСтрока(КаталогПроекта) Тогда
		ОбъектЯдра.КаталогПроекта = КаталогПроекта;
	КонецЕсли; 
	
	StartFeaturePlayer = ПолучитьЗначение(СтруктураПараметров, "StartFeaturePlayer") = Истина 
		Или ПолучитьЗначение(ПеременныеСреды, "StartFeaturePlayer") = Истина;
	Если Не StartFeaturePlayer Тогда
		Возврат;
	КонецЕсли;
	
	ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров);
	
	ОбъектЯдра.ЗапускИзКоманднойСтроки = Истина;
	ОбъектЯдра.СохранятьКонтекстыПередВыполнениемШагов = Ложь;
	
	VBParams = ПолучитьЗначение(СтруктураПараметров, "VBParams");
	Если VBParams = Неопределено Тогда
		КонтекстЯдра.СделатьСообщение("Не найден путь к файлу JSON. Параметр: VBParams.");
		ПараметрыФайла = СоздатьСтруктуруПараметровЗапуска(ЭтоLinux);
	Иначе 
		ПараметрыФайла = КонтекстЯдра.ПрочитатьСоответствиеИзJSONФайлаКлиент(VBParams);
		Если ПараметрыФайла = Неопределено Тогда
			КонтекстЯдра.СделатьСообщение("Ошибка чтения структуры JSON пропускаем чтение");
		КонецЕсли; 
	КонецЕсли;	 
	
	СтруктураJSON = ОбъединитьПараметрыСУчетомПриоритета(ПараметрыЭталон, ПеременныеСреды, ПараметрыФайла);
	
	Если СтруктураJSON = Неопределено Тогда
		КонтекстЯдра.СделатьСообщение("Ошибка чтения структуры JSON.");
		Возврат;
	КонецЕсли;
	
	ПромСтр = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначение(СтруктураJSON, "КаталогФич"));
	Если ПромСтр = Неопределено Тогда
		КонтекстЯдра.СделатьСообщение("В параметрах JSON не найден каталог Фич!");
		Возврат;
	КонецЕсли;	 
	
	ОбъектЯдра.КаталогФич = ПромСтр;
	
	ЗагрузитьНастройки(СтруктураJSON, КонтекстЯдра, ОбъектЯдра);
	
	СтруктураДействий.Вставить("ВыгрузитьPIDTestManager", ПолучитьЗначение(СтруктураJSON, "ВыгрузитьPIDTestManager"));
	СтруктураДействий.Вставить("ИмяФайлаPIDTestManager", ПолучитьЗначение(СтруктураJSON, "ИмяФайлаPIDTestManager"));
	
	ЗнКаталогПроекта = ПолучитьЗначение(СтруктураJSON, "КаталогПроекта");
	Если ЗначениеЗаполнено(ЗнКаталогПроекта) И Найти(ЗнКаталогПроекта, "$workspaceRoot") = 0 Тогда			
		ОбъектЯдра.КаталогПроекта = ЗнКаталогПроекта;
	КонецЕсли;  
	
	//добавим базовые библиотеки, если они не указаны
	Если ОбъектЯдра.КаталогиБиблиотек.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(ОбъектЯдра.КаталогИнструментов) Тогда
			ОбъектЯдра.КаталогиБиблиотек.Добавить(КонтекстЯдра.ДополнитьСлешВПуть(ОбъектЯдра.КаталогИнструментов) + "features/libraries");
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗнКлиентыТестирования = ПолучитьЗначение(СтруктураJSON, "КлиентыТестирования");
	Если ЗначениеЗаполнено(ЗнКлиентыТестирования) Тогда
		Для Каждого ПараметрыКлиентаТестирования Из ЗнКлиентыТестирования Цикл
			ИмяКлиентаТестирования = Неопределено;
			Если ТипЗнч(ПараметрыКлиентаТестирования) = Тип("Структура") Тогда
				ПараметрыКлиентаТестирования.Свойство("Имя", ИмяКлиентаТестирования);
			ИначеЕсли ТипЗнч(ПараметрыКлиентаТестирования) = Тип("Соответствие") Тогда
				ИмяКлиентаТестирования = ПараметрыКлиентаТестирования.Получить("Имя");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИмяКлиентаТестирования) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);
			
			НайденныеСтроки = КонтекстЯдра.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаДанныеКлиентовТестирования = НайденныеСтроки[0];
			Иначе	
				СтрокаДанныеКлиентовТестирования     = КонтекстЯдра.ДанныеКлиентовТестирования.Добавить();
				СтрокаДанныеКлиентовТестирования.Имя = ИмяКлиентаТестирования;
			КонецЕсли;	 
			
			
			СтрокаДанныеКлиентовТестирования.ПутьКИнфобазе          = ПараметрыКлиентаТестирования["ПутьКИнфобазе"];
			СтрокаДанныеКлиентовТестирования.ДопПараметры           = ПараметрыКлиентаТестирования["ДопПараметры"];
			СтрокаДанныеКлиентовТестирования.ТипКлиента             = ПараметрыКлиентаТестирования["ТипКлиента"];
			СтрокаДанныеКлиентовТестирования.ИмяКомпьютера          = ПараметрыКлиентаТестирования["ИмяКомпьютера"];
			СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента = ПараметрыКлиентаТестирования["ПортЗапускаТестКлиента"];
			Если (ТипЗнч(ПараметрыКлиентаТестирования) = Тип("Структура") И ПараметрыКлиентаТестирования.Свойство("Синоним"))
				ИЛИ ( ТипЗнч(ПараметрыКлиентаТестирования) = Тип("Соответствие") И ЗначениеЗаполнено(ПараметрыКлиентаТестирования.Получить("Синоним")))  Тогда
				СтрокаДанныеКлиентовТестирования.Синоним = ПараметрыКлиентаТестирования["Синоним"];
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
	
	ЗнДополнительныеПараметры = ПолучитьЗначение(СтруктураJSON, "ДополнительныеПараметры");
	Если ЗначениеЗаполнено(ЗнДополнительныеПараметры) Тогда
		Для Каждого Элем Из ЗнДополнительныеПараметры Цикл
			ЗнДополнительныеПараметры.Вставить(Элем.Ключ, КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение));
		КонецЦикла;	
		ОбъектЯдра.ДополнительныеПараметры = ЗнДополнительныеПараметры;
	КонецЕсли;	 
	
	Попытка
		ЗнТаймаутЗапуска1С = ПолучитьЗначение(СтруктураJSON, "ТаймаутЗапуска1С");
		ТаймаутЗапуска1С = Число(ЗнТаймаутЗапуска1С);
	Исключение
		ТаймаутЗапуска1С = 25;
		Стр = "Не удалось получить таймаут для запуска TestClient из значения " + ЗнТаймаутЗапуска1С + ". Используется значение по умолчанию: 5";
		КонтекстЯдра.СделатьСообщение(Стр);
		ЗаписатьЛогВЖРОшибка("VanessaBehavior.ЗапускВРежимеКоманднойСтроки", Стр);
	КонецПопытки;
	ОбъектЯдра.ТаймаутЗапуска1С = ТаймаутЗапуска1С;
	
	//по записи видео - начало
	
	ЗнЗаписьВидеоСловарьЗамен = ПолучитьЗначение(СтруктураJSON, "ЗаписьВидеоСловарьЗамен");
	Если ЗначениеЗаполнено(ЗнЗаписьВидеоСловарьЗамен) Тогда
		ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Очистить();
		ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Добавить(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнЗаписьВидеоСловарьЗамен));
	КонецЕсли;	
	
	ЗнЗаписьВидеоСловарьЗаменСписок = ПолучитьЗначение(СтруктураJSON, "ЗаписьВидеоСловарьЗаменСписок");
	Если ЗначениеЗаполнено(ЗнЗаписьВидеоСловарьЗаменСписок) Тогда
		Если ТипЗнч(ЗнЗаписьВидеоСловарьЗаменСписок) = Тип("Массив") Тогда
			ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Очистить();
			Для Каждого Элем Из ЗнЗаписьВидеоСловарьЗаменСписок Цикл
				ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Добавить(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(Элем));
			КонецЦикла;	
		КонецЕсли;  
	КонецЕсли;
	
	//по записи видео - окончание
	
	ОбъектЯдра.ИмяТекущейСборки = ПолучитьЗначение(СтруктураJSON, "ИмяСборки");
	
	//для отчета jUnit
	Если ОбъектЯдра.ДелатьОтчетВФорматеjUnit Тогда
		
		ОпределилиКаталогjUnit = Ложь;
		ЗнКаталогOutputjUnit   = ПолучитьЗначение(СтруктураJSON, "КаталогOutputjUnit");
		Если ЗначениеЗаполнено(ЗнКаталогOutputjUnit) Тогда
			Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit));
			Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputjUnit") Тогда
				КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
				ФайлПроверкаСуществования = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit));
				Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
					Стр = "Не смог создать каталог для отчета jUnit: " + ЗнКаталогOutputjUnit;
					КонтекстЯдра.СделатьСообщение(Стр);
					ЗаписатьЛогВЖРОшибка("VanessaBehavior.ЗапускВРежимеКоманднойСтроки", Стр);
					Возврат;
				КонецЕсли;	 
				
			КонецЕсли;	 
			ОбъектЯдра.КаталогOutputjUnit       = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit);
			ОпределилиКаталогjUnit          = Истина;
		КонецЕсли;	 
		
		Если НЕ ОпределилиКаталогjUnit Тогда
			КонтекстЯдра.СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета jUnit!");
			Возврат;
		КонецЕсли;	 
	КонецЕсли;
	
	
	//для отчета CucumberJson
	Если ОбъектЯдра.ДелатьОтчетВФорматеCucumberJson Тогда
		
		ОпределилиКаталогCucumberJson = Ложь;
		ЗнКаталогOutputCucumberJson   = ПолучитьЗначение(СтруктураJSON, "КаталогOutputCucumberJson");
		Если ЗначениеЗаполнено(ЗнКаталогOutputCucumberJson) Тогда
			Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson));
			Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputCucumberJson") Тогда
				КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
				ФайлПроверкаСуществования = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson));
				Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
					Стр = "Не смог создать каталог для отчета CucumberJson: " + ЗнКаталогOutputCucumberJson;
					КонтекстЯдра.СделатьСообщение(Стр);
					ЗаписатьЛогВЖРОшибка("VanessaBehavior.ЗапускВРежимеКоманднойСтроки", Стр);
					Возврат;
				КонецЕсли;	 
				
			КонецЕсли;	 
			ОбъектЯдра.КаталогOutputCucumberJson       = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson);
			ОпределилиКаталогCucumberJson          = Истина;
		КонецЕсли;	 
		
		Если НЕ ОпределилиКаталогCucumberJson Тогда
			КонтекстЯдра.СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета CucumberJson!");
			Возврат;
		КонецЕсли;	 
	КонецЕсли;
	
	ОпределилиКаталогAllure = Ложь;
	ЗнКаталогOutputAllure = ПолучитьЗначение(СтруктураJSON, "КаталогOutputAllure");
	Если ЗначениеЗаполнено(ЗнКаталогOutputAllure) Тогда
		КонтекстЯдра.УдалитьКаталогКомандаСистемы(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllure));
		Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllure));
		Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "КаталогOutputAllure") Тогда
			КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
		КонецЕсли;	 
		ОбъектЯдра.КаталогOutputAllure      = ЗнКаталогOutputAllure;
		ОпределилиКаталогAllure         = Истина;
	КонецЕсли;	 
	
	ЗнКаталогOutputAllureБазовый = ПолучитьЗначение(СтруктураJSON, "КаталогOutputAllureБазовый");
	Если ЗначениеЗаполнено(ЗнКаталогOutputAllureБазовый) Тогда
		Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllureБазовый));
		Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputAllureБазовый1") Тогда		
			КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
		КонецЕсли;	 
		
		Если ПолучитьЗначение(СтруктураJSON, "СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки") = Истина Тогда
			ЗнКаталогOutputAllureБазовый = КонтекстЯдра.ДополнитьСлешВПуть(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllureБазовый)) + ПолучитьЗначение(СтруктураJSON, "ИмяСборки");					
			Файл = Новый Файл(ЗнКаталогOutputAllureБазовый);
		КонецЕсли;	 
		
		//ОчиститьСодержимоеКаталога(Файл.ПолноеИмя,"*.xml");
		ФайлПроверкаСуществования = Новый Файл(Файл.ПолноеИмя);
		Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя, "ЗнКаталогOutputAllureБазовый2") Тогда
			КонтекстЯдра.СоздатьКаталогКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя);
			ФайлПроверкаСуществования = Новый Файл(ФайлПроверкаСуществования.ПолноеИмя);
			Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя, "ЗнКаталогOutputAllureБазовый3") Тогда
				КонтекстЯдра.СделатьСообщение("Не смог создать каталог для отчета Allure: " + ЗнКаталогOutputAllureБазовый);
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
		
		ОбъектЯдра.КаталогOutputAllure      = ЗнКаталогOutputAllureБазовый;
		ОпределилиКаталогAllure         = Истина;
	КонецЕсли;	 
	
	Если ОбъектЯдра.ДелатьОтчетВФорматеАллюр Тогда
		Если НЕ ОпределилиКаталогAllure Тогда
			КонтекстЯдра.СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета Allure!");
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтруктураДействий["ВыполнитьСценарии"] = ПолучитьЗначение(СтруктураJSON, "ВыполнитьСценарии");
	СтруктураДействий["ВыполнитьСценарииСТекущегоШага"] = ПолучитьЗначение(СтруктураJSON, "ВыполнитьСценарииСТекущегоШага");
	СтруктураДействий["ЗавершитьРаботуСистемы"] = ПолучитьЗначение(СтруктураJSON, "ЗавершитьРаботуСистемы");
	СтруктураДействий["НомерСтрокиДляЗапускаСТекущегоШагаСценария"] = ПолучитьЗначение(СтруктураJSON, "НомерСтрокиДляЗапускаСТекущегоШагаСценария");
	СтруктураДействий["ЗагрузитьСценарии"] = ПолучитьЗначение(СтруктураJSON, "ЗагрузитьСценарии");
				
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьНастройки(Знач СтруктураJSON, Знач КонтекстЯдра, ОбъектЯдра)
	Если СтруктураJSON = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// TODO обработать начальную загрузку настроек при первом запуске VB

	КоллекцияКомандЗапуска = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);

	Для каждого КлючЗначение Из КоллекцияКомандЗапуска Цикл
		Ключ = КлючЗначение.Ключ;
		// Сообщить(СтрШаблон("Ключ %1", ключ));
		ПараметрыКлюча = КлючЗначение.Значение;

		ПредварительноеЗначение = ПолучитьЗначение(СтруктураJSON, Ключ);

		УстановитьЗначениеВОбъектЯдра(Ключ, ПараметрыКлюча, ПредварительноеЗначение, КонтекстЯдра, ОбъектЯдра);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеВОбъектЯдра(Знач Ключ, Знач ПараметрыКлюча, Знач ПредварительноеЗначение, Знач КонтекстЯдра, ОбъектЯдра)
	ЗначениеДляУстановки = Неопределено;

	Ожидаем.Что(ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиЗаполнено,
		СтрШаблон("неверно одновременно стоит ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиЗаполнено
		|- ключ %1", Ключ))
		.ЭтоЛожь();
	Ожидаем.Что(ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиИстина,
		СтрШаблон("неверно одновременно стоит ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиИстина
		|- ключ %1", Ключ))
		.ЭтоЛожь();
	Ожидаем.Что(ПараметрыКлюча.УстанавливатьЕслиЗаполнено И ПараметрыКлюча.УстанавливатьЕслиИстина,
		СтрШаблон("неверно одновременно стоит ПараметрыКлюча.УстанавливатьЕслиЗаполнено И ПараметрыКлюча.УстанавливатьЕслиИстина
		|- ключ %1", Ключ))
		.ЭтоЛожь();
	Ожидаем.Что(ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.ПреобразоватьПуть,
		СтрШаблон("неверно одновременно стоит ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.ПреобразоватьПуть
		|- ключ %1", Ключ))
		.ЭтоЛожь();

	Если КлючиСоСпециальнойОбработкой().Найти(Ключ) <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	// ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить

	Ожидаем.Что(ПараметрыКлюча.ЭтоМассив 
		И (ПараметрыКлюча.УстанавливатьЕслиЗаполнено 
			Или ПараметрыКлюча.ПростоУстановить 
			Или ПараметрыКлюча.УстанавливатьЕслиИстина ),
			// Или ПараметрыКлюча.ПреобразоватьПуть),
		СтрШаблон("неверно одновременно стоит ЭтоМассив и другой ключ установки
		|- ключ %1", Ключ))
		.ЭтоЛожь();

	РазрешаюшийКлюч = ПараметрыКлюча.РазрешаюшийКлюч;
	Если ЗначениеЗаполнено(РазрешаюшийКлюч) 
		И Не ОбъектЯдра[РазрешаюшийКлюч] Тогда
		
		Возврат;
	КонецЕсли;

	Если ПараметрыКлюча.ПреобразоватьПуть И НЕ ПараметрыКлюча.ЭтоМассив Тогда
		ПредварительноеЗначение = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПредварительноеЗначение);
	КонецЕсли;

	Ожидаем.Что(НЕ ПараметрыКлюча.ЭтоМассив 
			И НЕ ПараметрыКлюча.УстанавливатьЕслиЗаполнено 
			И НЕ ПараметрыКлюча.ПростоУстановить 
			И НЕ ПараметрыКлюча.УстанавливатьЕслиИстина 
			И НЕ ПараметрыКлюча.ПреобразоватьПуть,
		СтрШаблон("не задан ни один из флагов установки
		|- ключ %1", Ключ))
		.ЭтоЛожь();

	Если ПараметрыКлюча.УстанавливатьЕслиЗаполнено Тогда
		Если ЗначениеЗаполнено(ПредварительноеЗначение) Тогда
			ЗначениеДляУстановки = ПредварительноеЗначение;
		КонецЕсли;
	
	ИначеЕсли ПараметрыКлюча.ПростоУстановить Тогда
		ЗначениеДляУстановки = ПредварительноеЗначение;
	
	ИначеЕсли ПараметрыКлюча.УстанавливатьЕслиИстина Тогда
		Если ПредварительноеЗначение = Истина Тогда
			ЗначениеДляУстановки = ПредварительноеЗначение;
		КонецЕсли;
	
	ИначеЕсли ПараметрыКлюча.ЭтоМассив Тогда
		ОбъектЯдра[Ключ].Очистить();
		Если ТипЗнч(ПредварительноеЗначение) = Тип("Массив") Тогда
			Если ПараметрыКлюча.ПреобразоватьПуть Тогда
				Для Ккк = 0 По ПредварительноеЗначение.Количество() - 1 Цикл
					ПредварительноеЗначение[Ккк] = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПредварительноеЗначение[Ккк]);
				КонецЦикла;	
			КонецЕсли;
			ОбъектЯдра[Ключ].ЗагрузитьЗначения(ПредварительноеЗначение);
		КонецЕсли;  

	ИначеЕсли Не ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.ПреобразоватьПуть Тогда
		ЗначениеДляУстановки = ПредварительноеЗначение;
		
	Иначе
		ПредварительноеЗначение = Неопределено;
	КонецЕсли;

	Если ЗначениеДляУстановки <> Неопределено Тогда
		ОбъектЯдра[Ключ] = ЗначениеДляУстановки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция КлючиСоСпециальнойОбработкой()

	Если Не ЗначениеЗаполнено(КлючиСоСпециальнойОбработкой) Тогда
		Рез = Новый Массив;

		Рез.Добавить("StartFeaturePlayer" );
		Рез.Добавить("КаталогФич" );
		Рез.Добавить("КаталогПроекта");
		
		Рез.Добавить("ВыгрузитьPIDTestManager");
		Рез.Добавить("ИмяФайлаPIDTestManager");
		
		Рез.Добавить("КаталогOutputAllure" );
		Рез.Добавить("КаталогOutputAllureБазовый");
		//Рез.Добавить("ДелатьОтчетВФорматеjUnit" );
		Рез.Добавить("КаталогOutputjUnit" );
		//Рез.Добавить("ДелатьОтчетВФорматеCucumberJson" );
		Рез.Добавить("КаталогOutputCucumberJson" );
		Рез.Добавить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки" );
		Рез.Добавить("ВыполнитьСценарии" );
		Рез.Добавить("ВыполнитьСценарииСТекущегоШага" );
		Рез.Добавить("НомерСтрокиДляЗапускаСТекущегоШагаСценария" );
		Рез.Добавить("ЗагрузитьСценарии" );
		Рез.Добавить("ЗавершитьРаботуСистемы" );
		Рез.Добавить("ИмяСборки" );
		Рез.Добавить("ЗаписьВидеоСловарьЗамен" );
		Рез.Добавить("ЗаписьВидеоСловарьЗаменСписок");
		Рез.Добавить("ДополнительныеПараметры");
		Рез.Добавить("КлиентыТестирования");
		Рез.Добавить("ТаймаутЗапуска1С");
		Рез.Добавить("ОсновнойЯзык");

		КлючиСоСпециальнойОбработкой = Новый ФиксированныйМассив(Рез);
	КонецЕсли;
		
	Возврат КлючиСоСпециальнойОбработкой;
КонецФункции

&НаСервере
Функция ПолучитьИДДляОбщегоСохраненияНастроек()
	Стр = "VanessaBehaviorUF";
	Если РежимСамотестирования Тогда
		Стр = "VanessaBehaviorUF_autotest";
	КонецЕсли;	 
	Возврат Стр;
	
КонецФункции

&НаСервере
Процедура СкопироватьЗначениеСтруктуры(ИмяКлюча, Источник, Приемник)
	
	Если Источник.Свойство(ИмяКлюча) Тогда
		Приемник.Вставить(ИмяКлюча, Источник[ИмяКлюча]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиСервер(ЭтоLinux)
	Перем НастройкиРезультат;
	
	НастройкиРезультат = Новый Структура;
	НадоСохранитьНастройки = Ложь;
	
	Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек());
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		СкопироватьЗначениеСтруктуры("DebugLog", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ГенерироватьУФ", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогФич", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьОтчетВоВнутреннемФормате", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьОтчетВФорматеАллюр", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ОтображатьОтчетAllureВБраузере", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputAllure", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьОтчетВФорматеjUnit", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputjUnit", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьОтчетВФорматеCucumberJson", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputCucumberJson", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("текЗначениеОперации", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогиБиблиотек", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СоздаватьИнструкциюHTML", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputИнструкцияHTML", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СоздаватьИнструкциюMarkdown", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputИнструкцияMarkdown", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СоздаватьИнструкциюВидео", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputИнструкцияВидео", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СписокТеговИсключение", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СписокТеговОтбор", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьЛогВыполненияСценариевВЖР", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ИмяФайлаЛогВыполненияСценариев", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ПодключитьВнешниеОбработкиДляОтладки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СоздаватьОбластиПриГенерацииКода", Настройки, НастройкиРезультат);
		Если НЕ Настройки.Свойство("СоздаватьОбластиПриГенерацииКода") Тогда
			НастройкиРезультат.СоздаватьОбластиПриГенерацииКода = Истина;
		КонецЕсли;	 
		
		СкопироватьЗначениеСтруктуры("КаталогПроекта", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗапускатьТестКлиентВРежимеОтладки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КлючиОтладки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("АдресОтладчика", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ВыводитьТекстМодуляВместоПерегенерацииEPF", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КомандаСделатьСкриншот", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ВыполнятьШагиАссинхронно", Настройки, НастройкиРезультат);
											
		СкопироватьЗначениеСтруктуры("СохранятьКонтекстыПередВыполнениемШагов", Настройки, НастройкиРезультат);
				
	
		Если ПустаяСтрока(НастройкиРезультат.КомандаСделатьСкриншот) Тогда
			Если ЭтоLinux Тогда
				НастройкиРезультат.КомандаСделатьСкриншот = "import -window root";
			Иначе
				НастройкиРезультат.КомандаСделатьСкриншот = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
			КонецЕсли;	 
		КонецЕсли;	 
		
		СкопироватьЗначениеСтруктуры("ДелатьСкриншотПриВозникновенииОшибки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СниматьСкриншотКаждогоОкна1С", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("КаталогOutputСкриншоты", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ИнтервалВыполненияШагаЗаданныйПользователем", Настройки, НастройкиРезультат);
		
		
		
		//настройки записи видео
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКомандаНачатьЗаписьВидео", Настройки, НастройкиРезультат);
		
		Если Настройки.Свойство("ЗаписьВидеоКомандаНачатьЗаписьВидео") Тогда
			СкопироватьЗначениеСтруктуры("ЗаписьВидеоКомандаНачатьЗаписьВидео", Настройки, НастройкиРезультат);
		Иначе
			НастройкиРезультат.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", 
				"""C:\Program Files (x86)\VideoLAN\VLC\vlc.exe"" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx :screen-mouse-image=""<screenmouseimage>"" :screen-fps=<fps> :screen-width=<screenwidth> :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}");
		КонецЕсли;	 
		//"C:\Program Files (x86)\VideoLAN\VLC\vlc.exe" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx :screen-mouse-image="<screenmouseimage>" :screen-fps=<fps> :screen-width=<screenwidth> :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}
		
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоЭкранШирина", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоЭкранВысота", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКоличествоКадров", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоФайлКурсораМышки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКаталогДляВременныхФайлов", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоФайлВодянойЗнак", Настройки, НастройкиРезультат);
		
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКомандаFfmpeg", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКомандаConvert", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоКаталогМузыки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоДелатьНаложениеTTS", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоПутьКДвижкуTTS", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоИмяTTS", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗаписьВидеоСловарьЗамен", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ОстановкаПриВозникновенииОшибки", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ЗагрузкаФичПриОткрытии", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СгенерированныйXML", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СгенерированныйКод", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СгенерированныйСценарий", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("СгенерированныйСценарийКод", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДополнительныеПараметры", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ТаймаутЗапуска1С", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ДиапазонПортовTestclient", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ОсновнойЯзык", Настройки, НастройкиРезультат);
		СкопироватьЗначениеСтруктуры("ВерсияVB", Настройки, НастройкиРезультат);

		ВерсияVB = Неопределено;
		НастройкиРезультат.Свойство("ВерсияVB", ВерсияVB);
		Если НЕ ЗначениеЗаполнено(ВерсияVB) Тогда
			НастройкиРезультат.Вставить("ВерсияVB", ВерсияВБКлиент);
			НастройкиРезультат.Вставить("ДействиеСброситьКешИзвестныхStepDefinitionСервер", Истина);
			//СброситьКешИзвестныхStepDefinitionСервер();
			НадоСохранитьНастройки = Истина;
		КонецЕсли;
		
		
		Если Не ЗначениеЗаполнено(НастройкиРезультат.ЗагрузкаФичПриОткрытии) Тогда
			НастройкиРезультат.ЗагрузкаФичПриОткрытии = "Загружать";
		КонецЕсли;	 
			
		ДополнительныеПараметры = Неопределено;
		НастройкиРезультат.Свойство("ДополнительныеПараметры", ДополнительныеПараметры);
		Если ДополнительныеПараметры = Неопределено Тогда
			НастройкиРезультат.Вставить("ДополнительныеПараметры", Новый Структура);
		КонецЕсли;
		
		ТаймаутЗапуска1С = Неопределено;
		НастройкиРезультат.Свойство("ТаймаутЗапуска1С", ТаймаутЗапуска1С);
		Если ТаймаутЗапуска1С = Неопределено ИЛИ ТаймаутЗапуска1С = 0  Тогда
			НастройкиРезультат.Вставить("ТаймаутЗапуска1С", 25);
		КонецЕсли;
		
		ЯзыкГенератораGherkin = Неопределено;
		Если Настройки.Свойство("ОсновнойЯзык", ЯзыкГенератораGherkin) Тогда
			НастройкиРезультат.Вставить("ЯзыкГенератораGherkin", ЯзыкГенератораGherkin);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЯзыкГенератораGherkin) Тогда
			НастройкиРезультат.Вставить("ЯзыкГенератораGherkin", "ru");
		КонецЕсли;	 
		
	Иначе	//значит это первый запуск VB
		НастройкиРезультат = СоздатьСтруктуруПараметровЗапуска(ЭтоLinux);

		НастройкиРезультат.Вставить("ГенерироватьУФ", Истина);
		НастройкиРезультат.Вставить("СписокТеговИсключение", Новый СписокЗначений);
		НастройкиРезультат.Вставить("КаталогиБиблиотек", Новый СписокЗначений);
		НастройкиРезультат.Вставить("КомандаСделатьСкриншот", "");
		
		НастройкиРезультат.КаталогиБиблиотек.Добавить("$instrumentsRoot" + "/features/libraries");
		НастройкиРезультат.СписокТеговИсключение.Добавить("IgnoreOnCIMainBuild");
		
		Если ЭтоLinux Тогда
			СтрокаКомандаСделатьСкриншот = "import -window root ";
		Иначе
			СтрокаКомандаСделатьСкриншот = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
		КонецЕсли;
		НастройкиРезультат.Вставить("КомандаСделатьСкриншот", СтрокаКомандаСделатьСкриншот);
		
		НастройкиРезультат.Вставить("ЗагрузкаФичПриОткрытии", "Загружать");
		НастройкиРезультат.Вставить("ТаймаутЗапуска1С", 25);
		НастройкиРезультат.Вставить("ЯзыкГенератораGherkin", "ru");
		
	КонецЕсли;
	
	Если НадоСохранитьНастройки Тогда
		СохранитьНастройкиСервер(НастройкиРезультат, ПолучитьИДДляОбщегоСохраненияНастроек());
	КонецЕсли;

	Возврат Новый ФиксированнаяСтруктура(НастройкиРезультат);
	
КонецФункции

// { Настройки из файла json, переменных окружения.
&НаКлиенте
Функция ПрочитатьПеременныеСреды() 
	СоответствиеПеременныхПути = Новый Соответствие;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
        Если ЭтоLinux Тогда 
            КомандаСистемы("sh -c 'env > " + ИмяВременногоФайла + "'");
        Иначе 
            КонтекстЯдра.ВыполнитьКомандуОСБезПоказаЧерногоОкна("set > """ + ИмяВременногоФайла + """");
        КонецЕсли;
    Исключение
        Сообщить("ПрочитатьПеременныеСреды:" + ОписаниеОшибки());
    КонецПопытки;
	
	Попытка 
		Чтение = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
		Стр = Чтение.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл 
			//Найдем ключ и значение
			Индекс = Найти(Стр, "=");
			Если Индекс > 0 Тогда 
				Ключ = Нрег(Лев(Стр, Индекс - 1));
				Если ВРег(Лев(Ключ, 8))="VANESSA_" Тогда 
					Ключ = Сред(Ключ, 9);
					Значение = Сред(Стр, Индекс + 1);
					СоответствиеПеременныхПути.Вставить(Ключ, Значение);
				КонецЕсли;
			КонецЕсли;
			Стр = Чтение.ПрочитатьСтроку();
		КонецЦикла;
	Исключение 
	КонецПопытки;
	
	КоллекцияКоммандЗапуска = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);
	СтруктураПараметров = Новый Структура;
	Для каждого ЭлементСтруктуры из КоллекцияКоммандЗапуска Цикл 
		Для каждого ЭлементПеременных из СоответствиеПеременныхПути Цикл
			Попытка
				Если НайтиКоманду(ЭлементСтруктуры.Значение, ЭлементПеременных.Ключ) Тогда 
					СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементПеременных.Значение);
					Прервать;
				КонецЕсли;
			Исключение
				ИнфоОшибки = ИнформацияОбОшибке();
				Сообщить("Ошибка команды "+ЭлементСтруктуры.Ключ + " для поиска в переменной среды " + ЭлементПеременных.Ключ);
			КонецПопытки;
		КонецЦикла;		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьСтруктуруПараметровЗапуска(Знач ЭтоLinux)
	Коллекция = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);

	Рез = Новый Структура;
	Для каждого КлючЗначение Из Коллекция Цикл
		Рез.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение.ПоУмолчанию);
	КонецЦикла;

	Возврат Рез;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьОбщуюКоллекциюКомандЗапуска(Знач ЭтоLinux)

	Рез = Новый Структура;

	Рез.Вставить("StartFeaturePlayer", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"StartFeaturePlayer", "startfeatureplayer", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогФич", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогФич", "featurepath", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	
	СписокКаталогиБиблиотекПоУмолчанию = Новый СписокЗначений;
	СписокКаталогиБиблиотекПоУмолчанию.Добавить("$instrumentsRoot/features/libraries");
		
	Рез.Вставить("КаталогиБиблиотек", //TODO обработано
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогиБиблиотек", "librarycatalogs", СписокКаталогиБиблиотекПоУмолчанию, Ложь, Истина, Ложь, Истина, Ложь, ""));
	
	СписокТеговИсключениеПоУмолчанию = Новый СписокЗначений;
	СписокТеговИсключениеПоУмолчанию.Добавить("IgnoreOnCIMainBuild");

	Рез.Вставить("СписокТеговИсключение",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СписокТеговИсключение", "ignoretags", СписокТеговИсключениеПоУмолчанию, Ложь, Истина, Ложь, Ложь, Ложь, ""));

	Рез.Вставить("СписокТеговОтбор",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СписокТеговОтбор", "filtertags", Новый СписокЗначений, Ложь, Истина, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ВыгрузитьPIDTestManager", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыгрузитьPIDTestManager", "returnpidoftestmanager", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ИмяФайлаPIDTestManager", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяФайлаPIDTestManager", "filenamepidtestmanager", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ИмяФайлаВнешнихКомандФреймворка",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяФайлаВнешнихКомандФреймворка", "fileofcommand", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ПриравниватьPendingКFailed",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ПриравниватьPendingКFailed", "pendingequalfailed", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ОстановкаПриВозникновенииОшибки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ОстановкаПриВозникновенииОшибки", "stoponerror", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьСообщенияТранслитом",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьСообщенияТранслитом", "translatemassage", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьИнструкциюHTML",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьИнструкциюHTML", "htmlcreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьИнструкциюMarkdown",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьИнструкциюMarkdown", "markdowncreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьИнструкциюВидео",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьИнструкциюВидео", "videcreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВЖР",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьЛогВыполненияСценариевВЖР", "logtogr", Истина, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьЛогВыполненияСценариевВТекстовыйФайл", "logtotext", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ИмяФайлаЛогВыполненияСценариев",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяФайлаЛогВыполненияСценариев", "textlogname", "", Ложь, Ложь, Ложь, Истина, Ложь, "ДелатьЛогВыполненияСценариевВТекстовыйФайл"));
	Рез.Вставить("ЗакрытьTestClientПослеЗапускаСценариев",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗакрытьTestClientПослеЗапускаСценариев", "closetestclient", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputИнструкцияHTML",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputИнструкцияHTML", "htmlpath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюHTML"));
	Рез.Вставить("КаталогOutputИнструкцияMarkdown",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputИнструкцияMarkdown", "markdownpath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюMarkdown"));
	Рез.Вставить("КаталогOutputИнструкцияВидео",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputИнструкцияВидео", "videopath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюВидео"));
	Рез.Вставить("ДелатьОтчетВоВнутреннемФормате", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВоВнутреннемФормате", "simplereport", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ДелатьОтчетВФорматеАллюр",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВФорматеАллюр", "allurecreatereport", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ОтображатьОтчетAllureВБраузере",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ОтображатьОтчетAllureВБраузере", "allureautoshow", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("КаталогИнструментов",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогИнструментов", "instrpath", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогПроекта", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогПроекта", "projectpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputAllure", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputAllure", "allurepath", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputAllureБазовый", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputAllureБазовый", "allurepathbase", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьОтчетВФорматеjUnit", //TODO обработано
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВФорматеjUnit", "junitcreatereport", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("КаталогOutputjUnit", // TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputjUnit", "junitpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "ДелатьОтчетВФорматеjUnit"));
	Рез.Вставить("ДелатьОтчетВФорматеCucumberJson", //TODO обработано
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьОтчетВФорматеCucumberJson", "cucumbercreatereport", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("КаталогOutputCucumberJson", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputCucumberJson", "cucumberreportpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "ДелатьОтчетВФорматеCucumberJson"));
	Рез.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДобавлятьКИмениСценарияУсловияВыгрузки", "addtofeaturefilter", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", "createsubfolderforbuild", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыгружатьСтатусВыполненияСценариевВФайл", "createlogs", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "logpath", "", Истина, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ВыполнитьСценарии", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыполнитьСценарии", "vanessarun", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ВыполнитьСценарииСТекущегоШага", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыполнитьСценарии", "vanessarunfromthisstep", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"НомерСтрокиДляЗапускаСТекущегоШагаСценария", "stepnumber", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗагрузитьСценарии", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗагрузитьСценарии", "loadscenarios", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗавершитьРаботуСистемы", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗавершитьРаботуСистемы", "vanessashutdown", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ИмяСборки", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ИмяСборки", "buildname", "", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДелатьСкриншотПриВозникновенииОшибки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДелатьСкриншотПриВозникновенииОшибки", "onerrorscreenshot", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("СниматьСкриншотКаждогоОкна1С",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СниматьСкриншотКаждогоОкна1С", "onerrorscreenshoteverywindow", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));

	Если ЭтоLinux Тогда
		СтрокаКомандаСделатьСкриншот = "import -window root ";
	Иначе
		СтрокаКомандаСделатьСкриншот = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
	КонецЕсли;

	Рез.Вставить("КомандаСделатьСкриншот", // TODO отдельный код по умолчанию
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КомандаСделатьСкриншот", "commandscreenshot", СтрокаКомандаСделатьСкриншот, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КаталогOutputСкриншоты",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КаталогOutputСкриншоты", "outputscreenshot", "", Истина, Ложь, Ложь, Истина, Ложь, "ДелатьСкриншотПриВозникновенииОшибки"));
	Рез.Вставить("ЗапускатьТестКлиентВРежимеОтладки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗапускатьТестКлиентВРежимеОтладки", "testclientdebug", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, ""));
	Рез.Вставить("КлючиОтладки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КлючиОтладки", "testclientdebugkeys", "", Ложь, Ложь, Ложь, Ложь, Истина, "ЗапускатьТестКлиентВРежимеОтладки"));
	Рез.Вставить("АдресОтладчика",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"АдресОтладчика", "testclientdebugaddress", "", Ложь, Ложь, Ложь, Ложь, Истина, "ЗапускатьТестКлиентВРежимеОтладки"));
	Рез.Вставить("ВыполнятьШагиАссинхронно", //TODO проверка на Неопределено
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВыполнятьШагиАссинхронно", "makestepsasync", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, ""));
		
	//TODO учесть настройки по умолчанию
	//	НастройкиРезультат.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", 
	//			"""C:\Program Files (x86)\VideoLAN\VLC\vlc.exe"" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx :screen-mouse-image=""<screenmouseimage>"" :screen-fps=<fps> :screen-width=<screenwidth> :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}");
	Рез.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКомандаНачатьЗаписьВидео", "commandrecvideo", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоФайлКурсораМышки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоФайлКурсораМышки", "mousecurfile", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКаталогДляВременныхФайлов", "tempfolderforvideo", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоФайлВодянойЗнак",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоФайлВодянойЗнак", "watermarkfile", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоКомандаFfmpeg",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКомандаFfmpeg", "ffmpegcommand", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоКомандаConvert",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКомандаConvert", "convertcommand", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоКаталогМузыки",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКаталогМузыки", "musicpath", "", Ложь, Ложь, Ложь, Истина, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоДелатьНаложениеTTS",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоДелатьНаложениеTTS", "dotts", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоПутьКДвижкуTTS",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоПутьКДвижкуTTS", "audioenginetts", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоИмяTTS",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоИмяTTS", "ttsvoice", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоСловарьЗамен", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоСловарьЗамен", "changewordslib", Новый Массив, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоСловарьЗаменСписок", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоСловарьЗаменСписок", "changewordsliblist", Новый Массив, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ЗаписьВидеоЭкранШирина",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоЭкранШирина", "screenwidth", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоЭкранВысота",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоЭкранВысота", "screenheight", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоКоличествоКадров",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоКоличествоКадров", "fps", "", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", "showframe", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", "movemouse", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ВерсияПлатформыДляГенерацииEPF",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ВерсияПлатформыДляГенерацииEPF", "platformversiongenerateepf", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДополнительныеПараметры", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДополнительныеПараметры", "dopparams", Новый Соответствие, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("КлиентыТестирования", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"КлиентыТестирования", "testclienttable", Новый Массив, Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ТаймаутЗапуска1С", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ТаймаутЗапуска1С", "testclienttimeout", "25", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ДиапазонПортовTestclient",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ДиапазонПортовTestclient", "testclientports", "", Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("СоздаватьОбластиПриГенерацииКода",
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"СоздаватьОбластиПриГенерацииКода", "generateareaforsteps", Истина, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ГенерироватьУФ", //TODO частично было в ADD
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ГенерироватьУФ", "ufgenerate", Истина, Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ЗагрузкаФичПриОткрытии", //TODO частично было в ADD
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ЗагрузкаФичПриОткрытии", "loadfeaturesforopen", "Загружать", Ложь, Ложь, Ложь, Ложь, Истина, ""));
	Рез.Вставить("ОсновнойЯзык", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ОсновнойЯзык", "mainlanguage", "ru", Ложь, Ложь, Ложь, Ложь, Ложь, ""));
	Рез.Вставить("ТаймаутДляАсинхронныхШагов", //TODO
		Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
			"ТаймаутДляАсинхронныхШагов", "timeoutforasynchronoussteps", 0, Истина, Ложь, Ложь, Ложь, Ложь, ""));
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция НайтиКоманду(КоллекцияКоманды, КомандаЗапускаНРег)
	Если ТипЗнч(КоллекцияКоманды) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из КоллекцияКоманды Цикл
			Если НРег(КлючЗначение.Значение) = НРег(КомандаЗапускаНРег) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ОбъединитьПараметрыСУчетомПриоритета(ПараметрыЭталон, ПараметрыПриоритет, Параметры)
	СтруктутраПараметров = Новый Структура;
	Для каждого ключЗначение из ПараметрыЭталон Цикл 
		Значение = Неопределено;
		Если ТипЗнч(ПараметрыПриоритет) = Тип("Соответствие") Тогда 
			Если ПараметрыПриоритет.Получить(ключЗначение.Ключ) <> Неопределено Тогда
				Значение = ПараметрыПриоритет.Получить(ключЗначение.Ключ);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрыПриоритет) = Тип("Структура") Тогда 
			ПараметрыПриоритет.Свойство(ключЗначение.Ключ, Значение);
		КонецЕсли;
		
		Если Значение = Неопределено Тогда 
			Если ТипЗнч(Параметры) = Тип("Соответствие") Тогда 
				ЗначениеИзСоответствия = Параметры.Получить(ключЗначение.Ключ);
				Если ЗначениеИзСоответствия <> Неопределено Тогда
					Значение = ЗначениеИзСоответствия;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Параметры) = Тип("Структура") Тогда 
				Параметры.Свойство(ключЗначение.Ключ, Значение);
			КонецЕсли;			
		КонецЕсли;    
		
		ключЗначениеЗначение = Неопределено;
		Если Значение <> Неопределено Тогда 
			Если ТипЗнч(ключЗначение.Значение) = Тип("Булево") Тогда 
				Если ТипЗнч(Значение) = Тип("Булево") Тогда 
					ключЗначениеЗначение = Значение;
				ИначеЕсли НРег(Значение) = "истина" Тогда 
					ключЗначениеЗначение = Истина;
				ИначеЕсли НРег(Значение) = "ложь" Тогда 
					ключЗначениеЗначение = Ложь;
				ИначеЕсли Значение = "1" Тогда 
					ключЗначениеЗначение = Истина;
				ИначеЕсли Значение = "0" Тогда
					ключЗначениеЗначение = Ложь;
				ИначеЕсли НРег(Значение) = "true" Тогда 
					ключЗначениеЗначение = Истина;
				ИначеЕсли НРег(Значение) = "false" Тогда
					ключЗначениеЗначение = Ложь;
				КонецЕсли;
			//ИначеЕсли ТипЗнч(ключЗначение.Значение) = Тип("Строка") Тогда  
			//	ключЗначениеЗначение = Строка(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
				ключЗначениеЗначение = Значение;
			ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
				ключЗначениеЗначение = Значение;
			ИначеЕсли ТипЗнч(ключЗначение.Значение) = Тип("Массив") Тогда
				МассивПараметров = Новый Массив;
				Если ТипЗнч(Значение) = Тип("Строка") Тогда 
					МассивПараметров = КонтекстЯдра.РазложитьСтрокуВМассивПодстрокКлиент(Значение, ",");
				ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
					МассивПараметров = Значение;
				КонецЕсли;
				ключЗначениеЗначение = МассивПараметров;
			ИначеЕсли ТипЗнч(ключЗначение.Значение) = Тип("Строка") Тогда  
				ключЗначениеЗначение = Строка(Значение);
			КонецЕсли;
		КонецЕсли;
		СтруктутраПараметров.Вставить(ключЗначение.Ключ, ?(ключЗначениеЗначение = Неопределено, ключЗначение.Значение, ключЗначениеЗначение));
	КонецЦикла;
				                
	Возврат СтруктутраПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров)
	МассивКлючей = Новый Массив;
	
	Для каждого ПараметрСборки Из СтруктураПараметров Цикл
		
		Если Лев(ПараметрСборки.Значение, 1) = "." Тогда
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		ИначеЕсли Найти(ПараметрСборки.Значение, "$workspaceRoot") > 0 ИЛИ Найти(ПараметрСборки.Значение, "$instrumentsRoot") > 0 Тогда 
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		КонецЕсли;	 
	КонецЦикла;
	
	Для каждого Ключ Из МассивКлючей Цикл
		Было  = СтруктураПараметров[Ключ];
		Стало = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(СтруктураПараметров[Ключ]);
		
		СтруктураПараметров.Вставить(Ключ, Стало);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРОшибка(ИмяСобытия, Стр)
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Стр);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиСервер(СтруктураНастроек, ИДОбщегоСохраненияНастроек)
	
	ХранилищеОбщихНастроек.Сохранить(ИДОбщегоСохраненияНастроек, ,СтруктураНастроек);
	
КонецПроцедуры

// } Настройки из файла json, переменных окружения.

// } Helpers
