Перем ПутьКФайлуПолный Экспорт;// в эту переменную будет установлен правильный клиентский путь к текущему файлу

Перем КонтекстЯдра;
Перем Файлы;

// { Plugin interface
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Утилита);
	Результат.Вставить("Идентификатор", Метаданные().Имя);
	Результат.Вставить("Представление", "Запуск тестов для пользователей");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
КонецПроцедуры
// } Plugin interface

// { API interface

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура - Запустить тест для пользователя
//
// Параметры:
//  ОписаниеПользователя		 - Структура - ключи Логин, Пароль
//  ПутьТестов					 - Строка	 - Путь каталога с тестами или файла обработки-теста
//  	или подсистемы с тестами или встроенной обработки-теста
//  ТипКлиента					 - Строка	 - Ключ из структуры, возвращаемой ВозможныеТипыКлиентов()
//  РабочийКаталогПроекта		 - Строка	 - Необязательно. Если не задано, подставляется КаталогВременныхФайлов/ИмяПользователя_ГУИД
//  ПутьККонфигурационномуФайлу	 - Строка	 - Необязательно. Путь к файлу xUnitParams.json
//  ПутьОтчетаJUnit				 - Строка	 - 
// 
// Возвращаемое значение:
//  Структура - ключи: КодВозврата, СтатусВыполнения, ТекстЛогФайла, ПутьОтчетаJUnit, ТекстОтчетаJUnit
//
Функция ЗапуститьТестДляПользователя(Знач ОписаниеПользователя, Знач ПутьТестов, 
		Знач ТипКлиента, Знач РабочийКаталогПроекта = "", Знач ПутьККонфигурационномуФайлу = "",
		Знач ПутьОтчетаJUnit = "") Экспорт

	СоздатьПлагины();
	
	ПутьКонтекстаЯдра = КонтекстЯдра.ИспользуемоеИмяФайла;
	
	Если Не ЗначениеЗаполнено(РабочийКаталогПроекта) Тогда
		РабочийКаталогПроекта = Файлы.ОбъединитьПути(КаталогВременныхФайлов(), 
			СтрШаблон("%1_%2", ОписаниеПользователя.Логин, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Файлы.ОбеспечитьКаталог(РабочийКаталогПроекта);
	РабочийКаталогПроекта = Файлы.ОбъединитьПути(РабочийКаталогПроекта, "");
	
	ПутьЛогФайла = Файлы.ОбъединитьПути(РабочийКаталогПроекта, "online.log");
	Если Не ЗначениеЗаполнено(ПутьОтчетаJUnit) Тогда
		ПутьОтчетаJUnit = Файлы.ОбъединитьПути(РабочийКаталогПроекта, "junit.xml");
	КонецЕсли;
	
	ПутьФайлаСтатусаТестирования = СтрШаблон("%1%2%3.log", КаталогВременныхФайлов(), "СтатусТестов_", 
		ОписаниеПользователя.Логин);
	
	ПутьККонфигурационномуФайлу = СоздатьКонфигурационныйФайл(РабочийКаталогПроекта, ПутьККонфигурационномуФайлу, 
			"xUnitParams.json", ПутьЛогФайла);
	
	СтрокаЗапускаТестирования = СформироватьСтрокуЗапускаТестирования(ОписаниеПользователя, ПутьТестов, 
		ТипКлиента, РабочийКаталогПроекта, ПутьККонфигурационномуФайлу, ПутьОтчетаJUnit,
		ПутьФайлаСтатусаТестирования);
		
	СтрокаЗапуска = СтрШаблон("/N %1 /C %2 /Execute %3", ОписаниеПользователя.Логин, СтрокаЗапускаТестирования,
		ПутьКонтекстаЯдра);

	Если ОписаниеПользователя.Свойство("Пароль") И ЗначениеЗаполнено(ОписаниеПользователя.Пароль) Тогда
		СтрокаЗапуска = СтрШаблон("%1 /P %2", СтрокаЗапуска, ОписаниеПользователя.Пароль);
	КонецЕсли;
	КонтекстЯдра.Отладка("СтрокаЗапуска " + СтрокаЗапуска);
	
	КодВозврата = 0;
	ЗапуститьСистему(СтрокаЗапуска, Истина, КодВозврата);
	
	СтатусВыполнения = ПрочитатьФайлСтатуса(ПутьФайлаСтатусаТестирования);
	Если СокрЛП(СтатусВыполнения) <> "0" Тогда
		КонтекстЯдра.ВывестиСообщение( СтрШаблон(
			"Результат работы запущенного теста для пользователя не равен 0, а равен %1. 
			|Пользователь %2", СтатусВыполнения, ОписаниеПользователя.Логин));
		СтатусВыполнения = Ложь;
	Иначе
		СтатусВыполнения = Истина;
	КонецЕсли;
	
	ТекстЛогФайла = Файлы.ПрочитатьФайл(ПутьЛогФайла);
	КонтекстЯдра.Отладка("ТекстЛогФайла
	|" + ТекстЛогФайла);
	
	ТекстОтчетаJUnit = Файлы.ПрочитатьФайл(ПутьОтчетаJUnit);
	КонтекстЯдра.Отладка("ТекстОтчетаJUnit
	|" + ТекстОтчетаJUnit);
		
	Рез = Новый Структура();
	Рез.Вставить("КодВозврата", КодВозврата);
	Рез.Вставить("СтатусВыполнения", СтатусВыполнения);
	Рез.Вставить("ПутьОтчетаJUnit", ПутьОтчетаJUnit);
	Рез.Вставить("ТекстОтчетаJUnit", ТекстОтчетаJUnit);
	Рез.Вставить("ТекстЛогФайла", ТекстЛогФайла);

	Возврат Новый ФиксированнаяСтруктура(Рез);
КонецФункции
#КонецЕсли

// Функция - Возможные типы клиентов. Варианты: Тонкий, ТолстыйУФ и ТолстыйОФ
// 
// Возвращаемое значение:
//   ФиксированнаяСтруктура - с ключами выше
//
Функция ВозможныеТипыКлиентов() Экспорт

	Рез = Новый Структура;
	Рез.Вставить("Тонкий", "Тонкий");
	Рез.Вставить("ТолстыйУФ", "Толстый управляемое приложение");
	Рез.Вставить("ТолстыйОФ", "Толстый обычное приложение");

	Возврат Новый ФиксированнаяСтруктура(Рез);
КонецФункции // ВозможныеТипыКлиентов()

// } API interface

//{ Приватные методы

Функция СоздатьКонфигурационныйФайл(Знач РабочийКаталогПроекта, Знач ПутьККонфигурационномуФайлу, 
									Знач ПутьФайла, Знач ПутьЛогФайла)
									
	КЛЮЧ_ИмяФайлаЛогВыполненияСценариев = "ИмяФайлаЛогВыполненияСценариев";
	КЛЮЧ_ДелатьЛогВыполненияСценариевВТекстовыйФайл = "ДелатьЛогВыполненияСценариевВТекстовыйФайл";
	КЛЮЧ_ДобавлятьИмяПользователяВПредставлениеТеста = "ДобавлятьИмяПользователяВПредставлениеТеста";
	
	Если Не ЗначениеЗаполнено(ПутьККонфигурационномуФайлу) Тогда

		Текст = ПолучитьМакет("xUnitParams_json").ПолучитьТекст();
		
	Иначе
		Текст = Файлы.ПрочитатьФайл(ПутьККонфигурационномуФайлу);
	КонецЕсли; 
	
	ЧтениеJson = Новый ЧтениеJSON;
	ЧтениеJson.УстановитьСтроку(Текст);
	
	Настройки = ПрочитатьJSON(ЧтениеJson, Ложь);
	
	Настройки.Вставить(КЛЮЧ_ДелатьЛогВыполненияСценариевВТекстовыйФайл, Истина);
	Настройки.Вставить(КЛЮЧ_ИмяФайлаЛогВыполненияСценариев, ПутьЛогФайла);
	Настройки.Вставить(КЛЮЧ_ДобавлятьИмяПользователяВПредставлениеТеста, Истина);
	
	РезПутьФайла = Файлы.ОбъединитьПути(РабочийКаталогПроекта, ПутьФайла);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(РезПутьФайла, КодировкаТекста.UTF8, Ложь);
	ЗаписатьJSON(ЗаписьJSON, Настройки);
	
	Возврат РезПутьФайла;
КонецФункции // СоздатьКонфигурационныйФайл()

Функция СформироватьСтрокуЗапускаТестирования(Знач ОписаниеПользователя, Знач ПутьТестов, 
		Знач ТипКлиента, Знач РабочийКаталогПроекта, Знач ПутьККонфигурационномуФайлу, Знач ПутьОтчетаJUnit,
		Знач ПутьФайлаСтатусаТестирования)

	СтрокаЗапускаТестов = "";
	
	ВключенаОтладкаТестирования = Истина;
	Завершать1СПослеТестирования = Истина;
	
	ЗагружатьВстроенныеТесты = Ложь; // TODO доработать на использование встроенных тестов
	ТестКлиент = "";//TODO добавить запуск тест-клиента
	
	ФормируемыеОтчеты = Новый Структура;
	ФормируемыеОтчеты.Вставить("ГенераторОтчетаJUnitXML", ПутьОтчетаJUnit);
	
	ФайлТестов = Новый Файл(ПутьТестов);
	
	Если Не ЗагружатьВстроенныеТесты Тогда
		Если ФайлТестов.ЭтоКаталог() Тогда
			СтрокаЗапускаТестов = """xddRun ЗагрузчикКаталога """""+ПутьТестов+""""";";
		Иначе
			СтрокаЗапускаТестов = """xddRun ЗагрузчикФайла """""+ПутьТестов+""""";";
		КонецЕсли;
	Иначе		
		СтрокаЗапускаТестов = """xddRun ЗагрузчикИзПодсистемКонфигурации """""+ПутьТестов+""""";";
	КонецЕсли;

	Если Не ПустаяСтрока(ТестКлиент) Тогда
		СтрокаЗапускаТестов = СтрокаЗапускаТестов +
				СтрШаблон(" xddTestClient """"%1"""" ; ", ТестКлиент);
	КонецЕсли;
	
	Для каждого ПараметрыОтчета Из ФормируемыеОтчеты Цикл
		Генератор = СтрЗаменить(ПараметрыОтчета.Ключ, "GenerateReport", "ГенераторОтчета");
		СтрокаЗапускаТестов = СтрокаЗапускаТестов + "xddReport " + Генератор + " """"" + ПараметрыОтчета.Значение + """"";";
	КонецЦикла;

	Если Не ПустаяСтрока(ПутьККонфигурационномуФайлу) Тогда
		СтрокаЗапускаТестов = СтрокаЗапускаТестов + 
				СтрШаблон(" xddConfig """"%1"""" ; ", ПутьККонфигурационномуФайлу);
	КонецЕсли;

	Если Не ПустаяСтрока(ПутьФайлаСтатусаТестирования) Тогда
		СтрокаЗапускаТестов = СтрокаЗапускаТестов + 
				СтрШаблон(" xddExitCodePath ГенерацияКодаВозврата """"%1"""" ; ", ПутьФайлаСтатусаТестирования);
	КонецЕсли;

	//НастройкиДля1С.ДобавитьШаблоннуюПеременную("workspaceRoot", РабочийКаталогПроекта);

	//Настройки = НастройкиДля1С.ПрочитатьНастройки(ПутьККонфигурационномуФайлу);

	//ПутьЛогаВыполненияСценариев = НастройкиДля1С.ПолучитьНастройку(Настройки, "ИмяФайлаЛогВыполненияСценариев", 
	//							"./build/xddonline.txt", РабочийКаталогПроекта, "путь к лог-файлу выполнения");

	Если ВключенаОтладкаТестирования Тогда
		СтрокаЗапускаТестов = СтрокаЗапускаТестов + " debug ; ";
	КонецЕсли;

	СтрокаЗапускаТестов = СтрокаЗапускаТестов + " workspaceRoot " + РабочийКаталогПроекта + " ; ";

	Если Завершать1СПослеТестирования Тогда
		СтрокаЗапускаТестов = СтрокаЗапускаТестов + " xddShutdown ";
	КонецЕсли;
	
	СтрокаЗапускаТестов = СтрокаЗапускаТестов + " """;

	КонтекстЯдра.Отладка(СтрокаЗапускаТестов);
	
	Возврат СтрокаЗапускаТестов;

КонецФункции // СформироватьСтрокуЗапускаТестирования()

// Читает текстовый файл по переданному пути, и проверяет наличие "0" или "1" в файле.
//	Параметры:
//		ПутьКФайлу - Строка - путь к файлу для чтения.
//	Возвращаемое значение:
//		Строка - строка, с содержимым файла.
Функция ПрочитатьФайлСтатуса(Знач ПутьКФайлу) //Экспорт

	Текст = "";
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		Текст = Файлы.ПрочитатьФайл(Файл.ПолноеИмя, Ложь);
	Иначе
		Текст = "Информации об ошибке нет";
	КонецЕсли;

	КонтекстЯдра.Отладка("файл статуса:
	|" + Текст);
	Возврат Текст;

КонецФункции

Процедура СоздатьПлагины()
	Если Файлы = Неопределено Тогда
		Файлы = КонтекстЯдра.Плагин("Файлы");
	КонецЕсли; 
КонецПроцедуры

//}