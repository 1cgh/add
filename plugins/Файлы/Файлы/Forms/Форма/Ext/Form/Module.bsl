&НаКлиенте
Перем ПутьКФайлуПолный Экспорт;// в эту переменную будет установлен правильный клиентский путь к текущему файлу

&НаКлиенте
Перем КонтекстЯдра;

// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
КонецПроцедуры

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции
// } Plugin interface

// { API

&НаКлиенте
// Функция - Объединить пути
//
// Параметры:
//  Каталог	 - Строка	 - 
//  Файл	 - Строка 	 - 
// 
// Возвращаемое значение:
//  Строка - 
//
Функция ОбъединитьПути(Знач Каталог, Знач Файл) Экспорт
	Если Прав(Каталог, 1) <> ПолучитьРазделительПути() Тогда
		Каталог = Каталог + ПолучитьРазделительПути();
	КонецЕсли; 
	Возврат Каталог + Файл;
КонецФункции // ОбъединитьПути()

&НаКлиенте
// Проверяет существование файла или каталога
//
// Параметры:
//   Путь - Проверяемый путь
//
//  Возвращаемое значение:
//   Булево   - Истина, если файл/каталог существует
//
Функция Существует(Знач Путь) Экспорт
    
    Объект = Новый Файл(Путь);
    
    Возврат Объект.Существует();
    
КонецФункции // Существует()

&НаКлиенте
// Проверяет существование файла
//
// Параметры:
//   Путь - Проверяемый путь
//
//  Возвращаемое значение:
//   Булево   - Истина, если файл существует
//
Функция ФайлСуществует(Знач Путь) Экспорт
    
    Объект = Новый Файл(Путь);
    
    Возврат Объект.Существует() и Объект.ЭтоФайл();
    
КонецФункции // ФайлСуществует()

&НаКлиенте
// Проверяет существование каталога
//
// Параметры:
//   Путь - Проверяемый путь
//
//  Возвращаемое значение:
//   Булево   - Истина, если каталог существует
//
Функция КаталогСуществует(Знач Путь) Экспорт
    
    Объект = Новый Файл(Путь);
    
    Возврат Объект.Существует() и Объект.ЭтоКаталог();
    
КонецФункции // КаталогСуществует()

&НаКлиенте
// Гарантирует наличие пустого каталога с указанным именем
//
// Параметры:
//   Путь - Строка - Путь к каталогу
//
Процедура ОбеспечитьПустойКаталог(Знач Путь) Экспорт
    
    ОбеспечитьКаталог(Путь);
    УдалитьФайлы(Путь, ПолучитьМаскуВсеФайлы());
    
КонецПроцедуры // ОбеспечитьПустойКаталог()

&НаКлиенте
// Гарантирует наличие каталога с указанным именем
//
// Параметры:
//   Путь - Строка - Путь к каталогу
//
Процедура ОбеспечитьКаталог(Знач Путь) Экспорт
    
    Объект = Новый Файл(Путь);
    Если Не Объект.Существует() Тогда
        СоздатьКаталог(Путь);
    ИначеЕсли НЕ Объект.ЭтоКаталог() Тогда
        ВызватьИсключение "Не удается создать каталог " + Путь + ". По данному пути уже существует файл.";
    КонецЕсли;
    
КонецПроцедуры // ОбеспечитьКаталог()

&НаКлиенте
// Копирует все файлы из одного каталога в другой
//
// Параметры:
//   Откуда - Строка - Путь к исходному каталогу
//   Куда - Строка - Путь к каталогу-назначению
//
Процедура КопироватьСодержимоеКаталога(Знач Откуда, Знач Куда) Экспорт

	ОбеспечитьКаталог(Куда);

	Файлы = НайтиФайлы(Откуда, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл Из Файлы Цикл
		ПутьКопирования = ОбъединитьПути(Куда, Файл.Имя);
		Если Файл.ЭтоКаталог() Тогда
			КопироватьСодержимоеКаталога(Файл.ПолноеИмя, ПутьКопирования);
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, ПутьКопирования);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
// Процедура - Записать файл в кодировке UTF-8
//
// Параметры:
//  ПутьФайла	 - Строка	 - 
//  ТекстФайла	 - Строка	 - 
//
Процедура ЗаписатьФайл(Знач ПутьФайла, Знач ТекстФайла) Экспорт
	Запись = Новый ЗаписьТекста(ПутьФайла, КодировкаТекста.UTF8);
	Запись.Записать(ТекстФайла);
	Запись.Закрыть();
КонецПроцедуры

&НаКлиенте
// Функция - Прочитать файл в кодировке UTF-8
//
// Параметры:
//  Путь			 - Строка	 - 
//  МонопольныйРежим - Булево	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПрочитатьФайл(Знач Путь, Знач МонопольныйРежим = Истина) Экспорт

	Если МонопольныйРежим Тогда
		Чтение = Новый ЧтениеТекста(Путь, КодировкаТекста.UTF8); //для совместимости
	Иначе
		Чтение = Новый ЧтениеТекста(Путь, КодировкаТекста.UTF8, , МонопольныйРежим);
	КонецЕсли;
	Текст = Чтение.Прочитать();
	Чтение.Закрыть();

	Возврат Текст;

КонецФункции

&НаКлиенте
// Функция - Каталог запускателя тестов
// 
// Возвращаемое значение:
//   Строка - 
//
Функция КаталогЗапускателяТестов() Экспорт
	ФайлЗапускателяТестов = Новый Файл(КонтекстЯдра.ИспользуемоеИмяФайла);
	Возврат ФайлЗапускателяТестов.Путь;
КонецФункции

&НаКлиенте
// Функция - Имя запускателя тестов
// 
// Возвращаемое значение:
//   Строка - 
//
Функция ИмяЗапускателяТестов() Экспорт
	ФайлЗапускателяТестов = Новый Файл(КонтекстЯдра.ИспользуемоеИмяФайла);
	Возврат ФайлЗапускателяТестов.ИмяБезРасширения;
КонецФункции

// } API

// { Helpers
&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
// } Helpers

