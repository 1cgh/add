Перем РазницаВМилисекундахМеждуЮниксИНачалЭпохи;

// { Plugin interface
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.ГенераторОтчета);
	Результат.Вставить("Идентификатор", Метаданные().Имя);
	Результат.Вставить("Представление", "Отчет о тестировании в формате MXL для Yandex Allure");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
КонецПроцедуры
// } Plugin interface

// { Report generator interface
Функция СоздатьОтчет(КонтекстЯдра, РезультатыТестирования) Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	ЭтотОбъект.ТипыУзловДереваТестов = ПостроительДереваТестов.ТипыУзловДереваТестов;
	ЭтотОбъект.ИконкиУзловДереваТестов = ПостроительДереваТестов.ИконкиУзловДереваТестов;
	ЭтотОбъект.СостоянияТестов = КонтекстЯдра.СостоянияТестов;
	Отчет = СоздатьОтчетНаСервере(РезультатыТестирования);
	
	Возврат Отчет;
КонецФункции

Функция СоздатьОтчетНаСервере(РезультатыТестирования) Экспорт
	
	МассивОписанийШагов = СоздатьОтчетАллюр2(РезультатыТестирования);
	
	РезНабор = Новый Массив;
	Для каждого ОписаниеШага Из МассивОписанийШагов Цикл
		//Рез = "";
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ОписаниеШага);
		//ЗаписьJSON.ЗаписатьЗначение(ОписаниеШага);
		// ЗаписьJSON.ЗаписатьЗначение(МассивОписаний);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		РезНабор.Добавить(СтрокаJSON);
		//Лог.Отладка("
		//|%1
		//|", Рез);
		//Возврат Рез; //TODO вернуть json
	КонецЦикла;
	Возврат РезНабор;
	
	//ЗаписьJSON = Новый ЗаписьJSON;
	//ЗаписьJSON.УстановитьСтроку();
	//ЗаписатьJSON(ЗаписьJSON, РезультатыТестирования);
	//СтрокаJSON = ЗаписьJSON.Закрыть();
	
	//ИмяФайла = ПолучитьИмяВременногоФайла("xsd");
	//СхемаAllure = ПолучитьМакет("СхемаAllure");
	//СхемаAllure.Записать(ИмяФайла);
	//
	//Фабрика = СоздатьФабрикуXDTO(ИмяФайла);
	//
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("UTF-8");
	//ЗаписьXML.ЗаписатьОбъявлениеXML();
	//
	//НаборЗаписейXML = Новый Массив;
	//
	//ВывестиДанныеОтчетаТестированияРекурсивно(НаборЗаписейXML, ЗаписьXML, РезультатыТестирования, Фабрика, 1);
	//
	//РезНабор = Новый Массив;

	//Для Каждого ЗаписьXML Из НаборЗаписейXML  Цикл
	//	
	//	СтрокаXML = ЗаписьXML.Закрыть();
	//	СтрокаXML = Allure_ПолучитьПреобразованнуюСтрокуXML(СтрокаXML);
	//	
	//	Отчет = Новый ТекстовыйДокумент;
	//	Отчет.ДобавитьСтроку(СтрокаXML);
	//	
	//	РезНабор.Добавить(Отчет);
	//КонецЦикла; 
	//
	//Возврат РезНабор;
КонецФункции

Процедура ВывестиДанныеОтчетаТестированияРекурсивно(НаборЗаписейXML, ЗаписьXML, РезультатыТестирования, Фабрика, Знач Уровень, Знач Контейнер = Неопределено, Знач НаборТестов = Неопределено)

	ТекущийУровень = Уровень;
	Уровень = Уровень + 1;
	
	Если ТекущийУровень = 1 Тогда
			
		Для Каждого ЭлементКоллекции Из РезультатыТестирования.Строки Цикл
			ВывестиДанныеОтчетаТестированияРекурсивно(НаборЗаписейXML, ЗаписьXML, ЭлементКоллекции, Фабрика, Уровень, Контейнер, НаборТестов);
		КонецЦикла;
		
	ИначеЕсли РезультатыТестирования.Тип = ТипыУзловДереваТестов.Контейнер 
		И РезультатыТестирования.ИконкаУзла = ИконкиУзловДереваТестов.Обработка Тогда
			
		ТипTestSuiteResult = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "test-suite-result");
		Контейнер = Фабрика.Создать(ТипTestSuiteResult);
		
		Контейнер.name = РезультатыТестирования.Имя;
		
		Типlabels = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "labels");
		СписокМеток = Фабрика.Создать(Типlabels);
		СписокМеток.label.Добавить(Allure_ПолучитьМетку(Фабрика, "framework", "xUnitFor1C"));
		СписокМеток.label.Добавить(Allure_ПолучитьМетку(Фабрика, "language", "1С"));
		
		Контейнер.labels = СписокМеток;
		
		ТипTestCasesResult = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "test-cases-result");
		НаборТестов  = Фабрика.Создать(ТипTestCasesResult);
		
		Контейнер.test_cases = НаборТестов;
		
		Для Каждого ЭлементКоллекции Из РезультатыТестирования.Строки Цикл
			ВывестиДанныеОтчетаТестированияРекурсивно(НаборЗаписейXML, ЗаписьXML, ЭлементКоллекции, Фабрика, Уровень, Контейнер, НаборТестов);
		КонецЦикла;
		
		Фабрика.ЗаписатьXML(ЗаписьXML, Контейнер);
		
		НаборЗаписейXML.Добавить(ЗаписьXML);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();

	ИначеЕсли РезультатыТестирования.Тип = ТипыУзловДереваТестов.Элемент Тогда

		ТипTestCaseResult = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "test-case-result");
		Тест = Фабрика.Создать(ТипTestCaseResult);
		
		Тест.name = РезультатыТестирования.Представление;
		
		Тест.title = РезультатыТестирования.Представление;
		Тест.start = Число(РезультатыТестирования.ВремяНачала) - РазницаВМилисекундахМеждуЮниксИНачалЭпохи;
		Тест.stop  = Число(РезультатыТестирования.ВремяОкончания) - РазницаВМилисекундахМеждуЮниксИНачалЭпохи;
		Тест.status = Allure_ПолучитьСтатус(РезультатыТестирования.Состояние, СостоянияТестов);
		
		Если Тест.status = "broken" 
			ИЛИ Тест.status = "failed" Тогда
			
			СообщениеОбОшибке = УдалитьНедопустимыеСимволыXML(РезультатыТестирования.Сообщение);
			Тест.failure = Allure_ПолучитьОшибку(Фабрика, СообщениеОбОшибке);
			
			ТипParameters = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "parameters");
			НаборПараметров = Фабрика.Создать(ТипParameters);
			
			Сч = 1;
			Для Каждого ЭлементПараметр Из РезультатыТестирования.Параметры Цикл
				
				ПараметрТип = "environment-variable";
				ПараметрИмя = "Параметр " + Сч;
				ПараметрЗначение = Строка(ЭлементПараметр) + "(" + Строка(ТипЗнч(ЭлементПараметр)) + ")";
				
				Параметр = Allure_ПолучитьПараметр(Фабрика, ПараметрИмя, ПараметрЗначение, ПараметрТип);
				НаборПараметров.parameter.Добавить(Параметр);
				
				Сч = Сч + 1;
			КонецЦикла;
			
			Тест.parameters = НаборПараметров;
			
		КонецЕсли;
		
		Попытка
			НаборТестов.test_case.Добавить(Тест);
		Исключение
			Сообщить(РезультатыТестирования.Представление);
			ЗаписьЖурналаРегистрации("xUnitFor1C.ГенераторОтчетаAllureXML", УровеньЖурналаРегистрации.Ошибка, , , РезультатыТестирования.Представление);
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе

		Для Каждого ЭлементКоллекции Из РезультатыТестирования.Строки Цикл
			ВывестиДанныеОтчетаТестированияРекурсивно(НаборЗаписейXML, ЗаписьXML, ЭлементКоллекции, Фабрика, Уровень, Контейнер, НаборТестов);
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда
Процедура Показать(Отчет) Экспорт
	Отчет.Показать();
КонецПроцедуры
#КонецЕсли

Процедура Экспортировать(Отчет, ПолныйПутьФайла) Экспорт

	СтрокаJSON = Отчет;
	
	//СтрокаXML = Отчет.ПолучитьТекст();
	
	ИмяФайла = ПолныйПутьФайла;
	
	ИмяФайла = ПолучитьУникальноеИмяФайла(ИмяФайла); 
	
	Сообщение = "Уникальное имя файла " + ИмяФайла;
	ЗаписьЖурналаРегистрации("xUnitFor1C.ГенераторОтчетаAllureXML", УровеньЖурналаРегистрации.Информация, , , Сообщение);
	
	//ПроверитьИмяФайлаРезультатаAllure(ИмяФайла);
	
	// Исключаем возможность записи в UTF-8 BOM
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
	ЗаписьТекста.Закрыть();
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла,,, Истина);
	ЗаписьТекста.ЗаписатьСтроку(СтрокаJSON);
	//КоличествоСтрок = СтрЧислоСтрок(СтрокаXML);
	//Для НомерСтроки = 1 По КоличествоСтрок Цикл
	//	Стр = СтрПолучитьСтроку(СтрокаXML, НомерСтроки);
	//	ЗаписьТекста.ЗаписатьСтроку(Стр);
	//КонецЦикла;
	ЗаписьТекста.Закрыть();

КонецПроцедуры
// } Report generator interface

// { Helpers

Функция СоздатьОтчетАллюр2(РезультатыТестирования)

	МассивШагов = Новый Массив;
	КоллекцияРодителей = Новый Соответствие;
	ДобавитьШагТестированияВМассивШагов(РезультатыТестирования, МассивШагов, КоллекцияРодителей);

	МассивОписаний = Новый Массив;
	Для каждого РезультатШага Из МассивШагов Цикл
		ОписаниеШага = СоздатьОписаниеШага(РезультатШага, КоллекцияРодителей);
		МассивОписаний.Добавить(ОписаниеШага);
	КонецЦикла;

	Возврат МассивОписаний;
КонецФункции

Функция ОписаниеСценарияАллюр2()
	Перем СтруктураРезультата;
	
	GUID             = Новый УникальныйИдентификатор();
	СтруктураРезультата = Новый Структура(); //"uuid, historyId, name, status, parameters, labels, links, attachments");
	СтруктураРезультата.Вставить("uuid", Строка(GUID));
	СтруктураРезультата.Вставить("historyId", Неопределено);
	СтруктураРезультата.Вставить("name", Неопределено);
	СтруктураРезультата.Вставить("fullName", Неопределено);
	СтруктураРезультата.Вставить("start", Неопределено);
	СтруктураРезультата.Вставить("stop", Неопределено);
	СтруктураРезультата.Вставить("statusDetails",  Новый Структура("known, muted,flaky", Ложь, Ложь, Ложь));
	СтруктураРезультата.Вставить("status", Неопределено);
	СтруктураРезультата.Вставить("stage", "finished"); // Внятного описания, зачем это в каждом сценарии нет. 
	СтруктураРезультата.Вставить("steps", Новый Массив());
	СтруктураРезультата.Вставить("parameters", Новый Массив());
	СтруктураРезультата.Вставить("labels", Новый Массив());
	СтруктураРезультата.Вставить("links", Новый Массив());
	СтруктураРезультата.Вставить("attachments", Новый Массив());
	СтруктураРезультата.Вставить("description", Неопределено);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Процедура ДобавитьШагТестированияВМассивШагов(Знач РезультатыТестирования, Знач МассивШагов, Знач КоллекцияРодителей, Знач Родитель = Неопределено)
	// Лог.Отладка("Тип РезультатыТестирования %1", ТипЗнч(РезультатыТестирования));

	Если ТипЗнч(РезультатыТестирования) = Тип("Массив") Тогда
		Для каждого Строка Из РезультатыТестирования Цикл
			// Лог.Отладка("	Тип Строка %1", ТипЗнч(Строка));
			КоллекцияРодителей.Вставить(Строка.Ключ, Родитель);
			ДобавитьШагТестированияВМассивШагов(Строка, МассивШагов, КоллекцияРодителей, Родитель);
		КонецЦикла;
	Иначе
		Строка = РезультатыТестирования;
		Если Строка.Тип = "Элемент" Тогда
			Строка.Вставить("Родитель", Родитель);
			МассивШагов.Добавить(Строка);
			КоллекцияРодителей.Вставить(Строка.Ключ, Родитель);
		Иначе
			ДобавитьШагТестированияВМассивШагов(Строка.Строки, МассивШагов, КоллекцияРодителей, Строка);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Функция НайтиПоКлючу(Знач КоллекцияРодителей, Знач Ключ)
	Рез = КоллекцияРодителей.Получить(Ключ);
	Возврат Рез;
КонецФункции

Функция СоздатьОписаниеШага(Знач РезультатШага, Знач КоллекцияРодителей)
	ОписаниеШага = ОписаниеСценарияАллюр2();

	//РазницаВМилисекундахМеждуЮниксИНачалЭпохи = 62135596800000;

	//Лог.Отладка("Имя метода %1", РезультатШага.ИмяМетода);
	//Лог.Отладка("Представление %1", РезультатШага.Представление);
	//Лог.Отладка("Путь %1", РезультатШага.Путь);
	
	Родитель = РезультатШага.Родитель;
	//Лог.Отладка("ТипЗнч(Родитель) %1", ТипЗнч(Родитель));
	//Лог.Отладка("Родитель.Имя %1", Родитель.Имя);

	РодительРодителя = НайтиПоКлючу(КоллекцияРодителей, Родитель.Ключ);
	//Лог.Отладка("ТипЗнч(РодительРодителя) %1", ТипЗнч(РодительРодителя));
	//Лог.Отладка("РодительРодителя.Имя %1", РодительРодителя.Имя);

	// ОписаниеШага.historyId = СтрокаФичи.Имя + "." +  СтруктураВыгрузки.name;
	ОписаниеШага.name = РезультатШага.Представление;
	ОписаниеШага.historyId = РезультатШага.Представление;
	// СтруктураВыгрузки.Вставить("description", ДополнительноеОписание["description"]);

	ОписаниеШага.Вставить("start", РезультатШага.ВремяНачала - РазницаВМилисекундахМеждуЮниксИНачалЭпохи);
	ОписаниеШага.Вставить("stop", РезультатШага.ВремяОкончания - РазницаВМилисекундахМеждуЮниксИНачалЭпохи);	

	ВставитьОписаниеСтатуса(ОписаниеШага, РезультатШага.Сообщение);

	ОписаниеШага.Вставить("status", СтатусАллюр(РезультатШага.Состояние));

	ИмяФичи = РодительРодителя.Имя;
	ИмяСтори = Родитель.Имя;
	ИмяПакета = РезультатШага.Путь;
	ИмяХоста = РодительРодителя.Имя;

	СписокМеток = ОписаниеШага.labels;
	ДобавитьМетку(СписокМеток, "host", ИмяХоста);
	ДобавитьМетку(СписокМеток, "package", ИмяПакета);
	ДобавитьМетку(СписокМеток, "feature", ИмяФичи);
	ДобавитьМетку(СписокМеток, "feature", ИмяСтори);

	Возврат ОписаниеШага;
КонецФункции

Процедура ВставитьОписаниеСтатуса(Знач ОписаниеШага, Знач ОписаниеОшибки = "")
	
	ОписаниеШага.Вставить("statusDetails", 
		Новый Структура("known, muted, flaky, message, trace", 
			Ложь, Ложь, Ложь, ОписаниеОшибки, ""));
КонецПроцедуры

Функция СтатусАллюр(Знач СостояниеШага)
	Рез = "skipped";
	Если СостояниеШага = СостоянияТестов.Пройден Тогда
		Рез = "passed";
	ИначеЕсли СостояниеШага = СостоянияТестов.Сломан Тогда
		Рез = "pending"; //todo failed
	ИначеЕсли СостояниеШага = СостоянияТестов.НеизвестнаяОшибка Тогда
		Рез = "failed";
	ИначеЕсли СостояниеШага = СостоянияТестов.НеРеализован Тогда
		Рез = "skipped";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

Процедура ДобавитьМетку(Знач СписокМеток, Знач Имя, Знач Значение)
	
	Метка       = Новый Структура("name, value");
	Метка.name  = Имя;
	Метка.value = Значение;
	
	СписокМеток.Вставить(0, Метка);

КонецПроцедуры

// TODO ниже не нужные методы

// Замена функции СтрШаблон на конфигурациях с режимом совместимости < 8.3.6
// При внедрении в конфигурацию с режимом совместимости >= 8.3.6 данную функцию необходимо удалить
//
Функция СтрШаблон_(Знач СтрокаШаблон, Знач Парам1 = Неопределено, Знач Парам2 = Неопределено, Знач Парам3 = Неопределено, Знач Парам4 = Неопределено) Экспорт
		
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Парам1);
	МассивПараметров.Добавить(Парам2);
	МассивПараметров.Добавить(Парам3);
	МассивПараметров.Добавить(Парам4);
	
	Для Сч = 1 По МассивПараметров.Количество() Цикл
		ТекЗначение = МассивПараметров[Сч-1];
		СтрокаШаблон = СтрЗаменить(СтрокаШаблон, "%"+Сч, Строка(ТекЗначение));
	КонецЦикла;
	Возврат СтрокаШаблон;
КонецФункции


// задаю уникальное имя для возможности получения одного отчета allure по разным тестовым наборам
Функция ПолучитьУникальноеИмяФайла(Знач ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	ГУИД = Новый УникальныйИдентификатор;
	ИмяФайла = СтрШаблон_("%1-%2-testsuite.xml", ГУИД, Файл.ИмяБезРасширения);
	ИмяФайла = СтрШаблон_("%1/%2", Файл.Путь, ИмяФайла); 
	Возврат ИмяФайла;
КонецФункции

Процедура ПроверитьИмяФайлаРезультатаAllure(ИмяФайла) Экспорт
	Сообщение = "";
	Файл = Новый Файл(ИмяФайла);
	Если Найти(Файл.Имя, "-testsuite") = 0 Тогда
		Сообщение = СтрШаблон_("%1
			|Файл-результат для Allure должен заканчиваться на ""-testsuite.xml""
			|Иначе Allure не покажет результаты тестирования
			|А сейчас имя файла %2", 
			Сообщение, Файл.ПолноеИмя);
	КонецЕсли;
	Если  Файл.Расширение <> ".xml" Тогда
		Сообщение = СтрШаблон_("%1
			|Файл-результат для Allure должен иметь расширение ""xml""
			|Иначе Allure не покажет результаты тестирования", 
			Сообщение);
	КонецЕсли;
	Если Не ПустаяСтрока (Сообщение) Тогда
		ВызватьИсключение Сообщение;
	КонецЕсли;
КонецПроцедуры

Функция УдалитьНедопустимыеСимволыXML(Знач Результат)
	Позиция = НайтиНедопустимыеСимволыXML(Результат);
	Пока Позиция > 0 Цикл
		Результат = Лев(Результат, Позиция - 1) + Сред(Результат, Позиция + 1);
		Позиция = НайтиНедопустимыеСимволыXML(Результат, Позиция);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция Allure_ПолучитьПреобразованнуюСтрокуXML(Знач Строка)

	Строка = СтрЗаменить(Строка,"<test-suite-result","<ns2:test-suite");
	Строка = СтрЗаменить(Строка,"</test-suite-result>","</ns2:test-suite>");
	Строка = СтрЗаменить(Строка,"xmlns=""urn:model.allure.qatools.yandex.ru""","xmlns:ns2=""urn:model.allure.qatools.yandex.ru""");
	
	Возврат Строка;

КонецФункции

Функция Allure_ПолучитьМетку(Фабрика, Имя, Значение)

	Типlabel	= Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "label");
	Метка		= Фабрика.Создать(Типlabel);
	Метка.name	= Имя;
	Метка.value = Значение;
	
	Возврат Метка;

КонецФункции

Функция Allure_ПолучитьПараметр(Фабрика, Имя, Значение, Тип)

	ТипParameter 	= Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "parameter");
	Параметр 		= Фабрика.Создать(ТипParameter);
	Параметр.name  	= Имя;
	Параметр.value 	= Значение;
	Параметр.kind 	= Тип;
	
	Возврат Параметр;

КонецФункции

Функция Allure_ПолучитьОшибку(Фабрика, Знач СообщениеОбОшибке)

	ТипFailure		= Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "failure");
	Ошибка			= Фабрика.Создать(ТипFailure);
	Ошибка.message	= СообщениеОбОшибке;	
	
	Возврат Ошибка;

КонецФункции

Функция Allure_ПолучитьСтатус(Состояние, СостоянияТестов)

	Статус = "failed";
	
	Если Состояние = СостоянияТестов.Пройден Тогда
		Статус = "passed";	
	ИначеЕсли Состояние = СостоянияТестов.НеРеализован Тогда
		Статус = "canceled";
	ИначеЕсли Состояние = СостоянияТестов.Сломан Тогда
		Статус = "broken";
	ИначеЕсли Состояние = СостоянияТестов.НеизвестнаяОшибка Тогда
		Статус = "failed";
	КонецЕсли;	
	
	Возврат Статус;

КонецФункции
// } Helpers

РазницаВМилисекундахМеждуЮниксИНачалЭпохи = 62135596800000;